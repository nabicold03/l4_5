
lab4_i2c_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003258  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb98  0800bb98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb98  0800bb98  0001bb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bba0  0800bba0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bba0  0800bba0  0001bba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bba4  0800bba4  0001bba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800bba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000044c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  200004bc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ed5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004320  00000000  00000000  00040f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00045298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a0  00000000  00000000  00046800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cf3  00000000  00000000  00047ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000213ea  00000000  00000000  0006d893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d38d6  00000000  00000000  0008ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00162553  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b10  00000000  00000000  001625a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008928 	.word	0x08008928

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008928 	.word	0x08008928

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800056c:	2201      	movs	r2, #1
 800056e:	2108      	movs	r1, #8
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <button_init+0x14>)
 8000572:	f003 fe33 	bl	80041dc <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40020c00 	.word	0x40020c00

08000580 <button_Scan>:

void button_Scan(){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	482f      	ldr	r0, [pc, #188]	; (8000648 <button_Scan+0xc8>)
 800058c:	f003 fe26 	bl	80041dc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2108      	movs	r1, #8
 8000594:	482c      	ldr	r0, [pc, #176]	; (8000648 <button_Scan+0xc8>)
 8000596:	f003 fe21 	bl	80041dc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800059a:	230a      	movs	r3, #10
 800059c:	2202      	movs	r2, #2
 800059e:	492b      	ldr	r1, [pc, #172]	; (800064c <button_Scan+0xcc>)
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <button_Scan+0xd0>)
 80005a2:	f005 fc20 	bl	8005de6 <HAL_SPI_Receive>
	  int button_index = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ae:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	e03f      	b.n	8000636 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db06      	blt.n	80005ca <button_Scan+0x4a>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b03      	cmp	r3, #3
 80005c0:	dc03      	bgt.n	80005ca <button_Scan+0x4a>
			  button_index = i + 4; 		// do theo schematic thì spi gửi ko giống như button trên mạch
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3304      	adds	r3, #4
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e018      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  	//-> cần convert lại cho nó đúng với thứ tự mình mún
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dd07      	ble.n	80005e0 <button_Scan+0x60>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b07      	cmp	r3, #7
 80005d4:	dc04      	bgt.n	80005e0 <button_Scan+0x60>
			  button_index = 7 - i;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f1c3 0307 	rsb	r3, r3, #7
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e00d      	b.n	80005fc <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	dd06      	ble.n	80005f4 <button_Scan+0x74>
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2b0b      	cmp	r3, #11
 80005ea:	dc03      	bgt.n	80005f4 <button_Scan+0x74>
			  button_index = i + 4;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	3304      	adds	r3, #4
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	e003      	b.n	80005fc <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f1c3 0317 	rsb	r3, r3, #23
 80005fa:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <button_Scan+0xcc>)
 80005fe:	881a      	ldrh	r2, [r3, #0]
 8000600:	897b      	ldrh	r3, [r7, #10]
 8000602:	4013      	ands	r3, r2
 8000604:	b29b      	uxth	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <button_Scan+0x96>
 800060a:	4a12      	ldr	r2, [pc, #72]	; (8000654 <button_Scan+0xd4>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2100      	movs	r1, #0
 8000610:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000614:	e009      	b.n	800062a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <button_Scan+0xd4>)
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061e:	3301      	adds	r3, #1
 8000620:	b299      	uxth	r1, r3
 8000622:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <button_Scan+0xd4>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800062a:	897b      	ldrh	r3, [r7, #10]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3301      	adds	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	ddbc      	ble.n	80005b6 <button_Scan+0x36>
	  }
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40020c00 	.word	0x40020c00
 800064c:	20000090 	.word	0x20000090
 8000650:	20000260 	.word	0x20000260
 8000654:	200000d8 	.word	0x200000d8

08000658 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 800065c:	201e      	movs	r0, #30
 800065e:	f003 f999 	bl	8003994 <DEC2BCD>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <ds3231_init+0x80>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 800066a:	2016      	movs	r0, #22
 800066c:	f003 f992 	bl	8003994 <DEC2BCD>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <ds3231_init+0x80>)
 8000676:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000678:	2015      	movs	r0, #21
 800067a:	f003 f98b 	bl	8003994 <DEC2BCD>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <ds3231_init+0x80>)
 8000684:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000686:	2006      	movs	r0, #6
 8000688:	f003 f984 	bl	8003994 <DEC2BCD>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <ds3231_init+0x80>)
 8000692:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000694:	200f      	movs	r0, #15
 8000696:	f003 f97d 	bl	8003994 <DEC2BCD>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <ds3231_init+0x80>)
 80006a0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 80006a2:	2009      	movs	r0, #9
 80006a4:	f003 f976 	bl	8003994 <DEC2BCD>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <ds3231_init+0x80>)
 80006ae:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 80006b0:	2017      	movs	r0, #23
 80006b2:	f003 f96f 	bl	8003994 <DEC2BCD>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <ds3231_init+0x80>)
 80006bc:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006be:	2332      	movs	r3, #50	; 0x32
 80006c0:	2203      	movs	r2, #3
 80006c2:	21d0      	movs	r1, #208	; 0xd0
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <ds3231_init+0x84>)
 80006c6:	f004 fa07 	bl	8004ad8 <HAL_I2C_IsDeviceReady>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <ds3231_init+0x7a>
		while(1);
 80006d0:	e7fe      	b.n	80006d0 <ds3231_init+0x78>
	};
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000100 	.word	0x20000100
 80006dc:	200001d0 	.word	0x200001d0

080006e0 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af04      	add	r7, sp, #16
 80006e6:	4603      	mov	r3, r0
 80006e8:	460a      	mov	r2, r1
 80006ea:	71fb      	strb	r3, [r7, #7]
 80006ec:	4613      	mov	r3, r2
 80006ee:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 f94e 	bl	8003994 <DEC2BCD>
 80006f8:	4603      	mov	r3, r0
 80006fa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	230a      	movs	r3, #10
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f107 030f 	add.w	r3, r7, #15
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	21d0      	movs	r1, #208	; 0xd0
 8000712:	4803      	ldr	r0, [pc, #12]	; (8000720 <ds3231_Write+0x40>)
 8000714:	f003 fec0 	bl	8004498 <HAL_I2C_Mem_Write>
}
 8000718:	bf00      	nop
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001d0 	.word	0x200001d0

08000724 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800072a:	230a      	movs	r3, #10
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2307      	movs	r3, #7
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2200      	movs	r2, #0
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <ds3231_ReadTime+0xa8>)
 800073e:	f003 ffa5 	bl	800468c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f003 f90a 	bl	8003960 <BCD2DEC>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <ds3231_ReadTime+0xac>)
 8000752:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	4618      	mov	r0, r3
 800075a:	f003 f901 	bl	8003960 <BCD2DEC>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <ds3231_ReadTime+0xb0>)
 8000764:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <ds3231_ReadTime+0xa4>)
 8000768:	789b      	ldrb	r3, [r3, #2]
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f8f8 	bl	8003960 <BCD2DEC>
 8000770:	4603      	mov	r3, r0
 8000772:	461a      	mov	r2, r3
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <ds3231_ReadTime+0xb4>)
 8000776:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	4618      	mov	r0, r3
 800077e:	f003 f8ef 	bl	8003960 <BCD2DEC>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <ds3231_ReadTime+0xb8>)
 8000788:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	4618      	mov	r0, r3
 8000790:	f003 f8e6 	bl	8003960 <BCD2DEC>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <ds3231_ReadTime+0xbc>)
 800079a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <ds3231_ReadTime+0xa4>)
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 f8dd 	bl	8003960 <BCD2DEC>
 80007a6:	4603      	mov	r3, r0
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <ds3231_ReadTime+0xc0>)
 80007ac:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <ds3231_ReadTime+0xa4>)
 80007b0:	799b      	ldrb	r3, [r3, #6]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f003 f8d4 	bl	8003960 <BCD2DEC>
 80007b8:	4603      	mov	r3, r0
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <ds3231_ReadTime+0xc4>)
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000100 	.word	0x20000100
 80007cc:	200001d0 	.word	0x200001d0
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	200000fa 	.word	0x200000fa
 80007d8:	200000fd 	.word	0x200000fd
 80007dc:	200000fc 	.word	0x200000fc
 80007e0:	200000fb 	.word	0x200000fb
 80007e4:	200000fe 	.word	0x200000fe
 80007e8:	200000f9 	.word	0x200000f9

080007ec <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]
 8000802:	615a      	str	r2, [r3, #20]
 8000804:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_FSMC_Init+0xec>)
 800081a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800081e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000822:	4a2e      	ldr	r2, [pc, #184]	; (80008dc <MX_FSMC_Init+0xf0>)
 8000824:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_FSMC_Init+0xec>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_FSMC_Init+0xec>)
 800083a:	2210      	movs	r2, #16
 800083c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_FSMC_Init+0xec>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000866:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_FSMC_Init+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_FSMC_Init+0xec>)
 8000874:	2200      	movs	r2, #0
 8000876:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_FSMC_Init+0xec>)
 800087a:	2200      	movs	r2, #0
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800087e:	230f      	movs	r3, #15
 8000880:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000882:	230f      	movs	r3, #15
 8000884:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000886:	233c      	movs	r3, #60	; 0x3c
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800088e:	2310      	movs	r3, #16
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000892:	2311      	movs	r3, #17
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800089a:	2308      	movs	r3, #8
 800089c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800089e:	230f      	movs	r3, #15
 80008a0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80008a2:	2309      	movs	r3, #9
 80008a4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008aa:	2310      	movs	r3, #16
 80008ac:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008ae:	2311      	movs	r3, #17
 80008b0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008b6:	463a      	mov	r2, r7
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_FSMC_Init+0xec>)
 80008c0:	f005 fe74 	bl	80065ac <HAL_SRAM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008ca:	f001 f811 	bl	80018f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008ce:	bf00      	nop
 80008d0:	3738      	adds	r7, #56	; 0x38
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000108 	.word	0x20000108
 80008dc:	a0000104 	.word	0xa0000104

080008e0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_FSMC_MspInit+0x88>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d131      	bne.n	8000960 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <HAL_FSMC_MspInit+0x88>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 8000908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6393      	str	r3, [r2, #56]	; 0x38
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <HAL_FSMC_MspInit+0x8c>)
 8000914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800091e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000922:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000930:	230c      	movs	r3, #12
 8000932:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	480d      	ldr	r0, [pc, #52]	; (8000970 <HAL_FSMC_MspInit+0x90>)
 800093a:	f003 fab3 	bl	8003ea4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800093e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000942:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000950:	230c      	movs	r3, #12
 8000952:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <HAL_FSMC_MspInit+0x94>)
 800095a:	f003 faa3 	bl	8003ea4 <HAL_GPIO_Init>
 800095e:	e000      	b.n	8000962 <HAL_FSMC_MspInit+0x82>
    return;
 8000960:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000094 	.word	0x20000094
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020c00 	.word	0x40020c00

08000978 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000980:	f7ff ffae 	bl	80008e0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08c      	sub	sp, #48	; 0x30
 8000990:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	4b77      	ldr	r3, [pc, #476]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a76      	ldr	r2, [pc, #472]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b74      	ldr	r3, [pc, #464]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	4b70      	ldr	r3, [pc, #448]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a6f      	ldr	r2, [pc, #444]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b6d      	ldr	r3, [pc, #436]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b69      	ldr	r3, [pc, #420]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a68      	ldr	r2, [pc, #416]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b66      	ldr	r3, [pc, #408]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a61      	ldr	r2, [pc, #388]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b5f      	ldr	r3, [pc, #380]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	4b5b      	ldr	r3, [pc, #364]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5a      	ldr	r2, [pc, #360]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b54      	ldr	r3, [pc, #336]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a53      	ldr	r2, [pc, #332]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <MX_GPIO_Init+0x1f8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2170      	movs	r1, #112	; 0x70
 8000a6a:	4847      	ldr	r0, [pc, #284]	; (8000b88 <MX_GPIO_Init+0x1fc>)
 8000a6c:	f003 fbb6 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000a76:	4845      	ldr	r0, [pc, #276]	; (8000b8c <MX_GPIO_Init+0x200>)
 8000a78:	f003 fbb0 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000a82:	4843      	ldr	r0, [pc, #268]	; (8000b90 <MX_GPIO_Init+0x204>)
 8000a84:	f003 fbaa 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	4841      	ldr	r0, [pc, #260]	; (8000b94 <MX_GPIO_Init+0x208>)
 8000a90:	f003 fba4 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2108      	movs	r1, #8
 8000a98:	483f      	ldr	r0, [pc, #252]	; (8000b98 <MX_GPIO_Init+0x20c>)
 8000a9a:	f003 fb9f 	bl	80041dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a9e:	2370      	movs	r3, #112	; 0x70
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4834      	ldr	r0, [pc, #208]	; (8000b88 <MX_GPIO_Init+0x1fc>)
 8000ab6:	f003 f9f5 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000aba:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482e      	ldr	r0, [pc, #184]	; (8000b8c <MX_GPIO_Init+0x200>)
 8000ad4:	f003 f9e6 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ad8:	23c0      	movs	r3, #192	; 0xc0
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	482a      	ldr	r0, [pc, #168]	; (8000b94 <MX_GPIO_Init+0x208>)
 8000aec:	f003 f9da 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X5_Pin|T_PEN_Pin|T_MISO_Pin;
 8000af0:	f241 1330 	movw	r3, #4400	; 0x1130
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MX_GPIO_Init+0x200>)
 8000b06:	f003 f9cd 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CLK_Pin;
 8000b0a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	481b      	ldr	r0, [pc, #108]	; (8000b90 <MX_GPIO_Init+0x204>)
 8000b24:	f003 f9be 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4815      	ldr	r0, [pc, #84]	; (8000b90 <MX_GPIO_Init+0x204>)
 8000b3c:	f003 f9b2 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	480e      	ldr	r0, [pc, #56]	; (8000b94 <MX_GPIO_Init+0x208>)
 8000b5a:	f003 f9a3 	bl	8003ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_GPIO_Init+0x20c>)
 8000b76:	f003 f995 	bl	8003ea4 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3730      	adds	r7, #48	; 0x30
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40021800 	.word	0x40021800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_I2C1_Init+0x50>)
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_I2C1_Init+0x54>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_I2C1_Init+0x50>)
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x58>)
 8000baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_I2C1_Init+0x50>)
 8000bda:	f003 fb19 	bl	8004210 <HAL_I2C_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000be4:	f000 fe84 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001d0 	.word	0x200001d0
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	000186a0 	.word	0x000186a0

08000bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_I2C_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c46:	2304      	movs	r3, #4
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <HAL_I2C_MspInit+0x8c>)
 8000c52:	f003 f927 	bl	8003ea4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_I2C_MspInit+0x88>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40005400 	.word	0x40005400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020400 	.word	0x40020400

08000c88 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <LCD_WR_REG+0x1c>)
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	8013      	strh	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	600ffffe 	.word	0x600ffffe

08000ca8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <LCD_WR_DATA+0x1c>)
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	8053      	strh	r3, [r2, #2]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	600ffffe 	.word	0x600ffffe

08000cc8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <LCD_RD_DATA+0x20>)
 8000cd0:	885b      	ldrh	r3, [r3, #2]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	b29b      	uxth	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	600ffffe 	.word	0x600ffffe

08000cec <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	80fb      	strh	r3, [r7, #6]
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80bb      	strh	r3, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	807b      	strh	r3, [r7, #2]
 8000d06:	4613      	mov	r3, r2
 8000d08:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000d0a:	202a      	movs	r0, #42	; 0x2a
 8000d0c:	f7ff ffbc 	bl	8000c88 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffc6 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffc0 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d28:	887b      	ldrh	r3, [r7, #2]
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffba 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffb4 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d40:	202b      	movs	r0, #43	; 0x2b
 8000d42:	f7ff ffa1 	bl	8000c88 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffab 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ffa5 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d5e:	883b      	ldrh	r3, [r7, #0]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff9f 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d6a:	883b      	ldrh	r3, [r7, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff99 	bl	8000ca8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d76:	202c      	movs	r0, #44	; 0x2c
 8000d78:	f7ff ff86 	bl	8000c88 <LCD_WR_REG>
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd90      	pop	{r4, r7, pc}

08000d84 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <lcd_Clear+0x70>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <lcd_Clear+0x70>)
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff ff9b 	bl	8000cec <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	81fb      	strh	r3, [r7, #14]
 8000dba:	e011      	b.n	8000de0 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	81bb      	strh	r3, [r7, #12]
 8000dc0:	e006      	b.n	8000dd0 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff6f 	bl	8000ca8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	81bb      	strh	r3, [r7, #12]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <lcd_Clear+0x70>)
 8000dd2:	885b      	ldrh	r3, [r3, #2]
 8000dd4:	89ba      	ldrh	r2, [r7, #12]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d3f3      	bcc.n	8000dc2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	81fb      	strh	r3, [r7, #14]
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <lcd_Clear+0x70>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	89fa      	ldrh	r2, [r7, #14]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d3e8      	bcc.n	8000dbc <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000224 	.word	0x20000224

08000df8 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	460b      	mov	r3, r1
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	88fa      	ldrh	r2, [r7, #6]
 8000e0e:	88b9      	ldrh	r1, [r7, #4]
 8000e10:	88f8      	ldrh	r0, [r7, #6]
 8000e12:	f7ff ff6b 	bl	8000cec <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff45 	bl	8000ca8 <LCD_WR_DATA>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	70fb      	strb	r3, [r7, #3]
 8000e42:	4613      	mov	r3, r2
 8000e44:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e52:	085b      	lsrs	r3, r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	08db      	lsrs	r3, r3, #3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf14      	ite	ne
 8000e6a:	2301      	movne	r3, #1
 8000e6c:	2300      	moveq	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	fb12 f303 	smulbb	r3, r2, r3
 8000e7e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	3b20      	subs	r3, #32
 8000e84:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	3b01      	subs	r3, #1
 8000e92:	b29c      	uxth	r4, r3
 8000e94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	88b9      	ldrh	r1, [r7, #4]
 8000ea6:	88f8      	ldrh	r0, [r7, #6]
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	f7ff ff1f 	bl	8000cec <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	827b      	strh	r3, [r7, #18]
 8000eb2:	e07a      	b.n	8000faa <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000eb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eb8:	2b0c      	cmp	r3, #12
 8000eba:	d028      	beq.n	8000f0e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ec0:	2b10      	cmp	r3, #16
 8000ec2:	d108      	bne.n	8000ed6 <lcd_ShowChar+0xae>
 8000ec4:	78fa      	ldrb	r2, [r7, #3]
 8000ec6:	8a7b      	ldrh	r3, [r7, #18]
 8000ec8:	493c      	ldr	r1, [pc, #240]	; (8000fbc <lcd_ShowChar+0x194>)
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	440a      	add	r2, r1
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	75fb      	strb	r3, [r7, #23]
 8000ed4:	e01b      	b.n	8000f0e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000ed6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eda:	2b18      	cmp	r3, #24
 8000edc:	d10b      	bne.n	8000ef6 <lcd_ShowChar+0xce>
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	8a79      	ldrh	r1, [r7, #18]
 8000ee2:	4837      	ldr	r0, [pc, #220]	; (8000fc0 <lcd_ShowChar+0x198>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	4403      	add	r3, r0
 8000eee:	440b      	add	r3, r1
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	e00b      	b.n	8000f0e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000ef6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000efa:	2b20      	cmp	r3, #32
 8000efc:	d15a      	bne.n	8000fb4 <lcd_ShowChar+0x18c>
 8000efe:	78fa      	ldrb	r2, [r7, #3]
 8000f00:	8a7b      	ldrh	r3, [r7, #18]
 8000f02:	4930      	ldr	r1, [pc, #192]	; (8000fc4 <lcd_ShowChar+0x19c>)
 8000f04:	0192      	lsls	r2, r2, #6
 8000f06:	440a      	add	r2, r1
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75bb      	strb	r3, [r7, #22]
 8000f12:	e044      	b.n	8000f9e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d120      	bne.n	8000f5e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f1c:	7dfa      	ldrb	r2, [r7, #23]
 8000f1e:	7dbb      	ldrb	r3, [r7, #22]
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <lcd_ShowChar+0x10e>
 8000f2c:	883b      	ldrh	r3, [r7, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff feba 	bl	8000ca8 <LCD_WR_DATA>
 8000f34:	e003      	b.n	8000f3e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff feb5 	bl	8000ca8 <LCD_WR_DATA>
				m++;
 8000f3e:	7d7b      	ldrb	r3, [r7, #21]
 8000f40:	3301      	adds	r3, #1
 8000f42:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f44:	7d7b      	ldrb	r3, [r7, #21]
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f4c:	fb02 f201 	mul.w	r2, r2, r1
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11f      	bne.n	8000f98 <lcd_ShowChar+0x170>
				{
					m=0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	757b      	strb	r3, [r7, #21]
					break;
 8000f5c:	e022      	b.n	8000fa4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000f5e:	7dfa      	ldrb	r2, [r7, #23]
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	fa42 f303 	asr.w	r3, r2, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <lcd_ShowChar+0x152>
 8000f6e:	883a      	ldrh	r2, [r7, #0]
 8000f70:	88b9      	ldrh	r1, [r7, #4]
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff3f 	bl	8000df8 <lcd_DrawPoint>
				x++;
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	8a3b      	ldrh	r3, [r7, #16]
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d105      	bne.n	8000f98 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f8c:	8a3b      	ldrh	r3, [r7, #16]
 8000f8e:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	80bb      	strh	r3, [r7, #4]
					break;
 8000f96:	e005      	b.n	8000fa4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d9b7      	bls.n	8000f14 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000fa4:	8a7b      	ldrh	r3, [r7, #18]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	827b      	strh	r3, [r7, #18]
 8000faa:	8a7a      	ldrh	r2, [r7, #18]
 8000fac:	89bb      	ldrh	r3, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d380      	bcc.n	8000eb4 <lcd_ShowChar+0x8c>
 8000fb2:	e000      	b.n	8000fb6 <lcd_ShowChar+0x18e>
		else return;
 8000fb4:	bf00      	nop
				}
			}
		}
	}
}
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	08008bcc 	.word	0x08008bcc
 8000fc0:	080091bc 	.word	0x080091bc
 8000fc4:	0800a38c 	.word	0x0800a38c

08000fc8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000fdc:	e004      	b.n	8000fe8 <mypow+0x20>
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	71ba      	strb	r2, [r7, #6]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f5      	bne.n	8000fde <mypow+0x16>
	return result;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af04      	add	r7, sp, #16
 8001006:	4604      	mov	r4, r0
 8001008:	4608      	mov	r0, r1
 800100a:	4611      	mov	r1, r2
 800100c:	461a      	mov	r2, r3
 800100e:	4623      	mov	r3, r4
 8001010:	80fb      	strh	r3, [r7, #6]
 8001012:	4603      	mov	r3, r0
 8001014:	80bb      	strh	r3, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]
 800101a:	4613      	mov	r3, r2
 800101c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800101e:	2300      	movs	r3, #0
 8001020:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	737b      	strb	r3, [r7, #13]

	if(len == 0){			// this if is added by vnb, original source does not have this, only used for this exercise to display empty string when toggling in mode adjust time
 800102a:	787b      	ldrb	r3, [r7, #1]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d117      	bne.n	8001060 <lcd_ShowIntNum+0x60>
		lcd_ShowChar(x+t*sizex, y, ' ', fc, bc, sizey, 0);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	b29a      	uxth	r2, r3
 8001034:	7b7b      	ldrb	r3, [r7, #13]
 8001036:	b29b      	uxth	r3, r3
 8001038:	fb12 f303 	smulbb	r3, r2, r3
 800103c:	b29a      	uxth	r2, r3
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	4413      	add	r3, r2
 8001042:	b298      	uxth	r0, r3
 8001044:	8c3a      	ldrh	r2, [r7, #32]
 8001046:	88b9      	ldrh	r1, [r7, #4]
 8001048:	2300      	movs	r3, #0
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	2220      	movs	r2, #32
 800105a:	f7ff fee5 	bl	8000e28 <lcd_ShowChar>

			}
		 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
		}
	}
}
 800105e:	e060      	b.n	8001122 <lcd_ShowIntNum+0x122>
		for(t=0;t<len;t++)
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e059      	b.n	800111a <lcd_ShowIntNum+0x11a>
			temp=(num/mypow(10,len-t-1))%10;
 8001066:	887c      	ldrh	r4, [r7, #2]
 8001068:	787a      	ldrb	r2, [r7, #1]
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3b01      	subs	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	200a      	movs	r0, #10
 8001078:	f7ff ffa6 	bl	8000fc8 <mypow>
 800107c:	4603      	mov	r3, r0
 800107e:	fbb4 f1f3 	udiv	r1, r4, r3
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <lcd_ShowIntNum+0x12c>)
 8001084:	fba3 2301 	umull	r2, r3, r3, r1
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	1aca      	subs	r2, r1, r3
 8001094:	4613      	mov	r3, r2
 8001096:	733b      	strb	r3, [r7, #12]
			if(enshow==0&&t<(len-1))
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d121      	bne.n	80010e2 <lcd_ShowIntNum+0xe2>
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	429a      	cmp	r2, r3
 80010a6:	da1c      	bge.n	80010e2 <lcd_ShowIntNum+0xe2>
				if(temp==0)
 80010a8:	7b3b      	ldrb	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d117      	bne.n	80010de <lcd_ShowIntNum+0xde>
					lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	fb12 f303 	smulbb	r3, r2, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	4413      	add	r3, r2
 80010c0:	b298      	uxth	r0, r3
 80010c2:	8c3a      	ldrh	r2, [r7, #32]
 80010c4:	88b9      	ldrh	r1, [r7, #4]
 80010c6:	2300      	movs	r3, #0
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	4613      	mov	r3, r2
 80010d6:	2220      	movs	r2, #32
 80010d8:	f7ff fea6 	bl	8000e28 <lcd_ShowChar>
					continue;
 80010dc:	e01a      	b.n	8001114 <lcd_ShowIntNum+0x114>
				}else enshow=1;
 80010de:	2301      	movs	r3, #1
 80010e0:	73bb      	strb	r3, [r7, #14]
		 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	fb12 f303 	smulbb	r3, r2, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	4413      	add	r3, r2
 80010f4:	b298      	uxth	r0, r3
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	3330      	adds	r3, #48	; 0x30
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	8c3c      	ldrh	r4, [r7, #32]
 80010fe:	88b9      	ldrh	r1, [r7, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4623      	mov	r3, r4
 8001110:	f7ff fe8a 	bl	8000e28 <lcd_ShowChar>
		for(t=0;t<len;t++)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3301      	adds	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3a1      	bcc.n	8001066 <lcd_ShowIntNum+0x66>
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	cccccccd 	.word	0xcccccccd

08001130 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d007      	beq.n	800115a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <lcd_SetDir+0x44>)
 800114c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001150:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <lcd_SetDir+0x44>)
 8001154:	22f0      	movs	r2, #240	; 0xf0
 8001156:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001158:	e006      	b.n	8001168 <lcd_SetDir+0x38>
		lcddev.width=240;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <lcd_SetDir+0x44>)
 800115c:	22f0      	movs	r2, #240	; 0xf0
 800115e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <lcd_SetDir+0x44>)
 8001162:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001166:	805a      	strh	r2, [r3, #2]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000224 	.word	0x20000224

08001178 <lcd_init>:


void lcd_init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001182:	48aa      	ldr	r0, [pc, #680]	; (800142c <lcd_init+0x2b4>)
 8001184:	f003 f82a 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800118c:	f002 fcc2 	bl	8003b14 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001196:	48a5      	ldr	r0, [pc, #660]	; (800142c <lcd_init+0x2b4>)
 8001198:	f003 f820 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800119c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a0:	f002 fcb8 	bl	8003b14 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff ffc3 	bl	8001130 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011aa:	20d3      	movs	r0, #211	; 0xd3
 80011ac:	f7ff fd6c 	bl	8000c88 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011b0:	f7ff fd8a 	bl	8000cc8 <LCD_RD_DATA>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b9d      	ldr	r3, [pc, #628]	; (8001430 <lcd_init+0x2b8>)
 80011ba:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011bc:	f7ff fd84 	bl	8000cc8 <LCD_RD_DATA>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b9a      	ldr	r3, [pc, #616]	; (8001430 <lcd_init+0x2b8>)
 80011c6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011c8:	f7ff fd7e 	bl	8000cc8 <LCD_RD_DATA>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b97      	ldr	r3, [pc, #604]	; (8001430 <lcd_init+0x2b8>)
 80011d2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011d4:	4b96      	ldr	r3, [pc, #600]	; (8001430 <lcd_init+0x2b8>)
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b94      	ldr	r3, [pc, #592]	; (8001430 <lcd_init+0x2b8>)
 80011de:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011e0:	f7ff fd72 	bl	8000cc8 <LCD_RD_DATA>
 80011e4:	4603      	mov	r3, r0
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b91      	ldr	r3, [pc, #580]	; (8001430 <lcd_init+0x2b8>)
 80011ea:	889b      	ldrh	r3, [r3, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b8f      	ldr	r3, [pc, #572]	; (8001430 <lcd_init+0x2b8>)
 80011f2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80011f4:	20cf      	movs	r0, #207	; 0xcf
 80011f6:	f7ff fd47 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fd54 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001200:	20c1      	movs	r0, #193	; 0xc1
 8001202:	f7ff fd51 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001206:	2030      	movs	r0, #48	; 0x30
 8001208:	f7ff fd4e 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800120c:	20ed      	movs	r0, #237	; 0xed
 800120e:	f7ff fd3b 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f7ff fd48 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001218:	2003      	movs	r0, #3
 800121a:	f7ff fd45 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800121e:	2012      	movs	r0, #18
 8001220:	f7ff fd42 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001224:	2081      	movs	r0, #129	; 0x81
 8001226:	f7ff fd3f 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800122a:	20e8      	movs	r0, #232	; 0xe8
 800122c:	f7ff fd2c 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001230:	2085      	movs	r0, #133	; 0x85
 8001232:	f7ff fd39 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001236:	2010      	movs	r0, #16
 8001238:	f7ff fd36 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800123c:	207a      	movs	r0, #122	; 0x7a
 800123e:	f7ff fd33 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001242:	20cb      	movs	r0, #203	; 0xcb
 8001244:	f7ff fd20 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001248:	2039      	movs	r0, #57	; 0x39
 800124a:	f7ff fd2d 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800124e:	202c      	movs	r0, #44	; 0x2c
 8001250:	f7ff fd2a 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fd27 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800125a:	2034      	movs	r0, #52	; 0x34
 800125c:	f7ff fd24 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001260:	2002      	movs	r0, #2
 8001262:	f7ff fd21 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001266:	20f7      	movs	r0, #247	; 0xf7
 8001268:	f7ff fd0e 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800126c:	2020      	movs	r0, #32
 800126e:	f7ff fd1b 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001272:	20ea      	movs	r0, #234	; 0xea
 8001274:	f7ff fd08 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fd15 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fd12 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001284:	20c0      	movs	r0, #192	; 0xc0
 8001286:	f7ff fcff 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800128a:	201b      	movs	r0, #27
 800128c:	f7ff fd0c 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001290:	20c1      	movs	r0, #193	; 0xc1
 8001292:	f7ff fcf9 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fd06 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 800129c:	20c5      	movs	r0, #197	; 0xc5
 800129e:	f7ff fcf3 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012a2:	2030      	movs	r0, #48	; 0x30
 80012a4:	f7ff fd00 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012a8:	2030      	movs	r0, #48	; 0x30
 80012aa:	f7ff fcfd 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012ae:	20c7      	movs	r0, #199	; 0xc7
 80012b0:	f7ff fcea 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012b4:	20b7      	movs	r0, #183	; 0xb7
 80012b6:	f7ff fcf7 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80012ba:	2036      	movs	r0, #54	; 0x36
 80012bc:	f7ff fce4 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80012c0:	2008      	movs	r0, #8
 80012c2:	f7ff fcf1 	bl	8000ca8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80012c6:	203a      	movs	r0, #58	; 0x3a
 80012c8:	f7ff fcde 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80012cc:	2055      	movs	r0, #85	; 0x55
 80012ce:	f7ff fceb 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012d2:	20b1      	movs	r0, #177	; 0xb1
 80012d4:	f7ff fcd8 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fce5 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012de:	201a      	movs	r0, #26
 80012e0:	f7ff fce2 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012e4:	20b6      	movs	r0, #182	; 0xb6
 80012e6:	f7ff fccf 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012ea:	200a      	movs	r0, #10
 80012ec:	f7ff fcdc 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80012f0:	20a2      	movs	r0, #162	; 0xa2
 80012f2:	f7ff fcd9 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80012f6:	20f2      	movs	r0, #242	; 0xf2
 80012f8:	f7ff fcc6 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fcd3 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001302:	2026      	movs	r0, #38	; 0x26
 8001304:	f7ff fcc0 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fccd 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800130e:	20e0      	movs	r0, #224	; 0xe0
 8001310:	f7ff fcba 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001314:	200f      	movs	r0, #15
 8001316:	f7ff fcc7 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800131a:	202a      	movs	r0, #42	; 0x2a
 800131c:	f7ff fcc4 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001320:	2028      	movs	r0, #40	; 0x28
 8001322:	f7ff fcc1 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001326:	2008      	movs	r0, #8
 8001328:	f7ff fcbe 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800132c:	200e      	movs	r0, #14
 800132e:	f7ff fcbb 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001332:	2008      	movs	r0, #8
 8001334:	f7ff fcb8 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001338:	2054      	movs	r0, #84	; 0x54
 800133a:	f7ff fcb5 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800133e:	20a9      	movs	r0, #169	; 0xa9
 8001340:	f7ff fcb2 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001344:	2043      	movs	r0, #67	; 0x43
 8001346:	f7ff fcaf 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800134a:	200a      	movs	r0, #10
 800134c:	f7ff fcac 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001350:	200f      	movs	r0, #15
 8001352:	f7ff fca9 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fca6 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff fca3 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fca0 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fc9d 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800136e:	20e1      	movs	r0, #225	; 0xe1
 8001370:	f7ff fc8a 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fc97 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800137a:	2015      	movs	r0, #21
 800137c:	f7ff fc94 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001380:	2017      	movs	r0, #23
 8001382:	f7ff fc91 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001386:	2007      	movs	r0, #7
 8001388:	f7ff fc8e 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800138c:	2011      	movs	r0, #17
 800138e:	f7ff fc8b 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001392:	2006      	movs	r0, #6
 8001394:	f7ff fc88 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001398:	202b      	movs	r0, #43	; 0x2b
 800139a:	f7ff fc85 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800139e:	2056      	movs	r0, #86	; 0x56
 80013a0:	f7ff fc82 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013a4:	203c      	movs	r0, #60	; 0x3c
 80013a6:	f7ff fc7f 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f7ff fc7c 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013b0:	2010      	movs	r0, #16
 80013b2:	f7ff fc79 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013b6:	200f      	movs	r0, #15
 80013b8:	f7ff fc76 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013bc:	203f      	movs	r0, #63	; 0x3f
 80013be:	f7ff fc73 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013c2:	203f      	movs	r0, #63	; 0x3f
 80013c4:	f7ff fc70 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013c8:	200f      	movs	r0, #15
 80013ca:	f7ff fc6d 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80013ce:	202b      	movs	r0, #43	; 0x2b
 80013d0:	f7ff fc5a 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff fc67 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fc64 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fc61 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013e6:	203f      	movs	r0, #63	; 0x3f
 80013e8:	f7ff fc5e 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013ec:	202a      	movs	r0, #42	; 0x2a
 80013ee:	f7ff fc4b 	bl	8000c88 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fc58 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fc55 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fc52 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001404:	20ef      	movs	r0, #239	; 0xef
 8001406:	f7ff fc4f 	bl	8000ca8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800140a:	2011      	movs	r0, #17
 800140c:	f7ff fc3c 	bl	8000c88 <LCD_WR_REG>
	HAL_Delay(120);
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f002 fb7f 	bl	8003b14 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001416:	2029      	movs	r0, #41	; 0x29
 8001418:	f7ff fc36 	bl	8000c88 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <lcd_init+0x2bc>)
 8001424:	f002 feda 	bl	80041dc <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020800 	.word	0x40020800
 8001430:	20000224 	.word	0x20000224
 8001434:	40020000 	.word	0x40020000

08001438 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af04      	add	r7, sp, #16
 800143e:	60ba      	str	r2, [r7, #8]
 8001440:	461a      	mov	r2, r3
 8001442:	4603      	mov	r3, r0
 8001444:	81fb      	strh	r3, [r7, #14]
 8001446:	460b      	mov	r3, r1
 8001448:	81bb      	strh	r3, [r7, #12]
 800144a:	4613      	mov	r3, r2
 800144c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001452:	2300      	movs	r3, #0
 8001454:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001456:	e048      	b.n	80014ea <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d145      	bne.n	80014ea <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800145e:	89fa      	ldrh	r2, [r7, #14]
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <lcd_ShowStr+0xc4>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800146a:	085b      	lsrs	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	1acb      	subs	r3, r1, r3
 8001470:	429a      	cmp	r2, r3
 8001472:	dc3f      	bgt.n	80014f4 <lcd_ShowStr+0xbc>
 8001474:	89ba      	ldrh	r2, [r7, #12]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <lcd_ShowStr+0xc4>)
 8001478:	885b      	ldrh	r3, [r3, #2]
 800147a:	4619      	mov	r1, r3
 800147c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001480:	1acb      	subs	r3, r1, r3
 8001482:	429a      	cmp	r2, r3
 8001484:	dc36      	bgt.n	80014f4 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b80      	cmp	r3, #128	; 0x80
 800148c:	d902      	bls.n	8001494 <lcd_ShowStr+0x5c>
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
 8001492:	e02a      	b.n	80014ea <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b0d      	cmp	r3, #13
 800149a:	d10b      	bne.n	80014b4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 800149c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	89bb      	ldrh	r3, [r7, #12]
 80014a4:	4413      	add	r3, r2
 80014a6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014a8:	8abb      	ldrh	r3, [r7, #20]
 80014aa:	81fb      	strh	r3, [r7, #14]
					str++;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3301      	adds	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	e017      	b.n	80014e4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	88fc      	ldrh	r4, [r7, #6]
 80014ba:	89b9      	ldrh	r1, [r7, #12]
 80014bc:	89f8      	ldrh	r0, [r7, #14]
 80014be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	4623      	mov	r3, r4
 80014d0:	f7ff fcaa 	bl	8000e28 <lcd_ShowChar>
					x+=sizey/2;
 80014d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b29a      	uxth	r2, r3
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	4413      	add	r3, r2
 80014e2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1b2      	bne.n	8001458 <lcd_ShowStr+0x20>
 80014f2:	e000      	b.n	80014f6 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80014f4:	bf00      	nop
			}
		}
	}
}
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	20000224 	.word	0x20000224

08001500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001506:	f002 fa93 	bl	8003a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150a:	f000 f8b3 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150e:	f7ff fa3d 	bl	800098c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001512:	f001 fd11 	bl	8002f38 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001516:	f001 fe3b 	bl	8003190 <MX_TIM2_Init>
  MX_I2C1_Init();
 800151a:	f7ff fb3f 	bl	8000b9c <MX_I2C1_Init>
  MX_FSMC_Init();
 800151e:	f7ff f965 	bl	80007ec <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001522:	f002 f9a3 	bl	800386c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001526:	f000 f90f 	bl	8001748 <system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // clear the lcd screen
  lcd_Clear(BLACK);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fc2a 	bl	8000d84 <lcd_Clear>

  // initialize time for ds3231
  updateTime();
 8001530:	f000 f940 	bl	80017b4 <updateTime>

  // initialize state for finite state machines
  status[0] = INIT;			// main fsm
 8001534:	4b44      	ldr	r3, [pc, #272]	; (8001648 <main+0x148>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
  status[1] = TA_INIT;		// time adjust fsm
 800153a:	4b43      	ldr	r3, [pc, #268]	; (8001648 <main+0x148>)
 800153c:	2205      	movs	r2, #5
 800153e:	605a      	str	r2, [r3, #4]
  status[2] = AL_INIT;		// alarm fsm
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <main+0x148>)
 8001542:	220d      	movs	r2, #13
 8001544:	609a      	str	r2, [r3, #8]

  // alarm_on indicates whether an alarm is on -> initialize 0
  alarm_on = 0;
 8001546:	4b41      	ldr	r3, [pc, #260]	; (800164c <main+0x14c>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

  // Show MODE on the left corner of the lcd screen from the beginning til the end
  lcd_ShowStr(20, 20, "MODE", WHITE, RED, 24, 0);
 800154c:	2300      	movs	r3, #0
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2318      	movs	r3, #24
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	4a3c      	ldr	r2, [pc, #240]	; (8001650 <main+0x150>)
 8001560:	2114      	movs	r1, #20
 8001562:	2014      	movs	r0, #20
 8001564:	f7ff ff68 	bl	8001438 <lcd_ShowStr>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // call main_fsm
	  main_fsm();
 8001568:	f000 fb08 	bl	8001b7c <main_fsm>

	  // flag_timer[0] every 50 ms
	  while(!flag_timer[0]);
 800156c:	bf00      	nop
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <main+0x154>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0fb      	beq.n	800156e <main+0x6e>

	  // scan button
	  button_Scan();
 8001576:	f7ff f803 	bl	8000580 <button_Scan>

	  // read time from ds3231 ic to ds3231 variables
	  ds3231_ReadTime();
 800157a:	f7ff f8d3 	bl	8000724 <ds3231_ReadTime>

	  // reset flag_timer[0] to 0
	  flag_timer[0] = 0;
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <main+0x154>)
 8001580:	2200      	movs	r2, #0
 8001582:	801a      	strh	r2, [r3, #0]

	  // increase count_at
	  // count_at is a counter to keep track 10 times of flag_timer[0] -> Cycle: 50x10 = 500ms -> Frequency: f = 2Hz
	  // when count_at reaches 10 -> reset count_at and toggle the value of toggle_at
	  // toggle_at is used inside the main_fsm to hide or show the number of the time component adjusting 2 times/second
	  count_at = count_at + 1;
 8001584:	4b34      	ldr	r3, [pc, #208]	; (8001658 <main+0x158>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <main+0x158>)
 800158c:	6013      	str	r3, [r2, #0]
	  if(count_at == 1){		// 2Hz frequency toggle for adjust time
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <main+0x158>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d108      	bne.n	80015a8 <main+0xa8>
		  count_at = 0;
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <main+0x158>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
		  toggle_at = 1 - toggle_at;
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <main+0x15c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1c3 0301 	rsb	r3, r3, #1
 80015a4:	4a2d      	ldr	r2, [pc, #180]	; (800165c <main+0x15c>)
 80015a6:	6013      	str	r3, [r2, #0]
	  }

	  // when there is an alarm on (an alarm is set already)
	  // and flag_alarm is active (this means the real time reaches the setup alarm)
	  // => WARNING ANNOUNCEMENT SHOWN ON THE SCREEN
	  if(alarm_on == 1 && flag_alarm){
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <main+0x14c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d134      	bne.n	800161a <main+0x11a>
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <main+0x160>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d030      	beq.n	800161a <main+0x11a>
		  // count_al and toggle_al are similar to the above count_at and toggle_at
		  // these 2 control signals are used to create the toggling animation of the WARNING on the screen
		  if(count_al == 10){
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <main+0x164>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d109      	bne.n	80015d4 <main+0xd4>
			  count_al = 0;
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <main+0x164>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
			  toggle_al = 1 - toggle_al;
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <main+0x168>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1c3 0301 	rsb	r3, r3, #1
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <main+0x168>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e004      	b.n	80015de <main+0xde>
		  } else {
			  count_al = count_al + 1;
 80015d4:	4b23      	ldr	r3, [pc, #140]	; (8001664 <main+0x164>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a22      	ldr	r2, [pc, #136]	; (8001664 <main+0x164>)
 80015dc:	6013      	str	r3, [r2, #0]
		  }

		  // when toggle_al == 1 -> show the message
		  if(toggle_al == 1){
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <main+0x168>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d10d      	bne.n	8001602 <main+0x102>
			  lcd_ShowStr(20, 150, "TIME TO WAKE UP!!!", RED, BLACK, 24, 1);
 80015e6:	2301      	movs	r3, #1
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2318      	movs	r3, #24
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <main+0x16c>)
 80015f8:	2196      	movs	r1, #150	; 0x96
 80015fa:	2014      	movs	r0, #20
 80015fc:	f7ff ff1c 	bl	8001438 <lcd_ShowStr>
 8001600:	e00b      	b.n	800161a <main+0x11a>
		  } else {		// when toggle_al == 0 => hide the message
			  lcd_ShowStr(20, 150, "TIME TO WAKE UP!!!", BLACK, BLACK, 24, 1);
 8001602:	2301      	movs	r3, #1
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	2318      	movs	r3, #24
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2300      	movs	r3, #0
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	4a16      	ldr	r2, [pc, #88]	; (800166c <main+0x16c>)
 8001612:	2196      	movs	r1, #150	; 0x96
 8001614:	2014      	movs	r0, #20
 8001616:	f7ff ff0f 	bl	8001438 <lcd_ShowStr>
		  }
	  }

	  // if button "0" is pressed -> stop alarm
	  if(button_count[13] == 1){
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <main+0x170>)
 800161c:	8b5b      	ldrh	r3, [r3, #26]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d1a2      	bne.n	8001568 <main+0x68>
		  alarm_on = 0;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <main+0x14c>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
		  flag_alarm = 0;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <main+0x160>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
		  lcd_ShowStr(20, 150, "TIME TO WAKE UP!!!", BLACK, BLACK, 24, 1);
 800162e:	2301      	movs	r3, #1
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	2318      	movs	r3, #24
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2300      	movs	r3, #0
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <main+0x16c>)
 800163e:	2196      	movs	r1, #150	; 0x96
 8001640:	2014      	movs	r0, #20
 8001642:	f7ff fef9 	bl	8001438 <lcd_ShowStr>
	  main_fsm();
 8001646:	e78f      	b.n	8001568 <main+0x68>
 8001648:	200001c4 	.word	0x200001c4
 800164c:	2000017c 	.word	0x2000017c
 8001650:	08008940 	.word	0x08008940
 8001654:	20000098 	.word	0x20000098
 8001658:	2000018c 	.word	0x2000018c
 800165c:	200001ac 	.word	0x200001ac
 8001660:	200001b8 	.word	0x200001b8
 8001664:	200001bc 	.word	0x200001bc
 8001668:	2000008c 	.word	0x2000008c
 800166c:	08008948 	.word	0x08008948
 8001670:	200000d8 	.word	0x200000d8

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b094      	sub	sp, #80	; 0x50
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0320 	add.w	r3, r7, #32
 800167e:	2230      	movs	r2, #48	; 0x30
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fd1a 	bl	80080bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	4b28      	ldr	r3, [pc, #160]	; (8001740 <SystemClock_Config+0xcc>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <SystemClock_Config+0xcc>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <SystemClock_Config+0xcc>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <SystemClock_Config+0xd0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a21      	ldr	r2, [pc, #132]	; (8001744 <SystemClock_Config+0xd0>)
 80016be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <SystemClock_Config+0xd0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d0:	2302      	movs	r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d4:	2301      	movs	r3, #1
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d8:	2310      	movs	r3, #16
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016dc:	2302      	movs	r3, #2
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e0:	2300      	movs	r3, #0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e4:	2308      	movs	r3, #8
 80016e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e8:	23a8      	movs	r3, #168	; 0xa8
 80016ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ec:	2302      	movs	r3, #2
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016f0:	2304      	movs	r3, #4
 80016f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fe77 	bl	80053ec <HAL_RCC_OscConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001704:	f000 f8f4 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001708:	230f      	movs	r3, #15
 800170a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170c:	2302      	movs	r3, #2
 800170e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800171a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800171e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2105      	movs	r1, #5
 8001726:	4618      	mov	r0, r3
 8001728:	f004 f8d8 	bl	80058dc <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001732:	f000 f8dd 	bl	80018f0 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3750      	adds	r7, #80	; 0x50
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000

08001748 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2120      	movs	r1, #32
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <system_init+0x68>)
 8001752:	f002 fd43 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	4815      	ldr	r0, [pc, #84]	; (80017b0 <system_init+0x68>)
 800175c:	f002 fd3e 	bl	80041dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2110      	movs	r1, #16
 8001764:	4812      	ldr	r0, [pc, #72]	; (80017b0 <system_init+0x68>)
 8001766:	f002 fd39 	bl	80041dc <HAL_GPIO_WritePin>
	timer_init();
 800176a:	f001 fb75 	bl	8002e58 <timer_init>
	button_init();
 800176e:	f7fe fefb 	bl	8000568 <button_init>
	lcd_init();
 8001772:	f7ff fd01 	bl	8001178 <lcd_init>
	ds3231_init();
 8001776:	f7fe ff6f 	bl	8000658 <ds3231_init>
	uart_init_rs232();
 800177a:	f001 fd7b 	bl	8003274 <uart_init_rs232>
//	setTimer2(50);
	setTimer(50, 0);		// timer[0] -> 200 MHz frequency to scanbutton
 800177e:	2100      	movs	r1, #0
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f001 fb73 	bl	8002e6c <setTimer>
	setTimer(500, 1);		// timer[1] -> 2 Hz frequency toggle time in adjust time mode
 8001786:	2101      	movs	r1, #1
 8001788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800178c:	f001 fb6e 	bl	8002e6c <setTimer>
	setTimer(500, 2);		// timer[2] -> 2 Hz frequency for alarm animation
 8001790:	2102      	movs	r1, #2
 8001792:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001796:	f001 fb69 	bl	8002e6c <setTimer>
	setTimer(2000, 3);		// timer[3] -> display
 800179a:	2103      	movs	r1, #3
 800179c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017a0:	f001 fb64 	bl	8002e6c <setTimer>
	setTimer(200, 4);
 80017a4:	2104      	movs	r1, #4
 80017a6:	20c8      	movs	r0, #200	; 0xc8
 80017a8:	f001 fb60 	bl	8002e6c <setTimer>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <updateTime>:

void updateTime(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80017b8:	2118      	movs	r1, #24
 80017ba:	2006      	movs	r0, #6
 80017bc:	f7fe ff90 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80017c0:	210b      	movs	r1, #11
 80017c2:	2005      	movs	r0, #5
 80017c4:	f7fe ff8c 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 13);
 80017c8:	210d      	movs	r1, #13
 80017ca:	2004      	movs	r0, #4
 80017cc:	f7fe ff88 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 4);
 80017d0:	2104      	movs	r1, #4
 80017d2:	2003      	movs	r0, #3
 80017d4:	f7fe ff84 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 80017d8:	2109      	movs	r1, #9
 80017da:	2002      	movs	r0, #2
 80017dc:	f7fe ff80 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 45);
 80017e0:	212d      	movs	r1, #45	; 0x2d
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7fe ff7c 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 0);
 80017e8:	2100      	movs	r1, #0
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7fe ff78 	bl	80006e0 <ds3231_Write>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <displayTime>:
void displayTime(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80017fa:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <displayTime+0xe0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	2318      	movs	r3, #24
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2302      	movs	r3, #2
 8001810:	2164      	movs	r1, #100	; 0x64
 8001812:	2046      	movs	r0, #70	; 0x46
 8001814:	f7ff fbf4 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001818:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <displayTime+0xe4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	2318      	movs	r3, #24
 8001820:	9302      	str	r3, [sp, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2302      	movs	r3, #2
 800182e:	2164      	movs	r1, #100	; 0x64
 8001830:	206e      	movs	r0, #110	; 0x6e
 8001832:	f7ff fbe5 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <displayTime+0xe8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	2318      	movs	r3, #24
 800183e:	9302      	str	r3, [sp, #8]
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	2164      	movs	r1, #100	; 0x64
 800184e:	2096      	movs	r0, #150	; 0x96
 8001850:	f7ff fbd6 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <displayTime+0xec>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	2318      	movs	r3, #24
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	2300      	movs	r3, #0
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2302      	movs	r3, #2
 800186a:	2182      	movs	r1, #130	; 0x82
 800186c:	2014      	movs	r0, #20
 800186e:	f7ff fbc7 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001872:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <displayTime+0xf0>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2318      	movs	r3, #24
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2300      	movs	r3, #0
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2302      	movs	r3, #2
 8001888:	2182      	movs	r1, #130	; 0x82
 800188a:	2046      	movs	r0, #70	; 0x46
 800188c:	f7ff fbb8 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <displayTime+0xf4>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	2318      	movs	r3, #24
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2300      	movs	r3, #0
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2302      	movs	r3, #2
 80018a6:	2182      	movs	r1, #130	; 0x82
 80018a8:	206e      	movs	r0, #110	; 0x6e
 80018aa:	f7ff fba9 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <displayTime+0xf8>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	2318      	movs	r3, #24
 80018b6:	9302      	str	r3, [sp, #8]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2302      	movs	r3, #2
 80018c4:	2182      	movs	r1, #130	; 0x82
 80018c6:	2096      	movs	r0, #150	; 0x96
 80018c8:	f7ff fb9a 	bl	8001000 <lcd_ShowIntNum>
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000fd 	.word	0x200000fd
 80018d8:	200000fa 	.word	0x200000fa
 80018dc:	200000f8 	.word	0x200000f8
 80018e0:	200000fc 	.word	0x200000fc
 80018e4:	200000fb 	.word	0x200000fb
 80018e8:	200000fe 	.word	0x200000fe
 80018ec:	200000f9 	.word	0x200000f9

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <is_alarm>:
//#include "al_fsm.h"
#include "global.h"
#include <stdbool.h>

// check if the real time reaches the setup alarm
bool is_alarm(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	ds3231_ReadTime();
 8001900:	f7fe ff10 	bl	8000724 <ds3231_ReadTime>
	if(ds3231_sec==second[1] && ds3231_min==minute[1] && ds3231_hours==hour[1] && ds3231_day==day[1] && ds3231_date==date[1] && ds3231_month==month[1] && ds3231_year==year[1]) return true;
 8001904:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <is_alarm+0x74>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <is_alarm+0x78>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	d12b      	bne.n	800196a <is_alarm+0x6e>
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <is_alarm+0x7c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <is_alarm+0x80>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d124      	bne.n	800196a <is_alarm+0x6e>
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <is_alarm+0x84>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <is_alarm+0x88>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d11d      	bne.n	800196a <is_alarm+0x6e>
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <is_alarm+0x8c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <is_alarm+0x90>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	d116      	bne.n	800196a <is_alarm+0x6e>
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <is_alarm+0x94>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <is_alarm+0x98>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d10f      	bne.n	800196a <is_alarm+0x6e>
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <is_alarm+0x9c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <is_alarm+0xa0>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	d108      	bne.n	800196a <is_alarm+0x6e>
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <is_alarm+0xa4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <is_alarm+0xa8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	d101      	bne.n	800196a <is_alarm+0x6e>
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <is_alarm+0x70>
	return false;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200000f8 	.word	0x200000f8
 8001974:	2000016c 	.word	0x2000016c
 8001978:	200000fa 	.word	0x200000fa
 800197c:	20000174 	.word	0x20000174
 8001980:	200000fd 	.word	0x200000fd
 8001984:	20000180 	.word	0x20000180
 8001988:	200000fc 	.word	0x200000fc
 800198c:	200001a0 	.word	0x200001a0
 8001990:	200000fb 	.word	0x200000fb
 8001994:	200001b0 	.word	0x200001b0
 8001998:	200000fe 	.word	0x200000fe
 800199c:	20000164 	.word	0x20000164
 80019a0:	200000f9 	.word	0x200000f9
 80019a4:	20000194 	.word	0x20000194

080019a8 <display_ta_al>:

// display time (the displayTime function declared in main.c file is used to display ds3231 variables updated continuously
void display_ta_al(int hour, int min, int sec, int day, int date, int month, int year){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af04      	add	r7, sp, #16
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	lcd_ShowIntNum(70, 100, hour, 2, GREEN, BLACK, 24);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	2318      	movs	r3, #24
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	2300      	movs	r3, #0
 80019c0:	9301      	str	r3, [sp, #4]
 80019c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2302      	movs	r3, #2
 80019ca:	2164      	movs	r1, #100	; 0x64
 80019cc:	2046      	movs	r0, #70	; 0x46
 80019ce:	f7ff fb17 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, min, 2, GREEN, BLACK, 24);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	2318      	movs	r3, #24
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	2300      	movs	r3, #0
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2302      	movs	r3, #2
 80019e6:	2164      	movs	r1, #100	; 0x64
 80019e8:	206e      	movs	r0, #110	; 0x6e
 80019ea:	f7ff fb09 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, sec, 2, GREEN, BLACK, 24);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	2318      	movs	r3, #24
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2302      	movs	r3, #2
 8001a02:	2164      	movs	r1, #100	; 0x64
 8001a04:	2096      	movs	r0, #150	; 0x96
 8001a06:	f7ff fafb 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, day, 2, YELLOW, BLACK, 24);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	2318      	movs	r3, #24
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	2182      	movs	r1, #130	; 0x82
 8001a20:	2014      	movs	r0, #20
 8001a22:	f7ff faed 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, date, 2, YELLOW, BLACK, 24);
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2318      	movs	r3, #24
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	2182      	movs	r1, #130	; 0x82
 8001a3c:	2046      	movs	r0, #70	; 0x46
 8001a3e:	f7ff fadf 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, month, 2, YELLOW, BLACK, 24);
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	2318      	movs	r3, #24
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2302      	movs	r3, #2
 8001a56:	2182      	movs	r1, #130	; 0x82
 8001a58:	206e      	movs	r0, #110	; 0x6e
 8001a5a:	f7ff fad1 	bl	8001000 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, year, 2, YELLOW, BLACK, 24);
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	2318      	movs	r3, #24
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2302      	movs	r3, #2
 8001a72:	2182      	movs	r1, #130	; 0x82
 8001a74:	2096      	movs	r0, #150	; 0x96
 8001a76:	f7ff fac3 	bl	8001000 <lcd_ShowIntNum>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <clear_header>:

// clear the string showing the current status of the system
void clear_header(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af04      	add	r7, sp, #16
	lcd_ShowStr(20, 50, "ABCDEFGHIJKLMNO1ADSD2", BLACK, BLACK, 24, 0);
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	2318      	movs	r3, #24
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <clear_header+0x24>)
 8001a9a:	2132      	movs	r1, #50	; 0x32
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f7ff fccb 	bl	8001438 <lcd_ShowStr>
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0800895c 	.word	0x0800895c

08001aac <updateTime_ta_al>:

// update time to ds3231 variables, the updateTime used in the main.c file is used only 1 time at the beginning, used to set initial value for ds3231 variables
void updateTime_ta_al(int hour, int min, int sec, int day, int date, int month, int year){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR, year);
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2006      	movs	r0, #6
 8001ac2:	f7fe fe0d 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, month);
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	4619      	mov	r1, r3
 8001acc:	2005      	movs	r0, #5
 8001ace:	f7fe fe07 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, date);
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f7fe fe01 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, day);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f7fe fdfb 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, hour);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	4619      	mov	r1, r3
 8001af0:	2002      	movs	r0, #2
 8001af2:	f7fe fdf5 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, min);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7fe fdef 	bl	80006e0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, sec);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	4619      	mov	r1, r3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7fe fde9 	bl	80006e0 <ds3231_Write>
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <leap_year>:

bool leap_year(int year){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	if(year%100 == 0){
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <leap_year+0x60>)
 8001b24:	fb83 1302 	smull	r1, r3, r3, r2
 8001b28:	1159      	asrs	r1, r3, #5
 8001b2a:	17d3      	asrs	r3, r2, #31
 8001b2c:	1acb      	subs	r3, r1, r3
 8001b2e:	2164      	movs	r1, #100	; 0x64
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <leap_year+0x42>
		if(year%400 == 0) return true;
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <leap_year+0x60>)
 8001b3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b42:	11d9      	asrs	r1, r3, #7
 8001b44:	17d3      	asrs	r3, r2, #31
 8001b46:	1acb      	subs	r3, r1, r3
 8001b48:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <leap_year+0x50>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e007      	b.n	8001b6a <leap_year+0x52>
	} else {
		if(year%4 == 0) return true;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <leap_year+0x50>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <leap_year+0x52>
	}
	return false;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	51eb851f 	.word	0x51eb851f

08001b7c <main_fsm>:

//int toggle_at;
void main_fsm(){
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af04      	add	r7, sp, #16
	if(is_alarm()) flag_alarm = 1;
 8001b82:	f7ff febb 	bl	80018fc <is_alarm>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <main_fsm+0x16>
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	; (8001e00 <main_fsm+0x284>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

	switch (status[0]){
 8001b92:	4b9c      	ldr	r3, [pc, #624]	; (8001e04 <main_fsm+0x288>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b14      	cmp	r3, #20
 8001b9a:	f201 8144 	bhi.w	8002e26 <main_fsm+0x12aa>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <main_fsm+0x28>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bf9 	.word	0x08001bf9
 8001ba8:	08001c0f 	.word	0x08001c0f
 8001bac:	08001cc5 	.word	0x08001cc5
 8001bb0:	08002529 	.word	0x08002529
 8001bb4:	08002e27 	.word	0x08002e27
 8001bb8:	08002e27 	.word	0x08002e27
 8001bbc:	08002e27 	.word	0x08002e27
 8001bc0:	08002e27 	.word	0x08002e27
 8001bc4:	08002e27 	.word	0x08002e27
 8001bc8:	08002e27 	.word	0x08002e27
 8001bcc:	08002e27 	.word	0x08002e27
 8001bd0:	08002e27 	.word	0x08002e27
 8001bd4:	08002e27 	.word	0x08002e27
 8001bd8:	08002e27 	.word	0x08002e27
 8001bdc:	08002e27 	.word	0x08002e27
 8001be0:	08002e27 	.word	0x08002e27
 8001be4:	08002e27 	.word	0x08002e27
 8001be8:	08002e27 	.word	0x08002e27
 8001bec:	08002e27 	.word	0x08002e27
 8001bf0:	08002e27 	.word	0x08002e27
 8001bf4:	08002db1 	.word	0x08002db1
	case INIT:
		status[0] = TIME_DISPLAY;
 8001bf8:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <main_fsm+0x288>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
		alarm_on = 0;
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <main_fsm+0x28c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
		toggle_at = 0;
 8001c04:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <main_fsm+0x290>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
		break;
 8001c0a:	f001 b90d 	b.w	8002e28 <main_fsm+0x12ac>

	case TIME_DISPLAY:
		// display mode TIME DISPLAY to lcd screen
		lcd_ShowStr(20, 50, "TIME DISPLAY", RED, BLUE, 24, 1);
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2318      	movs	r3, #24
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	231f      	movs	r3, #31
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c1e:	4a7c      	ldr	r2, [pc, #496]	; (8001e10 <main_fsm+0x294>)
 8001c20:	2132      	movs	r1, #50	; 0x32
 8001c22:	2014      	movs	r0, #20
 8001c24:	f7ff fc08 	bl	8001438 <lcd_ShowStr>

		if(button_count[11] == 1){			// if change to next state (button ">")
 8001c28:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <main_fsm+0x298>)
 8001c2a:	8adb      	ldrh	r3, [r3, #22]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d142      	bne.n	8001cb6 <main_fsm+0x13a>
			toggle_at = 0;
 8001c30:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <main_fsm+0x290>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

			// change state
			status[0] = TIME_ADJUST;
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <main_fsm+0x288>)
 8001c38:	2203      	movs	r2, #3
 8001c3a:	601a      	str	r2, [r3, #0]

			// before changing state, store valur of the current time to temp variables used for 2 next states
			hour_temp = ds3231_hours;
 8001c3c:	4b76      	ldr	r3, [pc, #472]	; (8001e18 <main_fsm+0x29c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <main_fsm+0x2a0>)
 8001c44:	601a      	str	r2, [r3, #0]
			minute_temp = ds3231_min;
 8001c46:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <main_fsm+0x2a4>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <main_fsm+0x2a8>)
 8001c4e:	601a      	str	r2, [r3, #0]
			second_temp = ds3231_sec;
 8001c50:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <main_fsm+0x2ac>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <main_fsm+0x2b0>)
 8001c58:	601a      	str	r2, [r3, #0]
			day_temp = ds3231_day;
 8001c5a:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <main_fsm+0x2b4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b74      	ldr	r3, [pc, #464]	; (8001e34 <main_fsm+0x2b8>)
 8001c62:	601a      	str	r2, [r3, #0]
			date_temp = ds3231_date;
 8001c64:	4b74      	ldr	r3, [pc, #464]	; (8001e38 <main_fsm+0x2bc>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <main_fsm+0x2c0>)
 8001c6c:	601a      	str	r2, [r3, #0]
			month_temp = ds3231_month;
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <main_fsm+0x2c4>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <main_fsm+0x2c8>)
 8001c76:	601a      	str	r2, [r3, #0]
			year_temp = ds3231_year;
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <main_fsm+0x2cc>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <main_fsm+0x2d0>)
 8001c80:	601a      	str	r2, [r3, #0]
			display_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
 8001c82:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <main_fsm+0x2a0>)
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <main_fsm+0x2a8>)
 8001c88:	681c      	ldr	r4, [r3, #0]
 8001c8a:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <main_fsm+0x2b0>)
 8001c8c:	681d      	ldr	r5, [r3, #0]
 8001c8e:	4b69      	ldr	r3, [pc, #420]	; (8001e34 <main_fsm+0x2b8>)
 8001c90:	681e      	ldr	r6, [r3, #0]
 8001c92:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <main_fsm+0x2c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a6b      	ldr	r2, [pc, #428]	; (8001e44 <main_fsm+0x2c8>)
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	496c      	ldr	r1, [pc, #432]	; (8001e4c <main_fsm+0x2d0>)
 8001c9c:	6809      	ldr	r1, [r1, #0]
 8001c9e:	9102      	str	r1, [sp, #8]
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4633      	mov	r3, r6
 8001ca6:	462a      	mov	r2, r5
 8001ca8:	4621      	mov	r1, r4
 8001caa:	f7ff fe7d 	bl	80019a8 <display_ta_al>

			// clear string status TIME DISPLAY
			clear_header();
 8001cae:	f7ff fee9 	bl	8001a84 <clear_header>
		} else {							// if stay -> display time
			status[0] = TIME_DISPLAY;
			displayTime();
//			status[1] = TA_DAY;
		}
		break;
 8001cb2:	f001 b8b9 	b.w	8002e28 <main_fsm+0x12ac>
			status[0] = TIME_DISPLAY;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <main_fsm+0x288>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	601a      	str	r2, [r3, #0]
			displayTime();
 8001cbc:	f7ff fd9a 	bl	80017f4 <displayTime>
		break;
 8001cc0:	f001 b8b2 	b.w	8002e28 <main_fsm+0x12ac>

	case TIME_ADJUST:
		if(button_count[11] == 1){				// if change to alarm state -> not update time, reset state of adjust time to TA_INIT
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <main_fsm+0x298>)
 8001cc6:	8adb      	ldrh	r3, [r3, #22]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d11f      	bne.n	8001d0c <main_fsm+0x190>
			status[0] = ALARM;
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <main_fsm+0x288>)
 8001cce:	2204      	movs	r2, #4
 8001cd0:	601a      	str	r2, [r3, #0]
			status[1] = TA_INIT;
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <main_fsm+0x288>)
 8001cd4:	2205      	movs	r2, #5
 8001cd6:	605a      	str	r2, [r3, #4]
			display_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
 8001cd8:	4b50      	ldr	r3, [pc, #320]	; (8001e1c <main_fsm+0x2a0>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <main_fsm+0x2a8>)
 8001cde:	681c      	ldr	r4, [r3, #0]
 8001ce0:	4b52      	ldr	r3, [pc, #328]	; (8001e2c <main_fsm+0x2b0>)
 8001ce2:	681d      	ldr	r5, [r3, #0]
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <main_fsm+0x2b8>)
 8001ce6:	681e      	ldr	r6, [r3, #0]
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <main_fsm+0x2c0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a55      	ldr	r2, [pc, #340]	; (8001e44 <main_fsm+0x2c8>)
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	4956      	ldr	r1, [pc, #344]	; (8001e4c <main_fsm+0x2d0>)
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	9102      	str	r1, [sp, #8]
 8001cf6:	9201      	str	r2, [sp, #4]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	4633      	mov	r3, r6
 8001cfc:	462a      	mov	r2, r5
 8001cfe:	4621      	mov	r1, r4
 8001d00:	f7ff fe52 	bl	80019a8 <display_ta_al>
//			updateTime_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
			clear_header();
 8001d04:	f7ff febe 	bl	8001a84 <clear_header>

				default:
					break;
			}
		}
		break;
 8001d08:	f001 b88e 	b.w	8002e28 <main_fsm+0x12ac>
			switch(status[1]){
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <main_fsm+0x288>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	3b05      	subs	r3, #5
 8001d12:	2b07      	cmp	r3, #7
 8001d14:	f200 8405 	bhi.w	8002522 <main_fsm+0x9a6>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <main_fsm+0x1a4>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d41 	.word	0x08001d41
 8001d24:	08001d59 	.word	0x08001d59
 8001d28:	08001ead 	.word	0x08001ead
 8001d2c:	08002017 	.word	0x08002017
 8001d30:	08002129 	.word	0x08002129
 8001d34:	08002205 	.word	0x08002205
 8001d38:	080022ef 	.word	0x080022ef
 8001d3c:	08002407 	.word	0x08002407
					if(status[0] == TIME_ADJUST){	// if status of main fsm change to TIME_ADJUST -> change to TA_DAY state
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <main_fsm+0x288>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d103      	bne.n	8001d50 <main_fsm+0x1d4>
						status[1] = TA_DAY;
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <main_fsm+0x288>)
 8001d4a:	2206      	movs	r2, #6
 8001d4c:	605a      	str	r2, [r3, #4]
					break;
 8001d4e:	e3e9      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_INIT;
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <main_fsm+0x288>)
 8001d52:	2205      	movs	r2, #5
 8001d54:	605a      	str	r2, [r3, #4]
					break;
 8001d56:	e3e5      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - DAY", RED, BLUE, 24, 1);
 8001d58:	2301      	movs	r3, #1
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	2318      	movs	r3, #24
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	231f      	movs	r3, #31
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d68:	4a39      	ldr	r2, [pc, #228]	; (8001e50 <main_fsm+0x2d4>)
 8001d6a:	2132      	movs	r1, #50	; 0x32
 8001d6c:	2014      	movs	r0, #20
 8001d6e:	f7ff fb63 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <main_fsm+0x298>)
 8001d74:	8a1b      	ldrh	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d114      	bne.n	8001da4 <main_fsm+0x228>
						status[1] = TA_DATE;
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <main_fsm+0x288>)
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(20, 130, day_temp, 2, YELLOW, BLACK, 24);
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <main_fsm+0x2b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	2318      	movs	r3, #24
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2302      	movs	r3, #2
 8001d96:	2182      	movs	r1, #130	; 0x82
 8001d98:	2014      	movs	r0, #20
 8001d9a:	f7ff f931 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8001d9e:	f7ff fe71 	bl	8001a84 <clear_header>
					break;
 8001da2:	e3bf      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_DAY;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <main_fsm+0x288>)
 8001da6:	2206      	movs	r2, #6
 8001da8:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <main_fsm+0x298>)
 8001dac:	88db      	ldrh	r3, [r3, #6]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <main_fsm+0x242>
							day_temp = day_temp + 1;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <main_fsm+0x2b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <main_fsm+0x2b8>)
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e017      	b.n	8001dee <main_fsm+0x272>
						} else if(button_count[3] == 40){	// if press and hold
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <main_fsm+0x298>)
 8001dc0:	88db      	ldrh	r3, [r3, #6]
 8001dc2:	2b28      	cmp	r3, #40	; 0x28
 8001dc4:	d103      	bne.n	8001dce <main_fsm+0x252>
							flag_timer[4] = 0;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <main_fsm+0x2d8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	811a      	strh	r2, [r3, #8]
 8001dcc:	e00f      	b.n	8001dee <main_fsm+0x272>
						} else if(button_count[3] > 40){
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <main_fsm+0x298>)
 8001dd0:	88db      	ldrh	r3, [r3, #6]
 8001dd2:	2b28      	cmp	r3, #40	; 0x28
 8001dd4:	d90b      	bls.n	8001dee <main_fsm+0x272>
							if(flag_timer[4] == 1){
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <main_fsm+0x2d8>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d107      	bne.n	8001dee <main_fsm+0x272>
								flag_timer[4] = 0;
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <main_fsm+0x2d8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	811a      	strh	r2, [r3, #8]
								day_temp = day_temp + 1;
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <main_fsm+0x2b8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <main_fsm+0x2b8>)
 8001dec:	6013      	str	r3, [r2, #0]
						if(day_temp >= 8) day_temp = 1;
 8001dee:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <main_fsm+0x2b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b07      	cmp	r3, #7
 8001df4:	dd30      	ble.n	8001e58 <main_fsm+0x2dc>
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <main_fsm+0x2b8>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e033      	b.n	8001e66 <main_fsm+0x2ea>
 8001dfe:	bf00      	nop
 8001e00:	200001b8 	.word	0x200001b8
 8001e04:	200001c4 	.word	0x200001c4
 8001e08:	2000017c 	.word	0x2000017c
 8001e0c:	200001ac 	.word	0x200001ac
 8001e10:	08008974 	.word	0x08008974
 8001e14:	200000d8 	.word	0x200000d8
 8001e18:	200000fd 	.word	0x200000fd
 8001e1c:	20000190 	.word	0x20000190
 8001e20:	200000fa 	.word	0x200000fa
 8001e24:	2000019c 	.word	0x2000019c
 8001e28:	200000f8 	.word	0x200000f8
 8001e2c:	20000158 	.word	0x20000158
 8001e30:	200000fc 	.word	0x200000fc
 8001e34:	20000188 	.word	0x20000188
 8001e38:	200000fb 	.word	0x200000fb
 8001e3c:	200001a8 	.word	0x200001a8
 8001e40:	200000fe 	.word	0x200000fe
 8001e44:	20000160 	.word	0x20000160
 8001e48:	200000f9 	.word	0x200000f9
 8001e4c:	2000015c 	.word	0x2000015c
 8001e50:	08008984 	.word	0x08008984
 8001e54:	20000098 	.word	0x20000098
						else if(day_temp <= 0) day_temp = 1;
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <main_fsm+0x510>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dc02      	bgt.n	8001e66 <main_fsm+0x2ea>
 8001e60:	4b8a      	ldr	r3, [pc, #552]	; (800208c <main_fsm+0x510>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 8001e66:	4b8a      	ldr	r3, [pc, #552]	; (8002090 <main_fsm+0x514>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d10f      	bne.n	8001e8e <main_fsm+0x312>
							lcd_ShowIntNum(20, 130, day_temp, 2, YELLOW, BLACK, 24);
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <main_fsm+0x510>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2318      	movs	r3, #24
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2302      	movs	r3, #2
 8001e84:	2182      	movs	r1, #130	; 0x82
 8001e86:	2014      	movs	r0, #20
 8001e88:	f7ff f8ba 	bl	8001000 <lcd_ShowIntNum>
					break;
 8001e8c:	e34a      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(20, 130, day_temp, 2, BLACK, BLACK, 24);
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <main_fsm+0x510>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	2318      	movs	r3, #24
 8001e96:	9302      	str	r3, [sp, #8]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	2182      	movs	r1, #130	; 0x82
 8001ea4:	2014      	movs	r0, #20
 8001ea6:	f7ff f8ab 	bl	8001000 <lcd_ShowIntNum>
					break;
 8001eaa:	e33b      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - DATE", RED, BLUE, 24, 1);
 8001eac:	2301      	movs	r3, #1
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2318      	movs	r3, #24
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	231f      	movs	r3, #31
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ebc:	4a75      	ldr	r2, [pc, #468]	; (8002094 <main_fsm+0x518>)
 8001ebe:	2132      	movs	r1, #50	; 0x32
 8001ec0:	2014      	movs	r0, #20
 8001ec2:	f7ff fab9 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <main_fsm+0x51c>)
 8001ec8:	8a1b      	ldrh	r3, [r3, #16]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d114      	bne.n	8001ef8 <main_fsm+0x37c>
						status[1] = TA_MONTH;
 8001ece:	4b73      	ldr	r3, [pc, #460]	; (800209c <main_fsm+0x520>)
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(70, 130, date_temp, 2, YELLOW, BLACK, 24);
 8001ed4:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <main_fsm+0x524>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	2318      	movs	r3, #24
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	2182      	movs	r1, #130	; 0x82
 8001eec:	2046      	movs	r0, #70	; 0x46
 8001eee:	f7ff f887 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8001ef2:	f7ff fdc7 	bl	8001a84 <clear_header>
					break;
 8001ef6:	e315      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_DATE;
 8001ef8:	4b68      	ldr	r3, [pc, #416]	; (800209c <main_fsm+0x520>)
 8001efa:	2207      	movs	r2, #7
 8001efc:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of date_temp
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <main_fsm+0x51c>)
 8001f00:	88db      	ldrh	r3, [r3, #6]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <main_fsm+0x396>
							date_temp = date_temp + 1;
 8001f06:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <main_fsm+0x524>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	4a64      	ldr	r2, [pc, #400]	; (80020a0 <main_fsm+0x524>)
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e017      	b.n	8001f42 <main_fsm+0x3c6>
						} else if(button_count[3] == 40){	// if press and hold
 8001f12:	4b61      	ldr	r3, [pc, #388]	; (8002098 <main_fsm+0x51c>)
 8001f14:	88db      	ldrh	r3, [r3, #6]
 8001f16:	2b28      	cmp	r3, #40	; 0x28
 8001f18:	d103      	bne.n	8001f22 <main_fsm+0x3a6>
							flag_timer[4] = 0;
 8001f1a:	4b62      	ldr	r3, [pc, #392]	; (80020a4 <main_fsm+0x528>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	811a      	strh	r2, [r3, #8]
 8001f20:	e00f      	b.n	8001f42 <main_fsm+0x3c6>
						} else if(button_count[3] > 40){
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <main_fsm+0x51c>)
 8001f24:	88db      	ldrh	r3, [r3, #6]
 8001f26:	2b28      	cmp	r3, #40	; 0x28
 8001f28:	d90b      	bls.n	8001f42 <main_fsm+0x3c6>
							if(flag_timer[4] == 1){
 8001f2a:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <main_fsm+0x528>)
 8001f2c:	891b      	ldrh	r3, [r3, #8]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <main_fsm+0x3c6>
								flag_timer[4] = 0;
 8001f32:	4b5c      	ldr	r3, [pc, #368]	; (80020a4 <main_fsm+0x528>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	811a      	strh	r2, [r3, #8]
								date_temp = date_temp + 1;
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <main_fsm+0x524>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <main_fsm+0x524>)
 8001f40:	6013      	str	r3, [r2, #0]
						if(month_temp==1 || month_temp==3 || month_temp==5 || month_temp==7 || month_temp==8 || month_temp==10 || month_temp==12){
 8001f42:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <main_fsm+0x52c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d017      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <main_fsm+0x52c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d013      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f52:	4b55      	ldr	r3, [pc, #340]	; (80020a8 <main_fsm+0x52c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d00f      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f5a:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <main_fsm+0x52c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b07      	cmp	r3, #7
 8001f60:	d00b      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <main_fsm+0x52c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d007      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f6a:	4b4f      	ldr	r3, [pc, #316]	; (80020a8 <main_fsm+0x52c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b0a      	cmp	r3, #10
 8001f70:	d003      	beq.n	8001f7a <main_fsm+0x3fe>
 8001f72:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <main_fsm+0x52c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b0c      	cmp	r3, #12
 8001f78:	d107      	bne.n	8001f8a <main_fsm+0x40e>
							if(date_temp>=32){
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <main_fsm+0x524>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b1f      	cmp	r3, #31
 8001f80:	dd26      	ble.n	8001fd0 <main_fsm+0x454>
								date_temp = 1;
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <main_fsm+0x524>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
							if(date_temp>=32){
 8001f88:	e022      	b.n	8001fd0 <main_fsm+0x454>
						} else if(month_temp == 2){		// if month 2
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <main_fsm+0x52c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d117      	bne.n	8001fc2 <main_fsm+0x446>
							if(leap_year(year_temp)){	// check leap year
 8001f92:	4b46      	ldr	r3, [pc, #280]	; (80020ac <main_fsm+0x530>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fdbe 	bl	8001b18 <leap_year>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <main_fsm+0x436>
								if(date_temp >= 30) date_temp = 1;	// if leap year -> 29 days maximum
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <main_fsm+0x524>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b1d      	cmp	r3, #29
 8001fa8:	dd12      	ble.n	8001fd0 <main_fsm+0x454>
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <main_fsm+0x524>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	e00e      	b.n	8001fd0 <main_fsm+0x454>
								if(date_temp >= 29) date_temp = 1;
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <main_fsm+0x524>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b1c      	cmp	r3, #28
 8001fb8:	dd0a      	ble.n	8001fd0 <main_fsm+0x454>
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <main_fsm+0x524>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e006      	b.n	8001fd0 <main_fsm+0x454>
							if(date_temp >= 31) date_temp = 1;
 8001fc2:	4b37      	ldr	r3, [pc, #220]	; (80020a0 <main_fsm+0x524>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b1e      	cmp	r3, #30
 8001fc8:	dd02      	ble.n	8001fd0 <main_fsm+0x454>
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <main_fsm+0x524>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <main_fsm+0x514>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10f      	bne.n	8001ff8 <main_fsm+0x47c>
							lcd_ShowIntNum(70, 130, date_temp, 2, YELLOW, BLACK, 24);
 8001fd8:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <main_fsm+0x524>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	2318      	movs	r3, #24
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2302      	movs	r3, #2
 8001fee:	2182      	movs	r1, #130	; 0x82
 8001ff0:	2046      	movs	r0, #70	; 0x46
 8001ff2:	f7ff f805 	bl	8001000 <lcd_ShowIntNum>
					break;
 8001ff6:	e295      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(70, 130, date_temp, 2, BLACK, BLACK, 24);
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <main_fsm+0x524>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	2318      	movs	r3, #24
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	2300      	movs	r3, #0
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2300      	movs	r3, #0
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2302      	movs	r3, #2
 800200c:	2182      	movs	r1, #130	; 0x82
 800200e:	2046      	movs	r0, #70	; 0x46
 8002010:	f7fe fff6 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002014:	e286      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - MON", RED, BLUE, 24, 1);
 8002016:	2301      	movs	r3, #1
 8002018:	9302      	str	r3, [sp, #8]
 800201a:	2318      	movs	r3, #24
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	231f      	movs	r3, #31
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <main_fsm+0x534>)
 8002028:	2132      	movs	r1, #50	; 0x32
 800202a:	2014      	movs	r0, #20
 800202c:	f7ff fa04 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <main_fsm+0x51c>)
 8002032:	8a1b      	ldrh	r3, [r3, #16]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d114      	bne.n	8002062 <main_fsm+0x4e6>
						status[1] = TA_YEAR;
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <main_fsm+0x520>)
 800203a:	2209      	movs	r2, #9
 800203c:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(110, 130, month_temp, 2, YELLOW, BLACK, 24);
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <main_fsm+0x52c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2318      	movs	r3, #24
 8002046:	9302      	str	r3, [sp, #8]
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2302      	movs	r3, #2
 8002054:	2182      	movs	r1, #130	; 0x82
 8002056:	206e      	movs	r0, #110	; 0x6e
 8002058:	f7fe ffd2 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800205c:	f7ff fd12 	bl	8001a84 <clear_header>
					break;
 8002060:	e260      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_MONTH;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <main_fsm+0x520>)
 8002064:	2208      	movs	r2, #8
 8002066:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of month_temp
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <main_fsm+0x51c>)
 800206a:	88db      	ldrh	r3, [r3, #6]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d105      	bne.n	800207c <main_fsm+0x500>
							month_temp = month_temp + 1;
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <main_fsm+0x52c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a0c      	ldr	r2, [pc, #48]	; (80020a8 <main_fsm+0x52c>)
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e02b      	b.n	80020d4 <main_fsm+0x558>
						} else if(button_count[3] == 40){	// if press and hold
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <main_fsm+0x51c>)
 800207e:	88db      	ldrh	r3, [r3, #6]
 8002080:	2b28      	cmp	r3, #40	; 0x28
 8002082:	d117      	bne.n	80020b4 <main_fsm+0x538>
							flag_timer[4] = 0;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <main_fsm+0x528>)
 8002086:	2200      	movs	r2, #0
 8002088:	811a      	strh	r2, [r3, #8]
 800208a:	e023      	b.n	80020d4 <main_fsm+0x558>
 800208c:	20000188 	.word	0x20000188
 8002090:	200001ac 	.word	0x200001ac
 8002094:	08008998 	.word	0x08008998
 8002098:	200000d8 	.word	0x200000d8
 800209c:	200001c4 	.word	0x200001c4
 80020a0:	200001a8 	.word	0x200001a8
 80020a4:	20000098 	.word	0x20000098
 80020a8:	20000160 	.word	0x20000160
 80020ac:	2000015c 	.word	0x2000015c
 80020b0:	080089ac 	.word	0x080089ac
						} else if(button_count[3] > 40){
 80020b4:	4ba1      	ldr	r3, [pc, #644]	; (800233c <main_fsm+0x7c0>)
 80020b6:	88db      	ldrh	r3, [r3, #6]
 80020b8:	2b28      	cmp	r3, #40	; 0x28
 80020ba:	d90b      	bls.n	80020d4 <main_fsm+0x558>
							if(flag_timer[4] == 1){
 80020bc:	4ba0      	ldr	r3, [pc, #640]	; (8002340 <main_fsm+0x7c4>)
 80020be:	891b      	ldrh	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <main_fsm+0x558>
								flag_timer[4] = 0;
 80020c4:	4b9e      	ldr	r3, [pc, #632]	; (8002340 <main_fsm+0x7c4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	811a      	strh	r2, [r3, #8]
								month_temp = month_temp + 1;
 80020ca:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <main_fsm+0x7c8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a9c      	ldr	r2, [pc, #624]	; (8002344 <main_fsm+0x7c8>)
 80020d2:	6013      	str	r3, [r2, #0]
						if(month_temp >= 13) month_temp = 1;
 80020d4:	4b9b      	ldr	r3, [pc, #620]	; (8002344 <main_fsm+0x7c8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b0c      	cmp	r3, #12
 80020da:	dd02      	ble.n	80020e2 <main_fsm+0x566>
 80020dc:	4b99      	ldr	r3, [pc, #612]	; (8002344 <main_fsm+0x7c8>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 80020e2:	4b99      	ldr	r3, [pc, #612]	; (8002348 <main_fsm+0x7cc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10f      	bne.n	800210a <main_fsm+0x58e>
							lcd_ShowIntNum(110, 130, month_temp, 2, YELLOW, BLACK, 24);
 80020ea:	4b96      	ldr	r3, [pc, #600]	; (8002344 <main_fsm+0x7c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2318      	movs	r3, #24
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	2182      	movs	r1, #130	; 0x82
 8002102:	206e      	movs	r0, #110	; 0x6e
 8002104:	f7fe ff7c 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002108:	e20c      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(110, 130, month_temp, 2, BLACK, BLACK, 24);
 800210a:	4b8e      	ldr	r3, [pc, #568]	; (8002344 <main_fsm+0x7c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	2318      	movs	r3, #24
 8002112:	9302      	str	r3, [sp, #8]
 8002114:	2300      	movs	r3, #0
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2300      	movs	r3, #0
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2302      	movs	r3, #2
 800211e:	2182      	movs	r1, #130	; 0x82
 8002120:	206e      	movs	r0, #110	; 0x6e
 8002122:	f7fe ff6d 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002126:	e1fd      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - YEAR", RED, BLUE, 24, 1);
 8002128:	2301      	movs	r3, #1
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	2318      	movs	r3, #24
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	231f      	movs	r3, #31
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002138:	4a84      	ldr	r2, [pc, #528]	; (800234c <main_fsm+0x7d0>)
 800213a:	2132      	movs	r1, #50	; 0x32
 800213c:	2014      	movs	r0, #20
 800213e:	f7ff f97b 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8002142:	4b7e      	ldr	r3, [pc, #504]	; (800233c <main_fsm+0x7c0>)
 8002144:	8a1b      	ldrh	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d114      	bne.n	8002174 <main_fsm+0x5f8>
						status[1] = TA_HOUR;
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <main_fsm+0x7d4>)
 800214c:	220a      	movs	r2, #10
 800214e:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(150, 130, year_temp, 2, YELLOW, BLACK, 24);
 8002150:	4b80      	ldr	r3, [pc, #512]	; (8002354 <main_fsm+0x7d8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b29a      	uxth	r2, r3
 8002156:	2318      	movs	r3, #24
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2300      	movs	r3, #0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2302      	movs	r3, #2
 8002166:	2182      	movs	r1, #130	; 0x82
 8002168:	2096      	movs	r0, #150	; 0x96
 800216a:	f7fe ff49 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800216e:	f7ff fc89 	bl	8001a84 <clear_header>
					break;
 8002172:	e1d7      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_YEAR;
 8002174:	4b76      	ldr	r3, [pc, #472]	; (8002350 <main_fsm+0x7d4>)
 8002176:	2209      	movs	r2, #9
 8002178:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 800217a:	4b70      	ldr	r3, [pc, #448]	; (800233c <main_fsm+0x7c0>)
 800217c:	88db      	ldrh	r3, [r3, #6]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <main_fsm+0x612>
							year_temp = year_temp + 1;
 8002182:	4b74      	ldr	r3, [pc, #464]	; (8002354 <main_fsm+0x7d8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3301      	adds	r3, #1
 8002188:	4a72      	ldr	r2, [pc, #456]	; (8002354 <main_fsm+0x7d8>)
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e017      	b.n	80021be <main_fsm+0x642>
						} else if(button_count[3] == 40){	// if press and hold
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <main_fsm+0x7c0>)
 8002190:	88db      	ldrh	r3, [r3, #6]
 8002192:	2b28      	cmp	r3, #40	; 0x28
 8002194:	d103      	bne.n	800219e <main_fsm+0x622>
							flag_timer[4] = 0;
 8002196:	4b6a      	ldr	r3, [pc, #424]	; (8002340 <main_fsm+0x7c4>)
 8002198:	2200      	movs	r2, #0
 800219a:	811a      	strh	r2, [r3, #8]
 800219c:	e00f      	b.n	80021be <main_fsm+0x642>
						} else if(button_count[3] > 40){
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <main_fsm+0x7c0>)
 80021a0:	88db      	ldrh	r3, [r3, #6]
 80021a2:	2b28      	cmp	r3, #40	; 0x28
 80021a4:	d90b      	bls.n	80021be <main_fsm+0x642>
							if(flag_timer[4] == 1){
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <main_fsm+0x7c4>)
 80021a8:	891b      	ldrh	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <main_fsm+0x642>
								flag_timer[4] = 0;
 80021ae:	4b64      	ldr	r3, [pc, #400]	; (8002340 <main_fsm+0x7c4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	811a      	strh	r2, [r3, #8]
								year_temp = year_temp + 1;
 80021b4:	4b67      	ldr	r3, [pc, #412]	; (8002354 <main_fsm+0x7d8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	3301      	adds	r3, #1
 80021ba:	4a66      	ldr	r2, [pc, #408]	; (8002354 <main_fsm+0x7d8>)
 80021bc:	6013      	str	r3, [r2, #0]
						if(toggle_at == 1){
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <main_fsm+0x7cc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d10f      	bne.n	80021e6 <main_fsm+0x66a>
							lcd_ShowIntNum(150, 130, year_temp, 2, YELLOW, BLACK, 24);
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <main_fsm+0x7d8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2318      	movs	r3, #24
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2302      	movs	r3, #2
 80021dc:	2182      	movs	r1, #130	; 0x82
 80021de:	2096      	movs	r0, #150	; 0x96
 80021e0:	f7fe ff0e 	bl	8001000 <lcd_ShowIntNum>
					break;
 80021e4:	e19e      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(150, 130, year_temp, 2, BLACK, BLACK, 24);
 80021e6:	4b5b      	ldr	r3, [pc, #364]	; (8002354 <main_fsm+0x7d8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	2318      	movs	r3, #24
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2302      	movs	r3, #2
 80021fa:	2182      	movs	r1, #130	; 0x82
 80021fc:	2096      	movs	r0, #150	; 0x96
 80021fe:	f7fe feff 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002202:	e18f      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - HOUR", RED, BLUE, 24, 1);
 8002204:	2301      	movs	r3, #1
 8002206:	9302      	str	r3, [sp, #8]
 8002208:	2318      	movs	r3, #24
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	231f      	movs	r3, #31
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002214:	4a50      	ldr	r2, [pc, #320]	; (8002358 <main_fsm+0x7dc>)
 8002216:	2132      	movs	r1, #50	; 0x32
 8002218:	2014      	movs	r0, #20
 800221a:	f7ff f90d 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <main_fsm+0x7c0>)
 8002220:	8a1b      	ldrh	r3, [r3, #16]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d114      	bne.n	8002250 <main_fsm+0x6d4>
						status[1] = TA_MINUTE;
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <main_fsm+0x7d4>)
 8002228:	220b      	movs	r2, #11
 800222a:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(70, 100, hour_temp, 2, GREEN, BLACK, 24);
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <main_fsm+0x7e0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29a      	uxth	r2, r3
 8002232:	2318      	movs	r3, #24
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2300      	movs	r3, #0
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2302      	movs	r3, #2
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	2046      	movs	r0, #70	; 0x46
 8002246:	f7fe fedb 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800224a:	f7ff fc1b 	bl	8001a84 <clear_header>
					break;
 800224e:	e169      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_HOUR;
 8002250:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <main_fsm+0x7d4>)
 8002252:	220a      	movs	r2, #10
 8002254:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002256:	4b39      	ldr	r3, [pc, #228]	; (800233c <main_fsm+0x7c0>)
 8002258:	88db      	ldrh	r3, [r3, #6]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <main_fsm+0x6ee>
							hour_temp = hour_temp + 1;
 800225e:	4b3f      	ldr	r3, [pc, #252]	; (800235c <main_fsm+0x7e0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	4a3d      	ldr	r2, [pc, #244]	; (800235c <main_fsm+0x7e0>)
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e017      	b.n	800229a <main_fsm+0x71e>
						} else if(button_count[3] == 40){	// if press and hold
 800226a:	4b34      	ldr	r3, [pc, #208]	; (800233c <main_fsm+0x7c0>)
 800226c:	88db      	ldrh	r3, [r3, #6]
 800226e:	2b28      	cmp	r3, #40	; 0x28
 8002270:	d103      	bne.n	800227a <main_fsm+0x6fe>
							flag_timer[4] = 0;
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <main_fsm+0x7c4>)
 8002274:	2200      	movs	r2, #0
 8002276:	811a      	strh	r2, [r3, #8]
 8002278:	e00f      	b.n	800229a <main_fsm+0x71e>
						} else if(button_count[3] > 40){
 800227a:	4b30      	ldr	r3, [pc, #192]	; (800233c <main_fsm+0x7c0>)
 800227c:	88db      	ldrh	r3, [r3, #6]
 800227e:	2b28      	cmp	r3, #40	; 0x28
 8002280:	d90b      	bls.n	800229a <main_fsm+0x71e>
							if(flag_timer[4] == 1){
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <main_fsm+0x7c4>)
 8002284:	891b      	ldrh	r3, [r3, #8]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <main_fsm+0x71e>
								flag_timer[4] = 0;
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <main_fsm+0x7c4>)
 800228c:	2200      	movs	r2, #0
 800228e:	811a      	strh	r2, [r3, #8]
								hour_temp = hour_temp + 1;
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <main_fsm+0x7e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <main_fsm+0x7e0>)
 8002298:	6013      	str	r3, [r2, #0]
						if(hour_temp >= 24) hour_temp = 0;
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <main_fsm+0x7e0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b17      	cmp	r3, #23
 80022a0:	dd02      	ble.n	80022a8 <main_fsm+0x72c>
 80022a2:	4b2e      	ldr	r3, [pc, #184]	; (800235c <main_fsm+0x7e0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 80022a8:	4b27      	ldr	r3, [pc, #156]	; (8002348 <main_fsm+0x7cc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10f      	bne.n	80022d0 <main_fsm+0x754>
							lcd_ShowIntNum(70, 100, hour_temp, 2, GREEN, BLACK, 24);
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <main_fsm+0x7e0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	2318      	movs	r3, #24
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2300      	movs	r3, #0
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	2302      	movs	r3, #2
 80022c6:	2164      	movs	r1, #100	; 0x64
 80022c8:	2046      	movs	r0, #70	; 0x46
 80022ca:	f7fe fe99 	bl	8001000 <lcd_ShowIntNum>
					break;
 80022ce:	e129      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(70, 100, hour_temp, 2, BLACK, BLACK, 24);
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <main_fsm+0x7e0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	2318      	movs	r3, #24
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	2300      	movs	r3, #0
 80022dc:	9301      	str	r3, [sp, #4]
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2302      	movs	r3, #2
 80022e4:	2164      	movs	r1, #100	; 0x64
 80022e6:	2046      	movs	r0, #70	; 0x46
 80022e8:	f7fe fe8a 	bl	8001000 <lcd_ShowIntNum>
					break;
 80022ec:	e11a      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - MIN", RED, BLUE, 24, 1);
 80022ee:	2301      	movs	r3, #1
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2318      	movs	r3, #24
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	231f      	movs	r3, #31
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <main_fsm+0x7e4>)
 8002300:	2132      	movs	r1, #50	; 0x32
 8002302:	2014      	movs	r0, #20
 8002304:	f7ff f898 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <main_fsm+0x7c0>)
 800230a:	8a1b      	ldrh	r3, [r3, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d12b      	bne.n	8002368 <main_fsm+0x7ec>
						status[1] = TA_SECOND;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <main_fsm+0x7d4>)
 8002312:	220c      	movs	r2, #12
 8002314:	605a      	str	r2, [r3, #4]
						lcd_ShowIntNum(110, 100, minute_temp, 2, GREEN, BLACK, 24);
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <main_fsm+0x7e8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2318      	movs	r3, #24
 800231e:	9302      	str	r3, [sp, #8]
 8002320:	2300      	movs	r3, #0
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2302      	movs	r3, #2
 800232c:	2164      	movs	r1, #100	; 0x64
 800232e:	206e      	movs	r0, #110	; 0x6e
 8002330:	f7fe fe66 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8002334:	f7ff fba6 	bl	8001a84 <clear_header>
					break;
 8002338:	e0f4      	b.n	8002524 <main_fsm+0x9a8>
 800233a:	bf00      	nop
 800233c:	200000d8 	.word	0x200000d8
 8002340:	20000098 	.word	0x20000098
 8002344:	20000160 	.word	0x20000160
 8002348:	200001ac 	.word	0x200001ac
 800234c:	080089c0 	.word	0x080089c0
 8002350:	200001c4 	.word	0x200001c4
 8002354:	2000015c 	.word	0x2000015c
 8002358:	080089d4 	.word	0x080089d4
 800235c:	20000190 	.word	0x20000190
 8002360:	080089e8 	.word	0x080089e8
 8002364:	2000019c 	.word	0x2000019c
						status[1] = TA_MINUTE;
 8002368:	4b94      	ldr	r3, [pc, #592]	; (80025bc <main_fsm+0xa40>)
 800236a:	220b      	movs	r2, #11
 800236c:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <main_fsm+0xa44>)
 8002370:	88db      	ldrh	r3, [r3, #6]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <main_fsm+0x806>
							minute_temp = minute_temp + 1;
 8002376:	4b93      	ldr	r3, [pc, #588]	; (80025c4 <main_fsm+0xa48>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a91      	ldr	r2, [pc, #580]	; (80025c4 <main_fsm+0xa48>)
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e017      	b.n	80023b2 <main_fsm+0x836>
						} else if(button_count[3] == 40){	// if press and hold
 8002382:	4b8f      	ldr	r3, [pc, #572]	; (80025c0 <main_fsm+0xa44>)
 8002384:	88db      	ldrh	r3, [r3, #6]
 8002386:	2b28      	cmp	r3, #40	; 0x28
 8002388:	d103      	bne.n	8002392 <main_fsm+0x816>
							flag_timer[4] = 0;
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <main_fsm+0xa4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	811a      	strh	r2, [r3, #8]
 8002390:	e00f      	b.n	80023b2 <main_fsm+0x836>
						} else if(button_count[3] > 40){
 8002392:	4b8b      	ldr	r3, [pc, #556]	; (80025c0 <main_fsm+0xa44>)
 8002394:	88db      	ldrh	r3, [r3, #6]
 8002396:	2b28      	cmp	r3, #40	; 0x28
 8002398:	d90b      	bls.n	80023b2 <main_fsm+0x836>
							if(flag_timer[4] == 1){
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <main_fsm+0xa4c>)
 800239c:	891b      	ldrh	r3, [r3, #8]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <main_fsm+0x836>
								flag_timer[4] = 0;
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <main_fsm+0xa4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	811a      	strh	r2, [r3, #8]
								minute_temp = minute_temp + 1;
 80023a8:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <main_fsm+0xa48>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a85      	ldr	r2, [pc, #532]	; (80025c4 <main_fsm+0xa48>)
 80023b0:	6013      	str	r3, [r2, #0]
						if(minute_temp >= 60) minute_temp = 0;
 80023b2:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <main_fsm+0xa48>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b3b      	cmp	r3, #59	; 0x3b
 80023b8:	dd02      	ble.n	80023c0 <main_fsm+0x844>
 80023ba:	4b82      	ldr	r3, [pc, #520]	; (80025c4 <main_fsm+0xa48>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 80023c0:	4b82      	ldr	r3, [pc, #520]	; (80025cc <main_fsm+0xa50>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10f      	bne.n	80023e8 <main_fsm+0x86c>
							lcd_ShowIntNum(110, 100, minute_temp, 2, GREEN, BLACK, 24);
 80023c8:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <main_fsm+0xa48>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	2318      	movs	r3, #24
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2302      	movs	r3, #2
 80023de:	2164      	movs	r1, #100	; 0x64
 80023e0:	206e      	movs	r0, #110	; 0x6e
 80023e2:	f7fe fe0d 	bl	8001000 <lcd_ShowIntNum>
					break;
 80023e6:	e09d      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(110, 100, minute_temp, 2, BLACK, BLACK, 24);
 80023e8:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <main_fsm+0xa48>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	2318      	movs	r3, #24
 80023f0:	9302      	str	r3, [sp, #8]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2302      	movs	r3, #2
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	206e      	movs	r0, #110	; 0x6e
 8002400:	f7fe fdfe 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002404:	e08e      	b.n	8002524 <main_fsm+0x9a8>
					lcd_ShowStr(20, 50, "TIME ADJUST - SEC", RED, BLUE, 24, 1);
 8002406:	2301      	movs	r3, #1
 8002408:	9302      	str	r3, [sp, #8]
 800240a:	2318      	movs	r3, #24
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	231f      	movs	r3, #31
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002416:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <main_fsm+0xa54>)
 8002418:	2132      	movs	r1, #50	; 0x32
 800241a:	2014      	movs	r0, #20
 800241c:	f7ff f80c 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8002420:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <main_fsm+0xa44>)
 8002422:	8a1b      	ldrh	r3, [r3, #16]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d12d      	bne.n	8002484 <main_fsm+0x908>
						status[1] = TA_INIT;
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <main_fsm+0xa40>)
 800242a:	2205      	movs	r2, #5
 800242c:	605a      	str	r2, [r3, #4]
						status[0] = TIME_DISPLAY;
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <main_fsm+0xa40>)
 8002430:	2202      	movs	r2, #2
 8002432:	601a      	str	r2, [r3, #0]
						updateTime_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
 8002434:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <main_fsm+0xa58>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <main_fsm+0xa48>)
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <main_fsm+0xa5c>)
 800243e:	681d      	ldr	r5, [r3, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <main_fsm+0xa60>)
 8002442:	681e      	ldr	r6, [r3, #0]
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <main_fsm+0xa64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a66      	ldr	r2, [pc, #408]	; (80025e4 <main_fsm+0xa68>)
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4966      	ldr	r1, [pc, #408]	; (80025e8 <main_fsm+0xa6c>)
 800244e:	6809      	ldr	r1, [r1, #0]
 8002450:	9102      	str	r1, [sp, #8]
 8002452:	9201      	str	r2, [sp, #4]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4633      	mov	r3, r6
 8002458:	462a      	mov	r2, r5
 800245a:	4621      	mov	r1, r4
 800245c:	f7ff fb26 	bl	8001aac <updateTime_ta_al>
						lcd_ShowIntNum(150, 100, second_temp, 2, GREEN, BLACK, 24);
 8002460:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <main_fsm+0xa5c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	b29a      	uxth	r2, r3
 8002466:	2318      	movs	r3, #24
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2300      	movs	r3, #0
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2302      	movs	r3, #2
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	2096      	movs	r0, #150	; 0x96
 800247a:	f7fe fdc1 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800247e:	f7ff fb01 	bl	8001a84 <clear_header>
					break;
 8002482:	e04f      	b.n	8002524 <main_fsm+0x9a8>
						status[1] = TA_SECOND;
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <main_fsm+0xa40>)
 8002486:	220c      	movs	r2, #12
 8002488:	605a      	str	r2, [r3, #4]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <main_fsm+0xa44>)
 800248c:	88db      	ldrh	r3, [r3, #6]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <main_fsm+0x922>
							second_temp = second_temp + 1;
 8002492:	4b51      	ldr	r3, [pc, #324]	; (80025d8 <main_fsm+0xa5c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <main_fsm+0xa5c>)
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e017      	b.n	80024ce <main_fsm+0x952>
						} else if(button_count[3] == 40){	// if press and hold
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <main_fsm+0xa44>)
 80024a0:	88db      	ldrh	r3, [r3, #6]
 80024a2:	2b28      	cmp	r3, #40	; 0x28
 80024a4:	d103      	bne.n	80024ae <main_fsm+0x932>
							flag_timer[4] = 0;
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <main_fsm+0xa4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	811a      	strh	r2, [r3, #8]
 80024ac:	e00f      	b.n	80024ce <main_fsm+0x952>
						} else if(button_count[3] > 40){
 80024ae:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <main_fsm+0xa44>)
 80024b0:	88db      	ldrh	r3, [r3, #6]
 80024b2:	2b28      	cmp	r3, #40	; 0x28
 80024b4:	d90b      	bls.n	80024ce <main_fsm+0x952>
							if(flag_timer[4] == 1){
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <main_fsm+0xa4c>)
 80024b8:	891b      	ldrh	r3, [r3, #8]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <main_fsm+0x952>
								flag_timer[4] = 0;
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <main_fsm+0xa4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	811a      	strh	r2, [r3, #8]
								second_temp = second_temp + 1;
 80024c4:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <main_fsm+0xa5c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <main_fsm+0xa5c>)
 80024cc:	6013      	str	r3, [r2, #0]
						if(second_temp >= 60) second_temp = 1;
 80024ce:	4b42      	ldr	r3, [pc, #264]	; (80025d8 <main_fsm+0xa5c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b3b      	cmp	r3, #59	; 0x3b
 80024d4:	dd02      	ble.n	80024dc <main_fsm+0x960>
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <main_fsm+0xa5c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <main_fsm+0xa50>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d10f      	bne.n	8002504 <main_fsm+0x988>
							lcd_ShowIntNum(150, 100, second_temp, 2, GREEN, BLACK, 24);
 80024e4:	4b3c      	ldr	r3, [pc, #240]	; (80025d8 <main_fsm+0xa5c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	2318      	movs	r3, #24
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2302      	movs	r3, #2
 80024fa:	2164      	movs	r1, #100	; 0x64
 80024fc:	2096      	movs	r0, #150	; 0x96
 80024fe:	f7fe fd7f 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002502:	e00f      	b.n	8002524 <main_fsm+0x9a8>
							lcd_ShowIntNum(150, 100, second_temp, 2, BLACK, BLACK, 24);
 8002504:	4b34      	ldr	r3, [pc, #208]	; (80025d8 <main_fsm+0xa5c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b29a      	uxth	r2, r3
 800250a:	2318      	movs	r3, #24
 800250c:	9302      	str	r3, [sp, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2302      	movs	r3, #2
 8002518:	2164      	movs	r1, #100	; 0x64
 800251a:	2096      	movs	r0, #150	; 0x96
 800251c:	f7fe fd70 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002520:	e000      	b.n	8002524 <main_fsm+0x9a8>
					break;
 8002522:	bf00      	nop
		break;
 8002524:	f000 bc80 	b.w	8002e28 <main_fsm+0x12ac>

	case ALARM:
		if(button_count[11] == 1){				// if change to time display state -> not update time, reset state of alarm to AL_INIT
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <main_fsm+0xa44>)
 800252a:	8adb      	ldrh	r3, [r3, #22]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d11f      	bne.n	8002570 <main_fsm+0x9f4>
			status[0] = UART;
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <main_fsm+0xa40>)
 8002532:	2215      	movs	r2, #21
 8002534:	601a      	str	r2, [r3, #0]
			status[2] = AL_INIT;
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <main_fsm+0xa40>)
 8002538:	220d      	movs	r2, #13
 800253a:	609a      	str	r2, [r3, #8]
			display_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <main_fsm+0xa58>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <main_fsm+0xa48>)
 8002542:	681c      	ldr	r4, [r3, #0]
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <main_fsm+0xa5c>)
 8002546:	681d      	ldr	r5, [r3, #0]
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <main_fsm+0xa60>)
 800254a:	681e      	ldr	r6, [r3, #0]
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <main_fsm+0xa64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <main_fsm+0xa68>)
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	4924      	ldr	r1, [pc, #144]	; (80025e8 <main_fsm+0xa6c>)
 8002556:	6809      	ldr	r1, [r1, #0]
 8002558:	9102      	str	r1, [sp, #8]
 800255a:	9201      	str	r2, [sp, #4]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4633      	mov	r3, r6
 8002560:	462a      	mov	r2, r5
 8002562:	4621      	mov	r1, r4
 8002564:	f7ff fa20 	bl	80019a8 <display_ta_al>
//			updateTime_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
			clear_header();
 8002568:	f7ff fa8c 	bl	8001a84 <clear_header>
					break;
				default:
					break;
			}
		}
		break;
 800256c:	f000 bc5c 	b.w	8002e28 <main_fsm+0x12ac>
			switch(status[2]){
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <main_fsm+0xa40>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	3b0d      	subs	r3, #13
 8002576:	2b07      	cmp	r3, #7
 8002578:	f200 8400 	bhi.w	8002d7c <main_fsm+0x1200>
 800257c:	a201      	add	r2, pc, #4	; (adr r2, 8002584 <main_fsm+0xa08>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	080025a5 	.word	0x080025a5
 8002588:	080025ed 	.word	0x080025ed
 800258c:	080026ef 	.word	0x080026ef
 8002590:	08002891 	.word	0x08002891
 8002594:	08002983 	.word	0x08002983
 8002598:	08002a67 	.word	0x08002a67
 800259c:	08002b8d 	.word	0x08002b8d
 80025a0:	08002c7f 	.word	0x08002c7f
					if(status[0] == ALARM){		// if status of main fsm change to ALARM -> change to AL_DAY state
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <main_fsm+0xa40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d103      	bne.n	80025b4 <main_fsm+0xa38>
						status[2] = AL_DAY;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <main_fsm+0xa40>)
 80025ae:	220e      	movs	r2, #14
 80025b0:	609a      	str	r2, [r3, #8]
					break;
 80025b2:	e3e4      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_INIT;
 80025b4:	4b01      	ldr	r3, [pc, #4]	; (80025bc <main_fsm+0xa40>)
 80025b6:	220d      	movs	r2, #13
 80025b8:	609a      	str	r2, [r3, #8]
					break;
 80025ba:	e3e0      	b.n	8002d7e <main_fsm+0x1202>
 80025bc:	200001c4 	.word	0x200001c4
 80025c0:	200000d8 	.word	0x200000d8
 80025c4:	2000019c 	.word	0x2000019c
 80025c8:	20000098 	.word	0x20000098
 80025cc:	200001ac 	.word	0x200001ac
 80025d0:	080089fc 	.word	0x080089fc
 80025d4:	20000190 	.word	0x20000190
 80025d8:	20000158 	.word	0x20000158
 80025dc:	20000188 	.word	0x20000188
 80025e0:	200001a8 	.word	0x200001a8
 80025e4:	20000160 	.word	0x20000160
 80025e8:	2000015c 	.word	0x2000015c
					lcd_ShowStr(20, 50, "ALARM - DAY", RED, BLUE, 24, 1);
 80025ec:	2301      	movs	r3, #1
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	2318      	movs	r3, #24
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	231f      	movs	r3, #31
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025fc:	4a98      	ldr	r2, [pc, #608]	; (8002860 <main_fsm+0xce4>)
 80025fe:	2132      	movs	r1, #50	; 0x32
 8002600:	2014      	movs	r0, #20
 8002602:	f7fe ff19 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component: button "7"
 8002606:	4b97      	ldr	r3, [pc, #604]	; (8002864 <main_fsm+0xce8>)
 8002608:	8a1b      	ldrh	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d118      	bne.n	8002640 <main_fsm+0xac4>
						status[2] = AL_DATE;
 800260e:	4b96      	ldr	r3, [pc, #600]	; (8002868 <main_fsm+0xcec>)
 8002610:	220f      	movs	r2, #15
 8002612:	609a      	str	r2, [r3, #8]
						day[1] = day_temp;
 8002614:	4b95      	ldr	r3, [pc, #596]	; (800286c <main_fsm+0xcf0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a95      	ldr	r2, [pc, #596]	; (8002870 <main_fsm+0xcf4>)
 800261a:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(20, 130, day_temp, 2, YELLOW, BLACK, 24);
 800261c:	4b93      	ldr	r3, [pc, #588]	; (800286c <main_fsm+0xcf0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	b29a      	uxth	r2, r3
 8002622:	2318      	movs	r3, #24
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	2300      	movs	r3, #0
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2302      	movs	r3, #2
 8002632:	2182      	movs	r1, #130	; 0x82
 8002634:	2014      	movs	r0, #20
 8002636:	f7fe fce3 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800263a:	f7ff fa23 	bl	8001a84 <clear_header>
					break;
 800263e:	e39e      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_DAY;
 8002640:	4b89      	ldr	r3, [pc, #548]	; (8002868 <main_fsm+0xcec>)
 8002642:	220e      	movs	r2, #14
 8002644:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002646:	4b87      	ldr	r3, [pc, #540]	; (8002864 <main_fsm+0xce8>)
 8002648:	88db      	ldrh	r3, [r3, #6]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <main_fsm+0xade>
							day_temp = day_temp + 1;
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <main_fsm+0xcf0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	4a85      	ldr	r2, [pc, #532]	; (800286c <main_fsm+0xcf0>)
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e017      	b.n	800268a <main_fsm+0xb0e>
						} else if(button_count[3] == 40){	// if press and hold
 800265a:	4b82      	ldr	r3, [pc, #520]	; (8002864 <main_fsm+0xce8>)
 800265c:	88db      	ldrh	r3, [r3, #6]
 800265e:	2b28      	cmp	r3, #40	; 0x28
 8002660:	d103      	bne.n	800266a <main_fsm+0xaee>
							flag_timer[4] = 0;
 8002662:	4b84      	ldr	r3, [pc, #528]	; (8002874 <main_fsm+0xcf8>)
 8002664:	2200      	movs	r2, #0
 8002666:	811a      	strh	r2, [r3, #8]
 8002668:	e00f      	b.n	800268a <main_fsm+0xb0e>
						} else if(button_count[3] > 40){
 800266a:	4b7e      	ldr	r3, [pc, #504]	; (8002864 <main_fsm+0xce8>)
 800266c:	88db      	ldrh	r3, [r3, #6]
 800266e:	2b28      	cmp	r3, #40	; 0x28
 8002670:	d90b      	bls.n	800268a <main_fsm+0xb0e>
							if(flag_timer[4] == 1){
 8002672:	4b80      	ldr	r3, [pc, #512]	; (8002874 <main_fsm+0xcf8>)
 8002674:	891b      	ldrh	r3, [r3, #8]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d107      	bne.n	800268a <main_fsm+0xb0e>
								flag_timer[4] = 0;
 800267a:	4b7e      	ldr	r3, [pc, #504]	; (8002874 <main_fsm+0xcf8>)
 800267c:	2200      	movs	r2, #0
 800267e:	811a      	strh	r2, [r3, #8]
								day_temp = day_temp + 1;
 8002680:	4b7a      	ldr	r3, [pc, #488]	; (800286c <main_fsm+0xcf0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	3301      	adds	r3, #1
 8002686:	4a79      	ldr	r2, [pc, #484]	; (800286c <main_fsm+0xcf0>)
 8002688:	6013      	str	r3, [r2, #0]
						if(day_temp >= 8) day_temp = 1;
 800268a:	4b78      	ldr	r3, [pc, #480]	; (800286c <main_fsm+0xcf0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b07      	cmp	r3, #7
 8002690:	dd03      	ble.n	800269a <main_fsm+0xb1e>
 8002692:	4b76      	ldr	r3, [pc, #472]	; (800286c <main_fsm+0xcf0>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e006      	b.n	80026a8 <main_fsm+0xb2c>
						else if(day_temp <= 0) day_temp = 1;
 800269a:	4b74      	ldr	r3, [pc, #464]	; (800286c <main_fsm+0xcf0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dc02      	bgt.n	80026a8 <main_fsm+0xb2c>
 80026a2:	4b72      	ldr	r3, [pc, #456]	; (800286c <main_fsm+0xcf0>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <main_fsm+0xcfc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10f      	bne.n	80026d0 <main_fsm+0xb54>
							lcd_ShowIntNum(20, 130, day_temp, 2, YELLOW, BLACK, 24);
 80026b0:	4b6e      	ldr	r3, [pc, #440]	; (800286c <main_fsm+0xcf0>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	2318      	movs	r3, #24
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2302      	movs	r3, #2
 80026c6:	2182      	movs	r1, #130	; 0x82
 80026c8:	2014      	movs	r0, #20
 80026ca:	f7fe fc99 	bl	8001000 <lcd_ShowIntNum>
					break;
 80026ce:	e356      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(20, 130, day_temp, 2, BLACK, BLACK, 24);
 80026d0:	4b66      	ldr	r3, [pc, #408]	; (800286c <main_fsm+0xcf0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	2318      	movs	r3, #24
 80026d8:	9302      	str	r3, [sp, #8]
 80026da:	2300      	movs	r3, #0
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	2300      	movs	r3, #0
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	2302      	movs	r3, #2
 80026e4:	2182      	movs	r1, #130	; 0x82
 80026e6:	2014      	movs	r0, #20
 80026e8:	f7fe fc8a 	bl	8001000 <lcd_ShowIntNum>
					break;
 80026ec:	e347      	b.n	8002d7e <main_fsm+0x1202>
					lcd_ShowStr(20, 50, "ALARM - DATE", RED, BLUE, 24, 1);
 80026ee:	2301      	movs	r3, #1
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2318      	movs	r3, #24
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	231f      	movs	r3, #31
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80026fe:	4a5f      	ldr	r2, [pc, #380]	; (800287c <main_fsm+0xd00>)
 8002700:	2132      	movs	r1, #50	; 0x32
 8002702:	2014      	movs	r0, #20
 8002704:	f7fe fe98 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 8002708:	4b56      	ldr	r3, [pc, #344]	; (8002864 <main_fsm+0xce8>)
 800270a:	8a1b      	ldrh	r3, [r3, #16]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d118      	bne.n	8002742 <main_fsm+0xbc6>
						status[2] = AL_MONTH;
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <main_fsm+0xcec>)
 8002712:	2210      	movs	r2, #16
 8002714:	609a      	str	r2, [r3, #8]
						date[1] = date_temp;
 8002716:	4b5a      	ldr	r3, [pc, #360]	; (8002880 <main_fsm+0xd04>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <main_fsm+0xd08>)
 800271c:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(70, 130, date_temp, 2, YELLOW, BLACK, 24);
 800271e:	4b58      	ldr	r3, [pc, #352]	; (8002880 <main_fsm+0xd04>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29a      	uxth	r2, r3
 8002724:	2318      	movs	r3, #24
 8002726:	9302      	str	r3, [sp, #8]
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2302      	movs	r3, #2
 8002734:	2182      	movs	r1, #130	; 0x82
 8002736:	2046      	movs	r0, #70	; 0x46
 8002738:	f7fe fc62 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 800273c:	f7ff f9a2 	bl	8001a84 <clear_header>
					break;
 8002740:	e31d      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_DATE;
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <main_fsm+0xcec>)
 8002744:	220f      	movs	r2, #15
 8002746:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002748:	4b46      	ldr	r3, [pc, #280]	; (8002864 <main_fsm+0xce8>)
 800274a:	88db      	ldrh	r3, [r3, #6]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <main_fsm+0xbe0>
							date_temp = date_temp + 1;
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <main_fsm+0xd04>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <main_fsm+0xd04>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e017      	b.n	800278c <main_fsm+0xc10>
						} else if(button_count[3] == 40){	// if press and hold
 800275c:	4b41      	ldr	r3, [pc, #260]	; (8002864 <main_fsm+0xce8>)
 800275e:	88db      	ldrh	r3, [r3, #6]
 8002760:	2b28      	cmp	r3, #40	; 0x28
 8002762:	d103      	bne.n	800276c <main_fsm+0xbf0>
							flag_timer[4] = 0;
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <main_fsm+0xcf8>)
 8002766:	2200      	movs	r2, #0
 8002768:	811a      	strh	r2, [r3, #8]
 800276a:	e00f      	b.n	800278c <main_fsm+0xc10>
						} else if(button_count[3] > 40){
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <main_fsm+0xce8>)
 800276e:	88db      	ldrh	r3, [r3, #6]
 8002770:	2b28      	cmp	r3, #40	; 0x28
 8002772:	d90b      	bls.n	800278c <main_fsm+0xc10>
							if(flag_timer[4] == 1){
 8002774:	4b3f      	ldr	r3, [pc, #252]	; (8002874 <main_fsm+0xcf8>)
 8002776:	891b      	ldrh	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <main_fsm+0xc10>
								flag_timer[4] = 0;
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <main_fsm+0xcf8>)
 800277e:	2200      	movs	r2, #0
 8002780:	811a      	strh	r2, [r3, #8]
								date_temp = date_temp + 1;
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <main_fsm+0xd04>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	4a3d      	ldr	r2, [pc, #244]	; (8002880 <main_fsm+0xd04>)
 800278a:	6013      	str	r3, [r2, #0]
						if(month_temp==1 || month_temp==3 || month_temp==5 || month_temp==7 || month_temp==8 || month_temp==10 || month_temp==12){
 800278c:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <main_fsm+0xd0c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d017      	beq.n	80027c4 <main_fsm+0xc48>
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <main_fsm+0xd0c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d013      	beq.n	80027c4 <main_fsm+0xc48>
 800279c:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <main_fsm+0xd0c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d00f      	beq.n	80027c4 <main_fsm+0xc48>
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <main_fsm+0xd0c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b07      	cmp	r3, #7
 80027aa:	d00b      	beq.n	80027c4 <main_fsm+0xc48>
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <main_fsm+0xd0c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d007      	beq.n	80027c4 <main_fsm+0xc48>
 80027b4:	4b34      	ldr	r3, [pc, #208]	; (8002888 <main_fsm+0xd0c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b0a      	cmp	r3, #10
 80027ba:	d003      	beq.n	80027c4 <main_fsm+0xc48>
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <main_fsm+0xd0c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	d107      	bne.n	80027d4 <main_fsm+0xc58>
							if(date_temp>=32){
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <main_fsm+0xd04>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b1f      	cmp	r3, #31
 80027ca:	dd26      	ble.n	800281a <main_fsm+0xc9e>
								date_temp = 1;
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <main_fsm+0xd04>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
							if(date_temp>=32){
 80027d2:	e022      	b.n	800281a <main_fsm+0xc9e>
						} else if(month_temp == 2){		// if month 2
 80027d4:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <main_fsm+0xd0c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d117      	bne.n	800280c <main_fsm+0xc90>
							if(leap_year(year_temp)){	// check leap year
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <main_fsm+0xd10>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f999 	bl	8001b18 <leap_year>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <main_fsm+0xc80>
								if(date_temp >= 30) date_temp = 1;	// if leap year -> 29 days maximum
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <main_fsm+0xd04>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b1d      	cmp	r3, #29
 80027f2:	dd12      	ble.n	800281a <main_fsm+0xc9e>
 80027f4:	4b22      	ldr	r3, [pc, #136]	; (8002880 <main_fsm+0xd04>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e00e      	b.n	800281a <main_fsm+0xc9e>
								if(date_temp >= 29) date_temp = 1;
 80027fc:	4b20      	ldr	r3, [pc, #128]	; (8002880 <main_fsm+0xd04>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b1c      	cmp	r3, #28
 8002802:	dd0a      	ble.n	800281a <main_fsm+0xc9e>
 8002804:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <main_fsm+0xd04>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e006      	b.n	800281a <main_fsm+0xc9e>
							if(date_temp >= 31) date_temp = 1;
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <main_fsm+0xd04>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b1e      	cmp	r3, #30
 8002812:	dd02      	ble.n	800281a <main_fsm+0xc9e>
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <main_fsm+0xd04>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <main_fsm+0xcfc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d10f      	bne.n	8002842 <main_fsm+0xcc6>
							lcd_ShowIntNum(70, 130, date_temp, 2, YELLOW, BLACK, 24);
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <main_fsm+0xd04>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	b29a      	uxth	r2, r3
 8002828:	2318      	movs	r3, #24
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	2302      	movs	r3, #2
 8002838:	2182      	movs	r1, #130	; 0x82
 800283a:	2046      	movs	r0, #70	; 0x46
 800283c:	f7fe fbe0 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002840:	e29d      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(70, 130, date_temp, 2, BLACK, BLACK, 24);
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <main_fsm+0xd04>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29a      	uxth	r2, r3
 8002848:	2318      	movs	r3, #24
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	2300      	movs	r3, #0
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2302      	movs	r3, #2
 8002856:	2182      	movs	r1, #130	; 0x82
 8002858:	2046      	movs	r0, #70	; 0x46
 800285a:	f7fe fbd1 	bl	8001000 <lcd_ShowIntNum>
					break;
 800285e:	e28e      	b.n	8002d7e <main_fsm+0x1202>
 8002860:	08008a10 	.word	0x08008a10
 8002864:	200000d8 	.word	0x200000d8
 8002868:	200001c4 	.word	0x200001c4
 800286c:	20000188 	.word	0x20000188
 8002870:	200001a0 	.word	0x200001a0
 8002874:	20000098 	.word	0x20000098
 8002878:	200001ac 	.word	0x200001ac
 800287c:	08008a1c 	.word	0x08008a1c
 8002880:	200001a8 	.word	0x200001a8
 8002884:	200001b0 	.word	0x200001b0
 8002888:	20000160 	.word	0x20000160
 800288c:	2000015c 	.word	0x2000015c
					lcd_ShowStr(20, 50, "ALARM - MONTH", RED, BLUE, 24, 1);
 8002890:	2301      	movs	r3, #1
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	2318      	movs	r3, #24
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	231f      	movs	r3, #31
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80028a0:	4a90      	ldr	r2, [pc, #576]	; (8002ae4 <main_fsm+0xf68>)
 80028a2:	2132      	movs	r1, #50	; 0x32
 80028a4:	2014      	movs	r0, #20
 80028a6:	f7fe fdc7 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 80028aa:	4b8f      	ldr	r3, [pc, #572]	; (8002ae8 <main_fsm+0xf6c>)
 80028ac:	8a1b      	ldrh	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d118      	bne.n	80028e4 <main_fsm+0xd68>
						status[2] = AL_YEAR;
 80028b2:	4b8e      	ldr	r3, [pc, #568]	; (8002aec <main_fsm+0xf70>)
 80028b4:	2211      	movs	r2, #17
 80028b6:	609a      	str	r2, [r3, #8]
						month[1] = month_temp;
 80028b8:	4b8d      	ldr	r3, [pc, #564]	; (8002af0 <main_fsm+0xf74>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a8d      	ldr	r2, [pc, #564]	; (8002af4 <main_fsm+0xf78>)
 80028be:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(110, 130, month_temp, 2, YELLOW, BLACK, 24);
 80028c0:	4b8b      	ldr	r3, [pc, #556]	; (8002af0 <main_fsm+0xf74>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2318      	movs	r3, #24
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	2300      	movs	r3, #0
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2302      	movs	r3, #2
 80028d6:	2182      	movs	r1, #130	; 0x82
 80028d8:	206e      	movs	r0, #110	; 0x6e
 80028da:	f7fe fb91 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 80028de:	f7ff f8d1 	bl	8001a84 <clear_header>
					break;
 80028e2:	e24c      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_MONTH;
 80028e4:	4b81      	ldr	r3, [pc, #516]	; (8002aec <main_fsm+0xf70>)
 80028e6:	2210      	movs	r2, #16
 80028e8:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <main_fsm+0xf6c>)
 80028ec:	88db      	ldrh	r3, [r3, #6]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <main_fsm+0xd82>
							month_temp = month_temp + 1;
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <main_fsm+0xf74>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a7d      	ldr	r2, [pc, #500]	; (8002af0 <main_fsm+0xf74>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e017      	b.n	800292e <main_fsm+0xdb2>
						} else if(button_count[3] == 40){	// if press and hold
 80028fe:	4b7a      	ldr	r3, [pc, #488]	; (8002ae8 <main_fsm+0xf6c>)
 8002900:	88db      	ldrh	r3, [r3, #6]
 8002902:	2b28      	cmp	r3, #40	; 0x28
 8002904:	d103      	bne.n	800290e <main_fsm+0xd92>
							flag_timer[4] = 0;
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <main_fsm+0xf7c>)
 8002908:	2200      	movs	r2, #0
 800290a:	811a      	strh	r2, [r3, #8]
 800290c:	e00f      	b.n	800292e <main_fsm+0xdb2>
						} else if(button_count[3] > 40){
 800290e:	4b76      	ldr	r3, [pc, #472]	; (8002ae8 <main_fsm+0xf6c>)
 8002910:	88db      	ldrh	r3, [r3, #6]
 8002912:	2b28      	cmp	r3, #40	; 0x28
 8002914:	d90b      	bls.n	800292e <main_fsm+0xdb2>
							if(flag_timer[4] == 1){
 8002916:	4b78      	ldr	r3, [pc, #480]	; (8002af8 <main_fsm+0xf7c>)
 8002918:	891b      	ldrh	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <main_fsm+0xdb2>
								flag_timer[4] = 0;
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <main_fsm+0xf7c>)
 8002920:	2200      	movs	r2, #0
 8002922:	811a      	strh	r2, [r3, #8]
								month_temp = month_temp + 1;
 8002924:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <main_fsm+0xf74>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3301      	adds	r3, #1
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <main_fsm+0xf74>)
 800292c:	6013      	str	r3, [r2, #0]
						if(month_temp >= 13) month_temp = 1;
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <main_fsm+0xf74>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	dd02      	ble.n	800293c <main_fsm+0xdc0>
 8002936:	4b6e      	ldr	r3, [pc, #440]	; (8002af0 <main_fsm+0xf74>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <main_fsm+0xf80>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d10f      	bne.n	8002964 <main_fsm+0xde8>
							lcd_ShowIntNum(110, 130, month_temp, 2, YELLOW, BLACK, 24);
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <main_fsm+0xf74>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2318      	movs	r3, #24
 800294c:	9302      	str	r3, [sp, #8]
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2302      	movs	r3, #2
 800295a:	2182      	movs	r1, #130	; 0x82
 800295c:	206e      	movs	r0, #110	; 0x6e
 800295e:	f7fe fb4f 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002962:	e20c      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(110, 130, month_temp, 2, BLACK, BLACK, 24);
 8002964:	4b62      	ldr	r3, [pc, #392]	; (8002af0 <main_fsm+0xf74>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	b29a      	uxth	r2, r3
 800296a:	2318      	movs	r3, #24
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2302      	movs	r3, #2
 8002978:	2182      	movs	r1, #130	; 0x82
 800297a:	206e      	movs	r0, #110	; 0x6e
 800297c:	f7fe fb40 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002980:	e1fd      	b.n	8002d7e <main_fsm+0x1202>
					lcd_ShowStr(20, 50, "ALARM - YEAR", RED, BLUE, 24, 1);
 8002982:	2301      	movs	r3, #1
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	2318      	movs	r3, #24
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	231f      	movs	r3, #31
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002992:	4a5b      	ldr	r2, [pc, #364]	; (8002b00 <main_fsm+0xf84>)
 8002994:	2132      	movs	r1, #50	; 0x32
 8002996:	2014      	movs	r0, #20
 8002998:	f7fe fd4e 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 800299c:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <main_fsm+0xf6c>)
 800299e:	8a1b      	ldrh	r3, [r3, #16]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d118      	bne.n	80029d6 <main_fsm+0xe5a>
						status[2] = AL_HOUR;
 80029a4:	4b51      	ldr	r3, [pc, #324]	; (8002aec <main_fsm+0xf70>)
 80029a6:	2212      	movs	r2, #18
 80029a8:	609a      	str	r2, [r3, #8]
						year[1] = year_temp;
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <main_fsm+0xf88>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a56      	ldr	r2, [pc, #344]	; (8002b08 <main_fsm+0xf8c>)
 80029b0:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(150, 130, year_temp, 2, YELLOW, BLACK, 24);
 80029b2:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <main_fsm+0xf88>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	2318      	movs	r3, #24
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	2300      	movs	r3, #0
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2302      	movs	r3, #2
 80029c8:	2182      	movs	r1, #130	; 0x82
 80029ca:	2096      	movs	r0, #150	; 0x96
 80029cc:	f7fe fb18 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 80029d0:	f7ff f858 	bl	8001a84 <clear_header>
					break;
 80029d4:	e1d3      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_YEAR;
 80029d6:	4b45      	ldr	r3, [pc, #276]	; (8002aec <main_fsm+0xf70>)
 80029d8:	2211      	movs	r2, #17
 80029da:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 80029dc:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <main_fsm+0xf6c>)
 80029de:	88db      	ldrh	r3, [r3, #6]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <main_fsm+0xe74>
							year_temp = year_temp + 1;
 80029e4:	4b47      	ldr	r3, [pc, #284]	; (8002b04 <main_fsm+0xf88>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <main_fsm+0xf88>)
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e017      	b.n	8002a20 <main_fsm+0xea4>
						} else if(button_count[3] == 40){	// if press and hold
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <main_fsm+0xf6c>)
 80029f2:	88db      	ldrh	r3, [r3, #6]
 80029f4:	2b28      	cmp	r3, #40	; 0x28
 80029f6:	d103      	bne.n	8002a00 <main_fsm+0xe84>
							flag_timer[4] = 0;
 80029f8:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <main_fsm+0xf7c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	811a      	strh	r2, [r3, #8]
 80029fe:	e00f      	b.n	8002a20 <main_fsm+0xea4>
						} else if(button_count[3] > 40){
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <main_fsm+0xf6c>)
 8002a02:	88db      	ldrh	r3, [r3, #6]
 8002a04:	2b28      	cmp	r3, #40	; 0x28
 8002a06:	d90b      	bls.n	8002a20 <main_fsm+0xea4>
							if(flag_timer[4] == 1){
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <main_fsm+0xf7c>)
 8002a0a:	891b      	ldrh	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <main_fsm+0xea4>
								flag_timer[4] = 0;
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <main_fsm+0xf7c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	811a      	strh	r2, [r3, #8]
								year_temp = year_temp + 1;
 8002a16:	4b3b      	ldr	r3, [pc, #236]	; (8002b04 <main_fsm+0xf88>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	4a39      	ldr	r2, [pc, #228]	; (8002b04 <main_fsm+0xf88>)
 8002a1e:	6013      	str	r3, [r2, #0]
						if(toggle_at == 1){
 8002a20:	4b36      	ldr	r3, [pc, #216]	; (8002afc <main_fsm+0xf80>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10f      	bne.n	8002a48 <main_fsm+0xecc>
							lcd_ShowIntNum(150, 130, year_temp, 2, YELLOW, BLACK, 24);
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <main_fsm+0xf88>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	2318      	movs	r3, #24
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9301      	str	r3, [sp, #4]
 8002a36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	2182      	movs	r1, #130	; 0x82
 8002a40:	2096      	movs	r0, #150	; 0x96
 8002a42:	f7fe fadd 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002a46:	e19a      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(150, 130, year_temp, 2, BLACK, BLACK, 24);
 8002a48:	4b2e      	ldr	r3, [pc, #184]	; (8002b04 <main_fsm+0xf88>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	2318      	movs	r3, #24
 8002a50:	9302      	str	r3, [sp, #8]
 8002a52:	2300      	movs	r3, #0
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	2300      	movs	r3, #0
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	2182      	movs	r1, #130	; 0x82
 8002a5e:	2096      	movs	r0, #150	; 0x96
 8002a60:	f7fe face 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002a64:	e18b      	b.n	8002d7e <main_fsm+0x1202>
					lcd_ShowStr(20, 50, "ALARM - HOUR", RED, BLUE, 24, 1);
 8002a66:	2301      	movs	r3, #1
 8002a68:	9302      	str	r3, [sp, #8]
 8002a6a:	2318      	movs	r3, #24
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	231f      	movs	r3, #31
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002a76:	4a25      	ldr	r2, [pc, #148]	; (8002b0c <main_fsm+0xf90>)
 8002a78:	2132      	movs	r1, #50	; 0x32
 8002a7a:	2014      	movs	r0, #20
 8002a7c:	f7fe fcdc 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <main_fsm+0xf6c>)
 8002a82:	8a1b      	ldrh	r3, [r3, #16]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d118      	bne.n	8002aba <main_fsm+0xf3e>
						status[2] = AL_MINUTE;
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <main_fsm+0xf70>)
 8002a8a:	2213      	movs	r2, #19
 8002a8c:	609a      	str	r2, [r3, #8]
						hour[1] = hour_temp;
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <main_fsm+0xf94>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a20      	ldr	r2, [pc, #128]	; (8002b14 <main_fsm+0xf98>)
 8002a94:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(70, 100, hour_temp, 2, GREEN, BLACK, 24);
 8002a96:	4b1e      	ldr	r3, [pc, #120]	; (8002b10 <main_fsm+0xf94>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	2318      	movs	r3, #24
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	2164      	movs	r1, #100	; 0x64
 8002aae:	2046      	movs	r0, #70	; 0x46
 8002ab0:	f7fe faa6 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8002ab4:	f7fe ffe6 	bl	8001a84 <clear_header>
					break;
 8002ab8:	e161      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_HOUR;
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <main_fsm+0xf70>)
 8002abc:	2212      	movs	r2, #18
 8002abe:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <main_fsm+0xf6c>)
 8002ac2:	88db      	ldrh	r3, [r3, #6]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <main_fsm+0xf58>
							hour_temp = hour_temp + 1;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <main_fsm+0xf94>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <main_fsm+0xf94>)
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e031      	b.n	8002b38 <main_fsm+0xfbc>
						} else if(button_count[3] == 40){	// if press and hold
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <main_fsm+0xf6c>)
 8002ad6:	88db      	ldrh	r3, [r3, #6]
 8002ad8:	2b28      	cmp	r3, #40	; 0x28
 8002ada:	d11d      	bne.n	8002b18 <main_fsm+0xf9c>
							flag_timer[4] = 0;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <main_fsm+0xf7c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	811a      	strh	r2, [r3, #8]
 8002ae2:	e029      	b.n	8002b38 <main_fsm+0xfbc>
 8002ae4:	08008a2c 	.word	0x08008a2c
 8002ae8:	200000d8 	.word	0x200000d8
 8002aec:	200001c4 	.word	0x200001c4
 8002af0:	20000160 	.word	0x20000160
 8002af4:	20000164 	.word	0x20000164
 8002af8:	20000098 	.word	0x20000098
 8002afc:	200001ac 	.word	0x200001ac
 8002b00:	08008a3c 	.word	0x08008a3c
 8002b04:	2000015c 	.word	0x2000015c
 8002b08:	20000194 	.word	0x20000194
 8002b0c:	08008a4c 	.word	0x08008a4c
 8002b10:	20000190 	.word	0x20000190
 8002b14:	20000180 	.word	0x20000180
						} else if(button_count[3] > 40){
 8002b18:	4b99      	ldr	r3, [pc, #612]	; (8002d80 <main_fsm+0x1204>)
 8002b1a:	88db      	ldrh	r3, [r3, #6]
 8002b1c:	2b28      	cmp	r3, #40	; 0x28
 8002b1e:	d90b      	bls.n	8002b38 <main_fsm+0xfbc>
							if(flag_timer[4] == 1){
 8002b20:	4b98      	ldr	r3, [pc, #608]	; (8002d84 <main_fsm+0x1208>)
 8002b22:	891b      	ldrh	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <main_fsm+0xfbc>
								flag_timer[4] = 0;
 8002b28:	4b96      	ldr	r3, [pc, #600]	; (8002d84 <main_fsm+0x1208>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	811a      	strh	r2, [r3, #8]
								hour_temp = hour_temp + 1;
 8002b2e:	4b96      	ldr	r3, [pc, #600]	; (8002d88 <main_fsm+0x120c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a94      	ldr	r2, [pc, #592]	; (8002d88 <main_fsm+0x120c>)
 8002b36:	6013      	str	r3, [r2, #0]
						if(hour_temp >= 60) hour_temp = 1;
 8002b38:	4b93      	ldr	r3, [pc, #588]	; (8002d88 <main_fsm+0x120c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b3b      	cmp	r3, #59	; 0x3b
 8002b3e:	dd02      	ble.n	8002b46 <main_fsm+0xfca>
 8002b40:	4b91      	ldr	r3, [pc, #580]	; (8002d88 <main_fsm+0x120c>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 8002b46:	4b91      	ldr	r3, [pc, #580]	; (8002d8c <main_fsm+0x1210>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10f      	bne.n	8002b6e <main_fsm+0xff2>
							lcd_ShowIntNum(70, 100, hour_temp, 2, GREEN, BLACK, 24);
 8002b4e:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <main_fsm+0x120c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	2318      	movs	r3, #24
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2302      	movs	r3, #2
 8002b64:	2164      	movs	r1, #100	; 0x64
 8002b66:	2046      	movs	r0, #70	; 0x46
 8002b68:	f7fe fa4a 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002b6c:	e107      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(70, 100, hour_temp, 2, BLACK, BLACK, 24);
 8002b6e:	4b86      	ldr	r3, [pc, #536]	; (8002d88 <main_fsm+0x120c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	2318      	movs	r3, #24
 8002b76:	9302      	str	r3, [sp, #8]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2302      	movs	r3, #2
 8002b82:	2164      	movs	r1, #100	; 0x64
 8002b84:	2046      	movs	r0, #70	; 0x46
 8002b86:	f7fe fa3b 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002b8a:	e0f8      	b.n	8002d7e <main_fsm+0x1202>
					lcd_ShowStr(20, 50, "ALARM - MINUTE", RED, BLUE, 24, 1);
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	2318      	movs	r3, #24
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	231f      	movs	r3, #31
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b9c:	4a7c      	ldr	r2, [pc, #496]	; (8002d90 <main_fsm+0x1214>)
 8002b9e:	2132      	movs	r1, #50	; 0x32
 8002ba0:	2014      	movs	r0, #20
 8002ba2:	f7fe fc49 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <main_fsm+0x1204>)
 8002ba8:	8a1b      	ldrh	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d118      	bne.n	8002be0 <main_fsm+0x1064>
						status[2] = AL_SECOND;
 8002bae:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <main_fsm+0x1218>)
 8002bb0:	2214      	movs	r2, #20
 8002bb2:	609a      	str	r2, [r3, #8]
						minute[1] = minute_temp;
 8002bb4:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <main_fsm+0x121c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a78      	ldr	r2, [pc, #480]	; (8002d9c <main_fsm+0x1220>)
 8002bba:	6053      	str	r3, [r2, #4]
						lcd_ShowIntNum(110, 100, minute_temp, 2, GREEN, BLACK, 24);
 8002bbc:	4b76      	ldr	r3, [pc, #472]	; (8002d98 <main_fsm+0x121c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	2318      	movs	r3, #24
 8002bc4:	9302      	str	r3, [sp, #8]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	2164      	movs	r1, #100	; 0x64
 8002bd4:	206e      	movs	r0, #110	; 0x6e
 8002bd6:	f7fe fa13 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8002bda:	f7fe ff53 	bl	8001a84 <clear_header>
					break;
 8002bde:	e0ce      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_MINUTE;
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <main_fsm+0x1218>)
 8002be2:	2213      	movs	r2, #19
 8002be4:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002be6:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <main_fsm+0x1204>)
 8002be8:	88db      	ldrh	r3, [r3, #6]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <main_fsm+0x107e>
							minute_temp = minute_temp + 1;
 8002bee:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <main_fsm+0x121c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	4a68      	ldr	r2, [pc, #416]	; (8002d98 <main_fsm+0x121c>)
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e017      	b.n	8002c2a <main_fsm+0x10ae>
						} else if(button_count[3] == 40){	// if press and hold
 8002bfa:	4b61      	ldr	r3, [pc, #388]	; (8002d80 <main_fsm+0x1204>)
 8002bfc:	88db      	ldrh	r3, [r3, #6]
 8002bfe:	2b28      	cmp	r3, #40	; 0x28
 8002c00:	d103      	bne.n	8002c0a <main_fsm+0x108e>
							flag_timer[4] = 0;
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <main_fsm+0x1208>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	811a      	strh	r2, [r3, #8]
 8002c08:	e00f      	b.n	8002c2a <main_fsm+0x10ae>
						} else if(button_count[3] > 40){
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	; (8002d80 <main_fsm+0x1204>)
 8002c0c:	88db      	ldrh	r3, [r3, #6]
 8002c0e:	2b28      	cmp	r3, #40	; 0x28
 8002c10:	d90b      	bls.n	8002c2a <main_fsm+0x10ae>
							if(flag_timer[4] == 1){
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <main_fsm+0x1208>)
 8002c14:	891b      	ldrh	r3, [r3, #8]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <main_fsm+0x10ae>
								flag_timer[4] = 0;
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <main_fsm+0x1208>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	811a      	strh	r2, [r3, #8]
								minute_temp = minute_temp + 1;
 8002c20:	4b5d      	ldr	r3, [pc, #372]	; (8002d98 <main_fsm+0x121c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	4a5c      	ldr	r2, [pc, #368]	; (8002d98 <main_fsm+0x121c>)
 8002c28:	6013      	str	r3, [r2, #0]
						if(minute_temp >= 60) minute_temp = 1;
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <main_fsm+0x121c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b3b      	cmp	r3, #59	; 0x3b
 8002c30:	dd02      	ble.n	8002c38 <main_fsm+0x10bc>
 8002c32:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <main_fsm+0x121c>)
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 8002c38:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <main_fsm+0x1210>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10f      	bne.n	8002c60 <main_fsm+0x10e4>
							lcd_ShowIntNum(110, 100, minute_temp, 2, GREEN, BLACK, 24);
 8002c40:	4b55      	ldr	r3, [pc, #340]	; (8002d98 <main_fsm+0x121c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	2318      	movs	r3, #24
 8002c48:	9302      	str	r3, [sp, #8]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2302      	movs	r3, #2
 8002c56:	2164      	movs	r1, #100	; 0x64
 8002c58:	206e      	movs	r0, #110	; 0x6e
 8002c5a:	f7fe f9d1 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002c5e:	e08e      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(110, 100, minute_temp, 2, BLACK, BLACK, 24);
 8002c60:	4b4d      	ldr	r3, [pc, #308]	; (8002d98 <main_fsm+0x121c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	2318      	movs	r3, #24
 8002c68:	9302      	str	r3, [sp, #8]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2302      	movs	r3, #2
 8002c74:	2164      	movs	r1, #100	; 0x64
 8002c76:	206e      	movs	r0, #110	; 0x6e
 8002c78:	f7fe f9c2 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002c7c:	e07f      	b.n	8002d7e <main_fsm+0x1202>
					lcd_ShowStr(20, 50, "ALARM - SECOND", RED, BLUE, 24, 1);
 8002c7e:	2301      	movs	r3, #1
 8002c80:	9302      	str	r3, [sp, #8]
 8002c82:	2318      	movs	r3, #24
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	231f      	movs	r3, #31
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c8e:	4a44      	ldr	r2, [pc, #272]	; (8002da0 <main_fsm+0x1224>)
 8002c90:	2132      	movs	r1, #50	; 0x32
 8002c92:	2014      	movs	r0, #20
 8002c94:	f7fe fbd0 	bl	8001438 <lcd_ShowStr>
					if(button_count[8] == 1){	// if confirm value and change to next time component
 8002c98:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <main_fsm+0x1204>)
 8002c9a:	8a1b      	ldrh	r3, [r3, #16]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d11e      	bne.n	8002cde <main_fsm+0x1162>
						status[2] = AL_INIT;
 8002ca0:	4b3c      	ldr	r3, [pc, #240]	; (8002d94 <main_fsm+0x1218>)
 8002ca2:	220d      	movs	r2, #13
 8002ca4:	609a      	str	r2, [r3, #8]
						status[0] = TIME_DISPLAY;
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <main_fsm+0x1218>)
 8002ca8:	2202      	movs	r2, #2
 8002caa:	601a      	str	r2, [r3, #0]
						second[1] = second_temp;
 8002cac:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <main_fsm+0x1228>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <main_fsm+0x122c>)
 8002cb2:	6053      	str	r3, [r2, #4]
						alarm_on = 1;
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <main_fsm+0x1230>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
						lcd_ShowIntNum(150, 100, second_temp, 2, GREEN, BLACK, 24);
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <main_fsm+0x1228>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	2318      	movs	r3, #24
 8002cc2:	9302      	str	r3, [sp, #8]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	2164      	movs	r1, #100	; 0x64
 8002cd2:	2096      	movs	r0, #150	; 0x96
 8002cd4:	f7fe f994 	bl	8001000 <lcd_ShowIntNum>
						clear_header();
 8002cd8:	f7fe fed4 	bl	8001a84 <clear_header>
					break;
 8002cdc:	e04f      	b.n	8002d7e <main_fsm+0x1202>
						status[2] = AL_SECOND;
 8002cde:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <main_fsm+0x1218>)
 8002ce0:	2214      	movs	r2, #20
 8002ce2:	609a      	str	r2, [r3, #8]
						if(button_count[3] == 1){			// if press ^ -> increase value of day_temp
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <main_fsm+0x1204>)
 8002ce6:	88db      	ldrh	r3, [r3, #6]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d105      	bne.n	8002cf8 <main_fsm+0x117c>
							second_temp = second_temp + 1;
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <main_fsm+0x1228>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <main_fsm+0x1228>)
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e017      	b.n	8002d28 <main_fsm+0x11ac>
						} else if(button_count[3] == 40){	// if press and hold
 8002cf8:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <main_fsm+0x1204>)
 8002cfa:	88db      	ldrh	r3, [r3, #6]
 8002cfc:	2b28      	cmp	r3, #40	; 0x28
 8002cfe:	d103      	bne.n	8002d08 <main_fsm+0x118c>
							flag_timer[4] = 0;
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <main_fsm+0x1208>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	811a      	strh	r2, [r3, #8]
 8002d06:	e00f      	b.n	8002d28 <main_fsm+0x11ac>
						} else if(button_count[3] > 40){
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <main_fsm+0x1204>)
 8002d0a:	88db      	ldrh	r3, [r3, #6]
 8002d0c:	2b28      	cmp	r3, #40	; 0x28
 8002d0e:	d90b      	bls.n	8002d28 <main_fsm+0x11ac>
							if(flag_timer[4] == 1){
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <main_fsm+0x1208>)
 8002d12:	891b      	ldrh	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d107      	bne.n	8002d28 <main_fsm+0x11ac>
								flag_timer[4] = 0;
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <main_fsm+0x1208>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	811a      	strh	r2, [r3, #8]
								second_temp = second_temp + 1;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <main_fsm+0x1228>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <main_fsm+0x1228>)
 8002d26:	6013      	str	r3, [r2, #0]
						if(second_temp >= 60) second_temp = 1;
 8002d28:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <main_fsm+0x1228>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b3b      	cmp	r3, #59	; 0x3b
 8002d2e:	dd02      	ble.n	8002d36 <main_fsm+0x11ba>
 8002d30:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <main_fsm+0x1228>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
						if(toggle_at == 1){
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <main_fsm+0x1210>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10f      	bne.n	8002d5e <main_fsm+0x11e2>
							lcd_ShowIntNum(150, 100, second_temp, 2, GREEN, BLACK, 24);
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <main_fsm+0x1228>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	2318      	movs	r3, #24
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2302      	movs	r3, #2
 8002d54:	2164      	movs	r1, #100	; 0x64
 8002d56:	2096      	movs	r0, #150	; 0x96
 8002d58:	f7fe f952 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002d5c:	e00f      	b.n	8002d7e <main_fsm+0x1202>
							lcd_ShowIntNum(150, 100, second_temp, 2, BLACK, BLACK, 24);
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <main_fsm+0x1228>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	2318      	movs	r3, #24
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2302      	movs	r3, #2
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	2096      	movs	r0, #150	; 0x96
 8002d76:	f7fe f943 	bl	8001000 <lcd_ShowIntNum>
					break;
 8002d7a:	e000      	b.n	8002d7e <main_fsm+0x1202>
					break;
 8002d7c:	bf00      	nop
		break;
 8002d7e:	e053      	b.n	8002e28 <main_fsm+0x12ac>
 8002d80:	200000d8 	.word	0x200000d8
 8002d84:	20000098 	.word	0x20000098
 8002d88:	20000190 	.word	0x20000190
 8002d8c:	200001ac 	.word	0x200001ac
 8002d90:	08008a5c 	.word	0x08008a5c
 8002d94:	200001c4 	.word	0x200001c4
 8002d98:	2000019c 	.word	0x2000019c
 8002d9c:	20000174 	.word	0x20000174
 8002da0:	08008a6c 	.word	0x08008a6c
 8002da4:	20000158 	.word	0x20000158
 8002da8:	2000016c 	.word	0x2000016c
 8002dac:	2000017c 	.word	0x2000017c

	case UART:
		lcd_ShowStr(20, 50, "UART CONFIG", RED, BLUE, 24, 1);
 8002db0:	2301      	movs	r3, #1
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	2318      	movs	r3, #24
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	231f      	movs	r3, #31
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <main_fsm+0x12b4>)
 8002dc2:	2132      	movs	r1, #50	; 0x32
 8002dc4:	2014      	movs	r0, #20
 8002dc6:	f7fe fb37 	bl	8001438 <lcd_ShowStr>
		request_time_uart(&day_temp, &date_temp, &month_temp, &year_temp, &hour_temp, &minute_temp, &second_temp, &error_uart);
 8002dca:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <main_fsm+0x12b8>)
 8002dcc:	9303      	str	r3, [sp, #12]
 8002dce:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <main_fsm+0x12bc>)
 8002dd0:	9302      	str	r3, [sp, #8]
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <main_fsm+0x12c0>)
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <main_fsm+0x12c4>)
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <main_fsm+0x12c8>)
 8002ddc:	4a1a      	ldr	r2, [pc, #104]	; (8002e48 <main_fsm+0x12cc>)
 8002dde:	491b      	ldr	r1, [pc, #108]	; (8002e4c <main_fsm+0x12d0>)
 8002de0:	481b      	ldr	r0, [pc, #108]	; (8002e50 <main_fsm+0x12d4>)
 8002de2:	f000 fb4b 	bl	800347c <request_time_uart>
		if(error_uart != 0){
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <main_fsm+0x12b8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <main_fsm+0x129e>

		} else {
			updateTime_ta_al(hour_temp, minute_temp, second_temp, day_temp, date_temp, month_temp, year_temp);
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <main_fsm+0x12c4>)
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <main_fsm+0x12c0>)
 8002df4:	681c      	ldr	r4, [r3, #0]
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <main_fsm+0x12bc>)
 8002df8:	681d      	ldr	r5, [r3, #0]
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <main_fsm+0x12d4>)
 8002dfc:	681e      	ldr	r6, [r3, #0]
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <main_fsm+0x12d0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a11      	ldr	r2, [pc, #68]	; (8002e48 <main_fsm+0x12cc>)
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	490f      	ldr	r1, [pc, #60]	; (8002e44 <main_fsm+0x12c8>)
 8002e08:	6809      	ldr	r1, [r1, #0]
 8002e0a:	9102      	str	r1, [sp, #8]
 8002e0c:	9201      	str	r2, [sp, #4]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4633      	mov	r3, r6
 8002e12:	462a      	mov	r2, r5
 8002e14:	4621      	mov	r1, r4
 8002e16:	f7fe fe49 	bl	8001aac <updateTime_ta_al>
		}
		clear_header();
 8002e1a:	f7fe fe33 	bl	8001a84 <clear_header>
		status[0] = TIME_DISPLAY;
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <main_fsm+0x12d8>)
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
		break;
 8002e24:	e000      	b.n	8002e28 <main_fsm+0x12ac>

	default:
		break;
 8002e26:	bf00      	nop
	}
}
 8002e28:	bf00      	nop
 8002e2a:	3704      	adds	r7, #4
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e30:	08008a7c 	.word	0x08008a7c
 8002e34:	200001c0 	.word	0x200001c0
 8002e38:	20000158 	.word	0x20000158
 8002e3c:	2000019c 	.word	0x2000019c
 8002e40:	20000190 	.word	0x20000190
 8002e44:	2000015c 	.word	0x2000015c
 8002e48:	20000160 	.word	0x20000160
 8002e4c:	200001a8 	.word	0x200001a8
 8002e50:	20000188 	.word	0x20000188
 8002e54:	200001c4 	.word	0x200001c4

08002e58 <timer_init>:
uint16_t timer_counter[5] = {0, 0, 0, 0, 0};
uint16_t timer_MUL[5] = {0, 0, 0, 0, 0};


#define TIMER_CYCLE_2 1
void timer_init(){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <timer_init+0x10>)
 8002e5e:	f003 fc39 	bl	80066d4 <HAL_TIM_Base_Start_IT>
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002b8 	.word	0x200002b8

08002e6c <setTimer>:

void setTimer(uint16_t duration, int idx){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	80fb      	strh	r3, [r7, #6]
	timer_MUL[idx] = duration/TIMER_CYCLE_2;
 8002e78:	490b      	ldr	r1, [pc, #44]	; (8002ea8 <setTimer+0x3c>)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	timer_counter[idx] = timer_MUL[idx];
 8002e82:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <setTimer+0x3c>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <setTimer+0x40>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flag_timer[idx] = 0;
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <setTimer+0x44>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2100      	movs	r1, #0
 8002e98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	200000b0 	.word	0x200000b0
 8002eac:	200000a4 	.word	0x200000a4
 8002eb0:	20000098 	.word	0x20000098

08002eb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec4:	d12b      	bne.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x6a>
		for (int i = 0; i< 5; i++){
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e025      	b.n	8002f18 <HAL_TIM_PeriodElapsedCallback+0x64>
			if(timer_counter[i] > 0){
 8002ecc:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01c      	beq.n	8002f12 <HAL_TIM_PeriodElapsedCallback+0x5e>
				timer_counter[i]--;
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	4a11      	ldr	r2, [pc, #68]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(timer_counter[i] == 0) {
 8002eec:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_TIM_PeriodElapsedCallback+0x5e>
					flag_timer[i] = 1;
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2101      	movs	r1, #1
 8002efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					timer_counter[i] = timer_MUL[i];
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f0a:	4a08      	ldr	r2, [pc, #32]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i< 5; i++){
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	ddd6      	ble.n	8002ecc <HAL_TIM_PeriodElapsedCallback+0x18>
				}
			}
		}
//		led7_Scan();
	}
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200000a4 	.word	0x200000a4
 8002f30:	20000098 	.word	0x20000098
 8002f34:	200000b0 	.word	0x200000b0

08002f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <MX_SPI1_Init+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f84:	220a      	movs	r2, #10
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f8a:	f002 fea3 	bl	8005cd4 <HAL_SPI_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f94:	f7fe fcac 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000260 	.word	0x20000260
 8002fa0:	40013000 	.word	0x40013000

08002fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_SPI_MspInit+0x84>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12b      	bne.n	800301e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ffe:	2338      	movs	r3, #56	; 0x38
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800300e:	2305      	movs	r3, #5
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4805      	ldr	r0, [pc, #20]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 800301a:	f000 ff43 	bl	8003ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40013000 	.word	0x40013000
 800302c:	40023800 	.word	0x40023800
 8003030:	40020400 	.word	0x40020400

08003034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_MspInit+0x4c>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <HAL_MspInit+0x4c>)
 8003044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003048:	6453      	str	r3, [r2, #68]	; 0x44
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_MspInit+0x4c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_MspInit+0x4c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_MspInit+0x4c>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_MspInit+0x4c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <NMI_Handler+0x4>

0800308a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <HardFault_Handler+0x4>

08003090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <MemManage_Handler+0x4>

08003096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309a:	e7fe      	b.n	800309a <BusFault_Handler+0x4>

0800309c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <UsageFault_Handler+0x4>

080030a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d0:	f000 fd00 	bl	8003ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <TIM2_IRQHandler+0x10>)
 80030de:	f003 fb69 	bl	80067b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200002b8 	.word	0x200002b8

080030ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <USART1_IRQHandler+0x10>)
 80030f2:	f004 f831 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000464 	.word	0x20000464

08003100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <_sbrk+0x5c>)
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <_sbrk+0x60>)
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <_sbrk+0x64>)
 800311e:	4a12      	ldr	r2, [pc, #72]	; (8003168 <_sbrk+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <_sbrk+0x64>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003130:	f004 ff9a 	bl	8008068 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e009      	b.n	8003154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003146:	4b07      	ldr	r3, [pc, #28]	; (8003164 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <_sbrk+0x64>)
 8003150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20020000 	.word	0x20020000
 8003160:	00000400 	.word	0x00000400
 8003164:	200000bc 	.word	0x200000bc
 8003168:	200004c0 	.word	0x200004c0

0800316c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	; (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003196:	f107 0308 	add.w	r3, r7, #8
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a4:	463b      	mov	r3, r7
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <MX_TIM2_Init+0x94>)
 80031ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <MX_TIM2_Init+0x94>)
 80031b6:	f240 3247 	movw	r2, #839	; 0x347
 80031ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <MX_TIM2_Init+0x94>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <MX_TIM2_Init+0x94>)
 80031c4:	2263      	movs	r2, #99	; 0x63
 80031c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <MX_TIM2_Init+0x94>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <MX_TIM2_Init+0x94>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031d4:	4813      	ldr	r0, [pc, #76]	; (8003224 <MX_TIM2_Init+0x94>)
 80031d6:	f003 fa2d 	bl	8006634 <HAL_TIM_Base_Init>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80031e0:	f7fe fb86 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	4619      	mov	r1, r3
 80031f0:	480c      	ldr	r0, [pc, #48]	; (8003224 <MX_TIM2_Init+0x94>)
 80031f2:	f003 fbe7 	bl	80069c4 <HAL_TIM_ConfigClockSource>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80031fc:	f7fe fb78 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003200:	2300      	movs	r3, #0
 8003202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003208:	463b      	mov	r3, r7
 800320a:	4619      	mov	r1, r3
 800320c:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_TIM2_Init+0x94>)
 800320e:	f003 fe03 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003218:	f7fe fb6a 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	200002b8 	.word	0x200002b8

08003228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003238:	d115      	bne.n	8003266 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_TIM_Base_MspInit+0x48>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <HAL_TIM_Base_MspInit+0x48>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_TIM_Base_MspInit+0x48>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	2100      	movs	r1, #0
 800325a:	201c      	movs	r0, #28
 800325c:	f000 fd59 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003260:	201c      	movs	r0, #28
 8003262:	f000 fd72 	bl	8003d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003266:	bf00      	nop
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003278:	2201      	movs	r2, #1
 800327a:	4903      	ldr	r1, [pc, #12]	; (8003288 <uart_init_rs232+0x14>)
 800327c:	4803      	ldr	r0, [pc, #12]	; (800328c <uart_init_rs232+0x18>)
 800327e:	f003 ff3a 	bl	80070f6 <HAL_UART_Receive_IT>
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200000c0 	.word	0x200000c0
 800328c:	20000464 	.word	0x20000464

08003290 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4907      	ldr	r1, [pc, #28]	; (80032b8 <uart_Rs232SendString+0x28>)
 800329c:	4807      	ldr	r0, [pc, #28]	; (80032bc <uart_Rs232SendString+0x2c>)
 800329e:	f004 ff15 	bl	80080cc <siprintf>
 80032a2:	4603      	mov	r3, r0
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	230a      	movs	r3, #10
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <uart_Rs232SendString+0x2c>)
 80032aa:	4805      	ldr	r0, [pc, #20]	; (80032c0 <uart_Rs232SendString+0x30>)
 80032ac:	f003 fe91 	bl	8006fd2 <HAL_UART_Transmit>
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	08008a88 	.word	0x08008a88
 80032bc:	20000300 	.word	0x20000300
 80032c0:	20000464 	.word	0x20000464

080032c4 <HAL_UART_RxCpltCallback>:
uint32_t buffer_tail = 0;
volatile uint8_t uart_data_ready = 0;

static const uint8_t max_retries = 3;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a10      	ldr	r2, [pc, #64]	; (8003314 <HAL_UART_RxCpltCallback+0x50>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d119      	bne.n	800330a <HAL_UART_RxCpltCallback+0x46>
        uart_data_ready = 1;
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_UART_RxCpltCallback+0x54>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
        ring_buffer[buffer_head] = receive_buffer1;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_UART_RxCpltCallback+0x58>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a0f      	ldr	r2, [pc, #60]	; (8003320 <HAL_UART_RxCpltCallback+0x5c>)
 80032e2:	7811      	ldrb	r1, [r2, #0]
 80032e4:	4a0f      	ldr	r2, [pc, #60]	; (8003324 <HAL_UART_RxCpltCallback+0x60>)
 80032e6:	54d1      	strb	r1, [r2, r3]
        buffer_head = (buffer_head + 1) % MAX_BUFFER_SIZE;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_UART_RxCpltCallback+0x58>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_UART_RxCpltCallback+0x58>)
 80032f2:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80032f4:	230a      	movs	r3, #10
 80032f6:	2201      	movs	r2, #1
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <HAL_UART_RxCpltCallback+0x5c>)
 80032fa:	480b      	ldr	r0, [pc, #44]	; (8003328 <HAL_UART_RxCpltCallback+0x64>)
 80032fc:	f003 fe69 	bl	8006fd2 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003300:	2201      	movs	r2, #1
 8003302:	4907      	ldr	r1, [pc, #28]	; (8003320 <HAL_UART_RxCpltCallback+0x5c>)
 8003304:	4808      	ldr	r0, [pc, #32]	; (8003328 <HAL_UART_RxCpltCallback+0x64>)
 8003306:	f003 fef6 	bl	80070f6 <HAL_UART_Receive_IT>
    }
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40011000 	.word	0x40011000
 8003318:	200000cc 	.word	0x200000cc
 800331c:	200000c4 	.word	0x200000c4
 8003320:	200000c0 	.word	0x200000c0
 8003324:	20000364 	.word	0x20000364
 8003328:	20000464 	.word	0x20000464

0800332c <read_buffer>:

static uint8_t read_buffer(void) {
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
    if(buffer_head != buffer_tail) {    //  check buffer empty
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <read_buffer+0x3c>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b0d      	ldr	r3, [pc, #52]	; (800336c <read_buffer+0x40>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d00c      	beq.n	8003358 <read_buffer+0x2c>
        uint8_t data = ring_buffer[buffer_tail];
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <read_buffer+0x40>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <read_buffer+0x44>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	71fb      	strb	r3, [r7, #7]
        buffer_tail = (buffer_tail + 1) % MAX_BUFFER_SIZE;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <read_buffer+0x40>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4a06      	ldr	r2, [pc, #24]	; (800336c <read_buffer+0x40>)
 8003352:	6013      	str	r3, [r2, #0]
        return data;
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	e000      	b.n	800335a <read_buffer+0x2e>
    }
    return 0;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	200000c4 	.word	0x200000c4
 800336c:	200000c8 	.word	0x200000c8
 8003370:	20000364 	.word	0x20000364

08003374 <flush_buffer>:

static void flush_buffer(void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
    buffer_tail = buffer_head;
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <flush_buffer+0x18>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <flush_buffer+0x1c>)
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	200000c4 	.word	0x200000c4
 8003390:	200000c8 	.word	0x200000c8

08003394 <request_time_uart_helper>:

static void request_time_uart_helper(const char *request, const uint8_t min_value, const uint8_t max_value, uint32_t *ret_value, uint8_t *ret_error) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	72fb      	strb	r3, [r7, #11]
 80033a2:	4613      	mov	r3, r2
 80033a4:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_counter = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    uint8_t digit;
    uint8_t has_digit = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	757b      	strb	r3, [r7, #21]
    uint8_t has_buffer_value = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	753b      	strb	r3, [r7, #20]
    uint32_t value = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
    while(retry_counter < max_retries) {
 80033b6:	e053      	b.n	8003460 <request_time_uart_helper+0xcc>
        uart_Rs232SendString((uint8_t *)request);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff ff69 	bl	8003290 <uart_Rs232SendString>
        setTimer(10000, 2);
 80033be:	2102      	movs	r1, #2
 80033c0:	f242 7010 	movw	r0, #10000	; 0x2710
 80033c4:	f7ff fd52 	bl	8002e6c <setTimer>
        while(!flag_timer[2]) {
 80033c8:	e02d      	b.n	8003426 <request_time_uart_helper+0x92>
            digit = read_buffer();
 80033ca:	f7ff ffaf 	bl	800332c <read_buffer>
 80033ce:	4603      	mov	r3, r0
 80033d0:	75bb      	strb	r3, [r7, #22]
            while(digit) {    //  valid value read from buffer
 80033d2:	e022      	b.n	800341a <request_time_uart_helper+0x86>
            	if(digit >= '0' && digit <= '9') {
 80033d4:	7dbb      	ldrb	r3, [r7, #22]
 80033d6:	2b2f      	cmp	r3, #47	; 0x2f
 80033d8:	d915      	bls.n	8003406 <request_time_uart_helper+0x72>
 80033da:	7dbb      	ldrb	r3, [r7, #22]
 80033dc:	2b39      	cmp	r3, #57	; 0x39
 80033de:	d812      	bhi.n	8003406 <request_time_uart_helper+0x72>
            		value = value * 10 + (digit - '0');
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	461a      	mov	r2, r3
 80033ec:	7dbb      	ldrb	r3, [r7, #22]
 80033ee:	4413      	add	r3, r2
 80033f0:	3b30      	subs	r3, #48	; 0x30
 80033f2:	613b      	str	r3, [r7, #16]
                    has_digit = 1;
 80033f4:	2301      	movs	r3, #1
 80033f6:	757b      	strb	r3, [r7, #21]
                    has_buffer_value = 1;
 80033f8:	2301      	movs	r3, #1
 80033fa:	753b      	strb	r3, [r7, #20]
            		has_digit = 0;      //  invalid input like 21A will be discarded
            		flush_buffer();     //  flush buffer of any leftover invalid values
            		has_buffer_value = 1;
            		break;
            	}
            	digit = read_buffer();
 80033fc:	f7ff ff96 	bl	800332c <read_buffer>
 8003400:	4603      	mov	r3, r0
 8003402:	75bb      	strb	r3, [r7, #22]
 8003404:	e009      	b.n	800341a <request_time_uart_helper+0x86>
            		uart_Rs232SendString((uint8_t *)"Invalid input detected!\r\n");
 8003406:	481b      	ldr	r0, [pc, #108]	; (8003474 <request_time_uart_helper+0xe0>)
 8003408:	f7ff ff42 	bl	8003290 <uart_Rs232SendString>
            		has_digit = 0;      //  invalid input like 21A will be discarded
 800340c:	2300      	movs	r3, #0
 800340e:	757b      	strb	r3, [r7, #21]
            		flush_buffer();     //  flush buffer of any leftover invalid values
 8003410:	f7ff ffb0 	bl	8003374 <flush_buffer>
            		has_buffer_value = 1;
 8003414:	2301      	movs	r3, #1
 8003416:	753b      	strb	r3, [r7, #20]
            		break;
 8003418:	e002      	b.n	8003420 <request_time_uart_helper+0x8c>
            while(digit) {    //  valid value read from buffer
 800341a:	7dbb      	ldrb	r3, [r7, #22]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1d9      	bne.n	80033d4 <request_time_uart_helper+0x40>
            }
            if(has_buffer_value) {
 8003420:	7d3b      	ldrb	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <request_time_uart_helper+0x9c>
        while(!flag_timer[2]) {
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <request_time_uart_helper+0xe4>)
 8003428:	889b      	ldrh	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0cd      	beq.n	80033ca <request_time_uart_helper+0x36>
 800342e:	e000      	b.n	8003432 <request_time_uart_helper+0x9e>
            	break;
 8003430:	bf00      	nop
            }
        }

        //  10s timeout reached

        if(has_digit && (value >= min_value || value <= max_value)) {
 8003432:	7d7b      	ldrb	r3, [r7, #21]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00e      	beq.n	8003456 <request_time_uart_helper+0xc2>
 8003438:	7afb      	ldrb	r3, [r7, #11]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	429a      	cmp	r2, r3
 800343e:	d203      	bcs.n	8003448 <request_time_uart_helper+0xb4>
 8003440:	7abb      	ldrb	r3, [r7, #10]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	429a      	cmp	r2, r3
 8003446:	d806      	bhi.n	8003456 <request_time_uart_helper+0xc2>
//        	uart_Rs232SendString("OK\r\n");
        	*ret_value = value;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	601a      	str	r2, [r3, #0]
            *ret_error = 0;
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
            return;
 8003454:	e00b      	b.n	800346e <request_time_uart_helper+0xda>
        }
        retry_counter += 1;     //  timeout or no valid value
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	3301      	adds	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
        has_buffer_value = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	753b      	strb	r3, [r7, #20]
    while(retry_counter < max_retries) {
 8003460:	2203      	movs	r2, #3
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	4293      	cmp	r3, r2
 8003466:	d3a7      	bcc.n	80033b8 <request_time_uart_helper+0x24>
    }
    *ret_error = 1;     //  error after 3 retries without success
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
}
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	08008a9c 	.word	0x08008a9c
 8003478:	20000098 	.word	0x20000098

0800347c <request_time_uart>:
    5: hour request error
    6: minute request error
    7: second request error
*/

void request_time_uart(uint8_t *day, uint8_t *date, uint8_t *month, uint32_t *year, uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *ret_error) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af04      	add	r7, sp, #16
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
    uint8_t temp_error = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	75fb      	strb	r3, [r7, #23]

    lcd_ShowStr(20, 200, "UPDATING DAY...", GREEN, BLACK, 24, 1);
 800348e:	2301      	movs	r3, #1
 8003490:	9302      	str	r3, [sp, #8]
 8003492:	2318      	movs	r3, #24
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800349e:	4aba      	ldr	r2, [pc, #744]	; (8003788 <request_time_uart+0x30c>)
 80034a0:	21c8      	movs	r1, #200	; 0xc8
 80034a2:	2014      	movs	r0, #20
 80034a4:	f7fd ffc8 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Day\r\n", 1, 7, day, &temp_error);
 80034a8:	f107 0317 	add.w	r3, r7, #23
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2207      	movs	r2, #7
 80034b2:	2101      	movs	r1, #1
 80034b4:	48b5      	ldr	r0, [pc, #724]	; (800378c <request_time_uart+0x310>)
 80034b6:	f7ff ff6d 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01c      	beq.n	80034fa <request_time_uart+0x7e>
    	lcd_ShowStr(20, 200, "UPDATING DAY...", BLACK, BLACK, 24, 1);
 80034c0:	2301      	movs	r3, #1
 80034c2:	9302      	str	r3, [sp, #8]
 80034c4:	2318      	movs	r3, #24
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	4aae      	ldr	r2, [pc, #696]	; (8003788 <request_time_uart+0x30c>)
 80034d0:	21c8      	movs	r1, #200	; 0xc8
 80034d2:	2014      	movs	r0, #20
 80034d4:	f7fd ffb0 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET DAY ERR", RED, BLACK, 24, 1);
 80034d8:	2301      	movs	r3, #1
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2318      	movs	r3, #24
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2300      	movs	r3, #0
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034e8:	4aa9      	ldr	r2, [pc, #676]	; (8003790 <request_time_uart+0x314>)
 80034ea:	21c8      	movs	r1, #200	; 0xc8
 80034ec:	2014      	movs	r0, #20
 80034ee:	f7fd ffa3 	bl	8001438 <lcd_ShowStr>
        *ret_error = 1;
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
        return;
 80034f8:	e1ac      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING DAY...", BLACK, BLACK, 24, 1);
 80034fa:	2301      	movs	r3, #1
 80034fc:	9302      	str	r3, [sp, #8]
 80034fe:	2318      	movs	r3, #24
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2300      	movs	r3, #0
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2300      	movs	r3, #0
 8003508:	4a9f      	ldr	r2, [pc, #636]	; (8003788 <request_time_uart+0x30c>)
 800350a:	21c8      	movs	r1, #200	; 0xc8
 800350c:	2014      	movs	r0, #20
 800350e:	f7fd ff93 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING DATE...", GREEN, BLACK, 24, 1);
 8003512:	2301      	movs	r3, #1
 8003514:	9302      	str	r3, [sp, #8]
 8003516:	2318      	movs	r3, #24
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2300      	movs	r3, #0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003522:	4a9c      	ldr	r2, [pc, #624]	; (8003794 <request_time_uart+0x318>)
 8003524:	21c8      	movs	r1, #200	; 0xc8
 8003526:	2014      	movs	r0, #20
 8003528:	f7fd ff86 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Date\r\n", 1, 31, date, &temp_error);
 800352c:	f107 0317 	add.w	r3, r7, #23
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	221f      	movs	r2, #31
 8003536:	2101      	movs	r1, #1
 8003538:	4897      	ldr	r0, [pc, #604]	; (8003798 <request_time_uart+0x31c>)
 800353a:	f7ff ff2b 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <request_time_uart+0x102>
    	lcd_ShowStr(20, 200, "UPDATING DATE...", BLACK, BLACK, 24, 1);
 8003544:	2301      	movs	r3, #1
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	2318      	movs	r3, #24
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	2300      	movs	r3, #0
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2300      	movs	r3, #0
 8003552:	4a90      	ldr	r2, [pc, #576]	; (8003794 <request_time_uart+0x318>)
 8003554:	21c8      	movs	r1, #200	; 0xc8
 8003556:	2014      	movs	r0, #20
 8003558:	f7fd ff6e 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET DATE ERR", RED, BLACK, 24, 1);
 800355c:	2301      	movs	r3, #1
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	2318      	movs	r3, #24
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	2300      	movs	r3, #0
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800356c:	4a8b      	ldr	r2, [pc, #556]	; (800379c <request_time_uart+0x320>)
 800356e:	21c8      	movs	r1, #200	; 0xc8
 8003570:	2014      	movs	r0, #20
 8003572:	f7fd ff61 	bl	8001438 <lcd_ShowStr>
        *ret_error = 2;
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
        return;
 800357c:	e16a      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING DATE...", BLACK, BLACK, 24, 1);
 800357e:	2301      	movs	r3, #1
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	2318      	movs	r3, #24
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	2300      	movs	r3, #0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2300      	movs	r3, #0
 800358c:	4a81      	ldr	r2, [pc, #516]	; (8003794 <request_time_uart+0x318>)
 800358e:	21c8      	movs	r1, #200	; 0xc8
 8003590:	2014      	movs	r0, #20
 8003592:	f7fd ff51 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING MONTH...", GREEN, BLACK, 24, 1);
 8003596:	2301      	movs	r3, #1
 8003598:	9302      	str	r3, [sp, #8]
 800359a:	2318      	movs	r3, #24
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035a6:	4a7e      	ldr	r2, [pc, #504]	; (80037a0 <request_time_uart+0x324>)
 80035a8:	21c8      	movs	r1, #200	; 0xc8
 80035aa:	2014      	movs	r0, #20
 80035ac:	f7fd ff44 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Month\r\n", 1, 12, month, &temp_error);
 80035b0:	f107 0317 	add.w	r3, r7, #23
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	220c      	movs	r2, #12
 80035ba:	2101      	movs	r1, #1
 80035bc:	4879      	ldr	r0, [pc, #484]	; (80037a4 <request_time_uart+0x328>)
 80035be:	f7ff fee9 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <request_time_uart+0x184>
    	lcd_ShowStr(20, 200, "UPDATING MONTH...", BLACK, BLACK, 24, 1);
 80035c8:	2301      	movs	r3, #1
 80035ca:	9302      	str	r3, [sp, #8]
 80035cc:	2318      	movs	r3, #24
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	4a72      	ldr	r2, [pc, #456]	; (80037a0 <request_time_uart+0x324>)
 80035d8:	21c8      	movs	r1, #200	; 0xc8
 80035da:	2014      	movs	r0, #20
 80035dc:	f7fd ff2c 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET MONTH ERR", BLACK, BLACK, 24, 1);
 80035e0:	2301      	movs	r3, #1
 80035e2:	9302      	str	r3, [sp, #8]
 80035e4:	2318      	movs	r3, #24
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	2300      	movs	r3, #0
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <request_time_uart+0x32c>)
 80035f0:	21c8      	movs	r1, #200	; 0xc8
 80035f2:	2014      	movs	r0, #20
 80035f4:	f7fd ff20 	bl	8001438 <lcd_ShowStr>
        *ret_error = 3;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	2203      	movs	r2, #3
 80035fc:	701a      	strb	r2, [r3, #0]
        return;
 80035fe:	e129      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING MONTH...", BLACK, BLACK, 24, 1);
 8003600:	2301      	movs	r3, #1
 8003602:	9302      	str	r3, [sp, #8]
 8003604:	2318      	movs	r3, #24
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	2300      	movs	r3, #0
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2300      	movs	r3, #0
 800360e:	4a64      	ldr	r2, [pc, #400]	; (80037a0 <request_time_uart+0x324>)
 8003610:	21c8      	movs	r1, #200	; 0xc8
 8003612:	2014      	movs	r0, #20
 8003614:	f7fd ff10 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING YEAR...", GREEN, BLACK, 24, 1);
 8003618:	2301      	movs	r3, #1
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	2318      	movs	r3, #24
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003628:	4a60      	ldr	r2, [pc, #384]	; (80037ac <request_time_uart+0x330>)
 800362a:	21c8      	movs	r1, #200	; 0xc8
 800362c:	2014      	movs	r0, #20
 800362e:	f7fd ff03 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Year\r\n", 0, 0xFFFFFFFF, year, &temp_error);
 8003632:	f107 0317 	add.w	r3, r7, #23
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	2100      	movs	r1, #0
 800363e:	485c      	ldr	r0, [pc, #368]	; (80037b0 <request_time_uart+0x334>)
 8003640:	f7ff fea8 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d01b      	beq.n	8003682 <request_time_uart+0x206>
    	lcd_ShowStr(20, 200, "UPDATING YEAR...", BLACK, BLACK, 24, 1);
 800364a:	2301      	movs	r3, #1
 800364c:	9302      	str	r3, [sp, #8]
 800364e:	2318      	movs	r3, #24
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2300      	movs	r3, #0
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	4a54      	ldr	r2, [pc, #336]	; (80037ac <request_time_uart+0x330>)
 800365a:	21c8      	movs	r1, #200	; 0xc8
 800365c:	2014      	movs	r0, #20
 800365e:	f7fd feeb 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET MONTH ERR", BLACK, BLACK, 24, 1);
 8003662:	2301      	movs	r3, #1
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	2318      	movs	r3, #24
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2300      	movs	r3, #0
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2300      	movs	r3, #0
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <request_time_uart+0x32c>)
 8003672:	21c8      	movs	r1, #200	; 0xc8
 8003674:	2014      	movs	r0, #20
 8003676:	f7fd fedf 	bl	8001438 <lcd_ShowStr>
        *ret_error = 4;
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	2204      	movs	r2, #4
 800367e:	701a      	strb	r2, [r3, #0]
        return;
 8003680:	e0e8      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING YEAR...", BLACK, BLACK, 24, 1);
 8003682:	2301      	movs	r3, #1
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	2318      	movs	r3, #24
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	2300      	movs	r3, #0
 8003690:	4a46      	ldr	r2, [pc, #280]	; (80037ac <request_time_uart+0x330>)
 8003692:	21c8      	movs	r1, #200	; 0xc8
 8003694:	2014      	movs	r0, #20
 8003696:	f7fd fecf 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING HOUR...", GREEN, BLACK, 24, 1);
 800369a:	2301      	movs	r3, #1
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	2318      	movs	r3, #24
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036aa:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <request_time_uart+0x338>)
 80036ac:	21c8      	movs	r1, #200	; 0xc8
 80036ae:	2014      	movs	r0, #20
 80036b0:	f7fd fec2 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Hour\r\n", 0, 23, hour, &temp_error);
 80036b4:	f107 0317 	add.w	r3, r7, #23
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2217      	movs	r2, #23
 80036be:	2100      	movs	r1, #0
 80036c0:	483d      	ldr	r0, [pc, #244]	; (80037b8 <request_time_uart+0x33c>)
 80036c2:	f7ff fe67 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01b      	beq.n	8003704 <request_time_uart+0x288>
    	lcd_ShowStr(20, 200, "UPDATING HOUR...", BLACK, BLACK, 24, 1);
 80036cc:	2301      	movs	r3, #1
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	2318      	movs	r3, #24
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	2300      	movs	r3, #0
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2300      	movs	r3, #0
 80036da:	4a36      	ldr	r2, [pc, #216]	; (80037b4 <request_time_uart+0x338>)
 80036dc:	21c8      	movs	r1, #200	; 0xc8
 80036de:	2014      	movs	r0, #20
 80036e0:	f7fd feaa 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET HOUR ERR", BLACK, BLACK, 24, 1);
 80036e4:	2301      	movs	r3, #1
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	2318      	movs	r3, #24
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2300      	movs	r3, #0
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <request_time_uart+0x340>)
 80036f4:	21c8      	movs	r1, #200	; 0xc8
 80036f6:	2014      	movs	r0, #20
 80036f8:	f7fd fe9e 	bl	8001438 <lcd_ShowStr>
        *ret_error = 5;
 80036fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fe:	2205      	movs	r2, #5
 8003700:	701a      	strb	r2, [r3, #0]
        return;
 8003702:	e0a7      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING HOUR...", BLACK, BLACK, 24, 1);
 8003704:	2301      	movs	r3, #1
 8003706:	9302      	str	r3, [sp, #8]
 8003708:	2318      	movs	r3, #24
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	2300      	movs	r3, #0
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <request_time_uart+0x338>)
 8003714:	21c8      	movs	r1, #200	; 0xc8
 8003716:	2014      	movs	r0, #20
 8003718:	f7fd fe8e 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING MIN...", GREEN, BLACK, 24, 1);
 800371c:	2301      	movs	r3, #1
 800371e:	9302      	str	r3, [sp, #8]
 8003720:	2318      	movs	r3, #24
 8003722:	9301      	str	r3, [sp, #4]
 8003724:	2300      	movs	r3, #0
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800372c:	4a24      	ldr	r2, [pc, #144]	; (80037c0 <request_time_uart+0x344>)
 800372e:	21c8      	movs	r1, #200	; 0xc8
 8003730:	2014      	movs	r0, #20
 8003732:	f7fd fe81 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Minute\r\n", 0, 59, minute, &temp_error);
 8003736:	f107 0317 	add.w	r3, r7, #23
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	223b      	movs	r2, #59	; 0x3b
 8003740:	2100      	movs	r1, #0
 8003742:	4820      	ldr	r0, [pc, #128]	; (80037c4 <request_time_uart+0x348>)
 8003744:	f7ff fe26 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d03e      	beq.n	80037cc <request_time_uart+0x350>
    	lcd_ShowStr(20, 200, "UPDATING MIN...", BLACK, BLACK, 24, 1);
 800374e:	2301      	movs	r3, #1
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	2318      	movs	r3, #24
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	2300      	movs	r3, #0
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <request_time_uart+0x344>)
 800375e:	21c8      	movs	r1, #200	; 0xc8
 8003760:	2014      	movs	r0, #20
 8003762:	f7fd fe69 	bl	8001438 <lcd_ShowStr>
    	lcd_ShowStr(20, 200, "SET MIN ERR", BLACK, BLACK, 24, 1);
 8003766:	2301      	movs	r3, #1
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	2318      	movs	r3, #24
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2300      	movs	r3, #0
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <request_time_uart+0x34c>)
 8003776:	21c8      	movs	r1, #200	; 0xc8
 8003778:	2014      	movs	r0, #20
 800377a:	f7fd fe5d 	bl	8001438 <lcd_ShowStr>
        *ret_error = 6;
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2206      	movs	r2, #6
 8003782:	701a      	strb	r2, [r3, #0]
        return;
 8003784:	e066      	b.n	8003854 <request_time_uart+0x3d8>
 8003786:	bf00      	nop
 8003788:	08008ab8 	.word	0x08008ab8
 800378c:	08008ac8 	.word	0x08008ac8
 8003790:	08008ad0 	.word	0x08008ad0
 8003794:	08008adc 	.word	0x08008adc
 8003798:	08008af0 	.word	0x08008af0
 800379c:	08008af8 	.word	0x08008af8
 80037a0:	08008b08 	.word	0x08008b08
 80037a4:	08008b1c 	.word	0x08008b1c
 80037a8:	08008b24 	.word	0x08008b24
 80037ac:	08008b34 	.word	0x08008b34
 80037b0:	08008b48 	.word	0x08008b48
 80037b4:	08008b50 	.word	0x08008b50
 80037b8:	08008b64 	.word	0x08008b64
 80037bc:	08008b6c 	.word	0x08008b6c
 80037c0:	08008b7c 	.word	0x08008b7c
 80037c4:	08008b8c 	.word	0x08008b8c
 80037c8:	08008b98 	.word	0x08008b98
    }
    lcd_ShowStr(20, 200, "UPDATING MIN...", BLACK, BLACK, 24, 1);
 80037cc:	2301      	movs	r3, #1
 80037ce:	9302      	str	r3, [sp, #8]
 80037d0:	2318      	movs	r3, #24
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	4a20      	ldr	r2, [pc, #128]	; (800385c <request_time_uart+0x3e0>)
 80037dc:	21c8      	movs	r1, #200	; 0xc8
 80037de:	2014      	movs	r0, #20
 80037e0:	f7fd fe2a 	bl	8001438 <lcd_ShowStr>

    lcd_ShowStr(20, 200, "UPDATING SEC...", GREEN, BLACK, 24, 1);
 80037e4:	2301      	movs	r3, #1
 80037e6:	9302      	str	r3, [sp, #8]
 80037e8:	2318      	movs	r3, #24
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80037f4:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <request_time_uart+0x3e4>)
 80037f6:	21c8      	movs	r1, #200	; 0xc8
 80037f8:	2014      	movs	r0, #20
 80037fa:	f7fd fe1d 	bl	8001438 <lcd_ShowStr>
    request_time_uart_helper("Second\r\n", 0, 59, second, &temp_error);
 80037fe:	f107 0317 	add.w	r3, r7, #23
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	223b      	movs	r2, #59	; 0x3b
 8003808:	2100      	movs	r1, #0
 800380a:	4816      	ldr	r0, [pc, #88]	; (8003864 <request_time_uart+0x3e8>)
 800380c:	f7ff fdc2 	bl	8003394 <request_time_uart_helper>
    if(temp_error) {
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00f      	beq.n	8003836 <request_time_uart+0x3ba>
    	lcd_ShowStr(20, 200, "SET SEC ERR", BLACK, BLACK, 24, 1);
 8003816:	2301      	movs	r3, #1
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	2318      	movs	r3, #24
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	4a10      	ldr	r2, [pc, #64]	; (8003868 <request_time_uart+0x3ec>)
 8003826:	21c8      	movs	r1, #200	; 0xc8
 8003828:	2014      	movs	r0, #20
 800382a:	f7fd fe05 	bl	8001438 <lcd_ShowStr>
        *ret_error = 7;
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	2207      	movs	r2, #7
 8003832:	701a      	strb	r2, [r3, #0]
        return;
 8003834:	e00e      	b.n	8003854 <request_time_uart+0x3d8>
    }
    lcd_ShowStr(20, 200, "UPDATING SEC...", BLACK, BLACK, 24, 1);
 8003836:	2301      	movs	r3, #1
 8003838:	9302      	str	r3, [sp, #8]
 800383a:	2318      	movs	r3, #24
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2300      	movs	r3, #0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	4a06      	ldr	r2, [pc, #24]	; (8003860 <request_time_uart+0x3e4>)
 8003846:	21c8      	movs	r1, #200	; 0xc8
 8003848:	2014      	movs	r0, #20
 800384a:	f7fd fdf5 	bl	8001438 <lcd_ShowStr>
    *ret_error = 0;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
//    uart_Rs232SendString(()sprintf("Send %d, %d / %d / %d, %d : %d : %d\r\n", *day, *date, *month, *year, *hour, *minute, *second));
}
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	08008b7c 	.word	0x08008b7c
 8003860:	08008ba4 	.word	0x08008ba4
 8003864:	08008bb4 	.word	0x08008bb4
 8003868:	08008bc0 	.word	0x08008bc0

0800386c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <MX_USART1_UART_Init+0x50>)
 8003874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800387c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003880:	2200      	movs	r2, #0
 8003882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003886:	2200      	movs	r2, #0
 8003888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 800388c:	2200      	movs	r2, #0
 800388e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003892:	220c      	movs	r2, #12
 8003894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038a2:	4805      	ldr	r0, [pc, #20]	; (80038b8 <MX_USART1_UART_Init+0x4c>)
 80038a4:	f003 fb48 	bl	8006f38 <HAL_UART_Init>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038ae:	f7fe f81f 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000464 	.word	0x20000464
 80038bc:	40011000 	.word	0x40011000

080038c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_UART_MspInit+0x94>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d134      	bne.n	800394c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <HAL_UART_MspInit+0x98>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <HAL_UART_MspInit+0x98>)
 80038ec:	f043 0310 	orr.w	r3, r3, #16
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_UART_MspInit+0x98>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <HAL_UART_MspInit+0x98>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a14      	ldr	r2, [pc, #80]	; (8003958 <HAL_UART_MspInit+0x98>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_UART_MspInit+0x98>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800391a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800391e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800392c:	2307      	movs	r3, #7
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4619      	mov	r1, r3
 8003936:	4809      	ldr	r0, [pc, #36]	; (800395c <HAL_UART_MspInit+0x9c>)
 8003938:	f000 fab4 	bl	8003ea4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2100      	movs	r1, #0
 8003940:	2025      	movs	r0, #37	; 0x25
 8003942:	f000 f9e6 	bl	8003d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003946:	2025      	movs	r0, #37	; 0x25
 8003948:	f000 f9ff 	bl	8003d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800394c:	bf00      	nop
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40011000 	.word	0x40011000
 8003958:	40023800 	.word	0x40023800
 800395c:	40020000 	.word	0x40020000

08003960 <BCD2DEC>:
 */


#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4413      	add	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4413      	add	r3, r2
 8003984:	b2db      	uxtb	r3, r3
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
	...

08003994 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <DEC2BCD+0x44>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	b258      	sxtb	r0, r3
 80039ae:	79fa      	ldrb	r2, [r7, #7]
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <DEC2BCD+0x44>)
 80039b2:	fba3 1302 	umull	r1, r3, r3, r2
 80039b6:	08d9      	lsrs	r1, r3, #3
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	4303      	orrs	r3, r0
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	cccccccd 	.word	0xcccccccd

080039dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80039dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039e0:	480d      	ldr	r0, [pc, #52]	; (8003a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039e2:	490e      	ldr	r1, [pc, #56]	; (8003a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039e8:	e002      	b.n	80039f0 <LoopCopyDataInit>

080039ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ee:	3304      	adds	r3, #4

080039f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039f4:	d3f9      	bcc.n	80039ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039f6:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039f8:	4c0b      	ldr	r4, [pc, #44]	; (8003a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039fc:	e001      	b.n	8003a02 <LoopFillZerobss>

080039fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a00:	3204      	adds	r2, #4

08003a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a04:	d3fb      	bcc.n	80039fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a06:	f7ff fbb1 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a0a:	f004 fb33 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a0e:	f7fd fd77 	bl	8001500 <main>
  bx  lr    
 8003a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003a20:	0800bba8 	.word	0x0800bba8
  ldr r2, =_sbss
 8003a24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003a28:	200004bc 	.word	0x200004bc

08003a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a2c:	e7fe      	b.n	8003a2c <ADC_IRQHandler>
	...

08003a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <HAL_Init+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <HAL_Init+0x40>)
 8003a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_Init+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <HAL_Init+0x40>)
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_Init+0x40>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_Init+0x40>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f000 f94f 	bl	8003cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5e:	200f      	movs	r0, #15
 8003a60:	f000 f808 	bl	8003a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a64:	f7ff fae6 	bl	8003034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023c00 	.word	0x40023c00

08003a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_InitTick+0x54>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_InitTick+0x58>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	4619      	mov	r1, r3
 8003a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f967 	bl	8003d66 <HAL_SYSTICK_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e00e      	b.n	8003ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b0f      	cmp	r3, #15
 8003aa6:	d80a      	bhi.n	8003abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	f000 f92f 	bl	8003d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ab4:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <HAL_InitTick+0x5c>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000000 	.word	0x20000000
 8003acc:	20000008 	.word	0x20000008
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ad8:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_IncTick+0x20>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_IncTick+0x24>)
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000008 	.word	0x20000008
 8003af8:	200004a8 	.word	0x200004a8

08003afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  return uwTick;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <HAL_GetTick+0x14>)
 8003b02:	681b      	ldr	r3, [r3, #0]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200004a8 	.word	0x200004a8

08003b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b1c:	f7ff ffee 	bl	8003afc <HAL_GetTick>
 8003b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d005      	beq.n	8003b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_Delay+0x44>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b3a:	bf00      	nop
 8003b3c:	f7ff ffde 	bl	8003afc <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d8f7      	bhi.n	8003b3c <HAL_Delay+0x28>
  {
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000008 	.word	0x20000008

08003b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	60d3      	str	r3, [r2, #12]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00

08003ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba8:	4b04      	ldr	r3, [pc, #16]	; (8003bbc <__NVIC_GetPriorityGrouping+0x18>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	f003 0307 	and.w	r3, r3, #7
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0b      	blt.n	8003bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <__NVIC_EnableIRQ+0x38>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
	...

08003cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc8:	d301      	bcc.n	8003cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <SysTick_Config+0x40>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	f7ff ff8e 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce0:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <SysTick_Config+0x40>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	e000e010 	.word	0xe000e010

08003cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ff29 	bl	8003b5c <__NVIC_SetPriorityGrouping>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d24:	f7ff ff3e 	bl	8003ba4 <__NVIC_GetPriorityGrouping>
 8003d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff8e 	bl	8003c50 <NVIC_EncodePriority>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff5d 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ff31 	bl	8003bc0 <__NVIC_EnableIRQ>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff ffa2 	bl	8003cb8 <SysTick_Config>
 8003d74:	4603      	mov	r3, r0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d8c:	f7ff feb6 	bl	8003afc <HAL_GetTick>
 8003d90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d008      	beq.n	8003db0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e052      	b.n	8003e56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0216 	bic.w	r2, r2, #22
 8003dbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_DMA_Abort+0x62>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0208 	bic.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e00:	e013      	b.n	8003e2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e02:	f7ff fe7b 	bl	8003afc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d90c      	bls.n	8003e2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e015      	b.n	8003e56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e4      	bne.n	8003e02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3c:	223f      	movs	r2, #63	; 0x3f
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d004      	beq.n	8003e7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e00c      	b.n	8003e96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2205      	movs	r2, #5
 8003e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e16b      	b.n	8004198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	f040 815a 	bne.w	8004192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d005      	beq.n	8003ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d130      	bne.n	8003f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	091b      	lsrs	r3, r3, #4
 8003f42:	f003 0201 	and.w	r2, r3, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d017      	beq.n	8003f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d123      	bne.n	8003fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	08da      	lsrs	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3208      	adds	r2, #8
 8003fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	08da      	lsrs	r2, r3, #3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3208      	adds	r2, #8
 8003fe2:	69b9      	ldr	r1, [r7, #24]
 8003fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0203 	and.w	r2, r3, #3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80b4 	beq.w	8004192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b60      	ldr	r3, [pc, #384]	; (80041b0 <HAL_GPIO_Init+0x30c>)
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4a5f      	ldr	r2, [pc, #380]	; (80041b0 <HAL_GPIO_Init+0x30c>)
 8004034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004038:	6453      	str	r3, [r2, #68]	; 0x44
 800403a:	4b5d      	ldr	r3, [pc, #372]	; (80041b0 <HAL_GPIO_Init+0x30c>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004046:	4a5b      	ldr	r2, [pc, #364]	; (80041b4 <HAL_GPIO_Init+0x310>)
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	3302      	adds	r3, #2
 800404e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	220f      	movs	r2, #15
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a52      	ldr	r2, [pc, #328]	; (80041b8 <HAL_GPIO_Init+0x314>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <HAL_GPIO_Init+0x226>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a51      	ldr	r2, [pc, #324]	; (80041bc <HAL_GPIO_Init+0x318>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d025      	beq.n	80040c6 <HAL_GPIO_Init+0x222>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_GPIO_Init+0x31c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <HAL_GPIO_Init+0x21e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4f      	ldr	r2, [pc, #316]	; (80041c4 <HAL_GPIO_Init+0x320>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_Init+0x21a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4e      	ldr	r2, [pc, #312]	; (80041c8 <HAL_GPIO_Init+0x324>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_Init+0x216>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4d      	ldr	r2, [pc, #308]	; (80041cc <HAL_GPIO_Init+0x328>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_Init+0x212>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_Init+0x32c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_Init+0x20e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4b      	ldr	r2, [pc, #300]	; (80041d4 <HAL_GPIO_Init+0x330>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_Init+0x20a>
 80040aa:	2307      	movs	r3, #7
 80040ac:	e00e      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040ae:	2308      	movs	r3, #8
 80040b0:	e00c      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040b2:	2306      	movs	r3, #6
 80040b4:	e00a      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040b6:	2305      	movs	r3, #5
 80040b8:	e008      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040ba:	2304      	movs	r3, #4
 80040bc:	e006      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040be:	2303      	movs	r3, #3
 80040c0:	e004      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e002      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_GPIO_Init+0x228>
 80040ca:	2300      	movs	r3, #0
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	f002 0203 	and.w	r2, r2, #3
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	4093      	lsls	r3, r2
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040dc:	4935      	ldr	r1, [pc, #212]	; (80041b4 <HAL_GPIO_Init+0x310>)
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ea:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <HAL_GPIO_Init+0x334>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800410e:	4a32      	ldr	r2, [pc, #200]	; (80041d8 <HAL_GPIO_Init+0x334>)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004114:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_GPIO_Init+0x334>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	43db      	mvns	r3, r3
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4013      	ands	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004138:	4a27      	ldr	r2, [pc, #156]	; (80041d8 <HAL_GPIO_Init+0x334>)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_GPIO_Init+0x334>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <HAL_GPIO_Init+0x334>)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_GPIO_Init+0x334>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800418c:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_GPIO_Init+0x334>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	3301      	adds	r3, #1
 8004196:	61fb      	str	r3, [r7, #28]
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b0f      	cmp	r3, #15
 800419c:	f67f ae90 	bls.w	8003ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	3724      	adds	r7, #36	; 0x24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40013800 	.word	0x40013800
 80041b8:	40020000 	.word	0x40020000
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020800 	.word	0x40020800
 80041c4:	40020c00 	.word	0x40020c00
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40021400 	.word	0x40021400
 80041d0:	40021800 	.word	0x40021800
 80041d4:	40021c00 	.word	0x40021c00
 80041d8:	40013c00 	.word	0x40013c00

080041dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
 80041e8:	4613      	mov	r3, r2
 80041ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041ec:	787b      	ldrb	r3, [r7, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d003      	beq.n	80041fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041f8:	e003      	b.n	8004202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041fa:	887b      	ldrh	r3, [r7, #2]
 80041fc:	041a      	lsls	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	619a      	str	r2, [r3, #24]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e12b      	b.n	800447a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc fcde 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004274:	f001 fd06 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8004278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	4a81      	ldr	r2, [pc, #516]	; (8004484 <HAL_I2C_Init+0x274>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d807      	bhi.n	8004294 <HAL_I2C_Init+0x84>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a80      	ldr	r2, [pc, #512]	; (8004488 <HAL_I2C_Init+0x278>)
 8004288:	4293      	cmp	r3, r2
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	e006      	b.n	80042a2 <HAL_I2C_Init+0x92>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a7d      	ldr	r2, [pc, #500]	; (800448c <HAL_I2C_Init+0x27c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	bf94      	ite	ls
 800429c:	2301      	movls	r3, #1
 800429e:	2300      	movhi	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0e7      	b.n	800447a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4a78      	ldr	r2, [pc, #480]	; (8004490 <HAL_I2C_Init+0x280>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0c9b      	lsrs	r3, r3, #18
 80042b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4a6a      	ldr	r2, [pc, #424]	; (8004484 <HAL_I2C_Init+0x274>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d802      	bhi.n	80042e4 <HAL_I2C_Init+0xd4>
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3301      	adds	r3, #1
 80042e2:	e009      	b.n	80042f8 <HAL_I2C_Init+0xe8>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	4a69      	ldr	r2, [pc, #420]	; (8004494 <HAL_I2C_Init+0x284>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	3301      	adds	r3, #1
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800430a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	495c      	ldr	r1, [pc, #368]	; (8004484 <HAL_I2C_Init+0x274>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d819      	bhi.n	800434c <HAL_I2C_Init+0x13c>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1e59      	subs	r1, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fbb1 f3f3 	udiv	r3, r1, r3
 8004326:	1c59      	adds	r1, r3, #1
 8004328:	f640 73fc 	movw	r3, #4092	; 0xffc
 800432c:	400b      	ands	r3, r1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_I2C_Init+0x138>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1e59      	subs	r1, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	e051      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 8004348:	2304      	movs	r3, #4
 800434a:	e04f      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <HAL_I2C_Init+0x168>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e58      	subs	r0, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	440b      	add	r3, r1
 8004362:	fbb0 f3f3 	udiv	r3, r0, r3
 8004366:	3301      	adds	r3, #1
 8004368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf0c      	ite	eq
 8004370:	2301      	moveq	r3, #1
 8004372:	2300      	movne	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	e012      	b.n	800439e <HAL_I2C_Init+0x18e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e58      	subs	r0, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	0099      	lsls	r1, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	fbb0 f3f3 	udiv	r3, r0, r3
 800438e:	3301      	adds	r3, #1
 8004390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf0c      	ite	eq
 8004398:	2301      	moveq	r3, #1
 800439a:	2300      	movne	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Init+0x196>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e022      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10e      	bne.n	80043cc <HAL_I2C_Init+0x1bc>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1e58      	subs	r0, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6859      	ldr	r1, [r3, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	440b      	add	r3, r1
 80043bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ca:	e00f      	b.n	80043ec <HAL_I2C_Init+0x1dc>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e58      	subs	r0, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6859      	ldr	r1, [r3, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	0099      	lsls	r1, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e2:	3301      	adds	r3, #1
 80043e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	6809      	ldr	r1, [r1, #0]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69da      	ldr	r2, [r3, #28]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800441a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6911      	ldr	r1, [r2, #16]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	68d2      	ldr	r2, [r2, #12]
 8004426:	4311      	orrs	r1, r2
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	430b      	orrs	r3, r1
 800442e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	000186a0 	.word	0x000186a0
 8004488:	001e847f 	.word	0x001e847f
 800448c:	003d08ff 	.word	0x003d08ff
 8004490:	431bde83 	.word	0x431bde83
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	817b      	strh	r3, [r7, #10]
 80044aa:	460b      	mov	r3, r1
 80044ac:	813b      	strh	r3, [r7, #8]
 80044ae:	4613      	mov	r3, r2
 80044b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044b2:	f7ff fb23 	bl	8003afc <HAL_GetTick>
 80044b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	f040 80d9 	bne.w	8004678 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2319      	movs	r3, #25
 80044cc:	2201      	movs	r2, #1
 80044ce:	496d      	ldr	r1, [pc, #436]	; (8004684 <HAL_I2C_Mem_Write+0x1ec>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fdad 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
 80044de:	e0cc      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Mem_Write+0x56>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e0c5      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b01      	cmp	r3, #1
 8004502:	d007      	beq.n	8004514 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	; 0x21
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a4d      	ldr	r2, [pc, #308]	; (8004688 <HAL_I2C_Mem_Write+0x1f0>)
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004556:	88f8      	ldrh	r0, [r7, #6]
 8004558:	893a      	ldrh	r2, [r7, #8]
 800455a:	8979      	ldrh	r1, [r7, #10]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fbe4 	bl	8004d34 <I2C_RequestMemoryWrite>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d052      	beq.n	8004618 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e081      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fe2e 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00d      	beq.n	80045a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	2b04      	cmp	r3, #4
 800458c:	d107      	bne.n	800459e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06b      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d11b      	bne.n	8004618 <HAL_I2C_Mem_Write+0x180>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1aa      	bne.n	8004576 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fe1a 	bl	800525e <I2C_WaitOnBTFFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00d      	beq.n	800464c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b04      	cmp	r3, #4
 8004636:	d107      	bne.n	8004648 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e016      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	00100002 	.word	0x00100002
 8004688:	ffff0000 	.word	0xffff0000

0800468c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08c      	sub	sp, #48	; 0x30
 8004690:	af02      	add	r7, sp, #8
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	4608      	mov	r0, r1
 8004696:	4611      	mov	r1, r2
 8004698:	461a      	mov	r2, r3
 800469a:	4603      	mov	r3, r0
 800469c:	817b      	strh	r3, [r7, #10]
 800469e:	460b      	mov	r3, r1
 80046a0:	813b      	strh	r3, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046a6:	f7ff fa29 	bl	8003afc <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	f040 8208 	bne.w	8004aca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2319      	movs	r3, #25
 80046c0:	2201      	movs	r2, #1
 80046c2:	497b      	ldr	r1, [pc, #492]	; (80048b0 <HAL_I2C_Mem_Read+0x224>)
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 fcb3 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
 80046d2:	e1fb      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_I2C_Mem_Read+0x56>
 80046de:	2302      	movs	r3, #2
 80046e0:	e1f4      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d007      	beq.n	8004708 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004716:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2222      	movs	r2, #34	; 0x22
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2240      	movs	r2, #64	; 0x40
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004732:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4a5b      	ldr	r2, [pc, #364]	; (80048b4 <HAL_I2C_Mem_Read+0x228>)
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800474a:	88f8      	ldrh	r0, [r7, #6]
 800474c:	893a      	ldrh	r2, [r7, #8]
 800474e:	8979      	ldrh	r1, [r7, #10]
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	4603      	mov	r3, r0
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fb80 	bl	8004e60 <I2C_RequestMemoryRead>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e1b0      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d113      	bne.n	800479a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e184      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d11b      	bne.n	80047da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e164      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d11b      	bne.n	800481a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004800:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	e144      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004830:	e138      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004836:	2b03      	cmp	r3, #3
 8004838:	f200 80f1 	bhi.w	8004a1e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004840:	2b01      	cmp	r3, #1
 8004842:	d123      	bne.n	800488c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fd49 	bl	80052e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e139      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800488a:	e10b      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	2b02      	cmp	r3, #2
 8004892:	d14e      	bne.n	8004932 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	2200      	movs	r2, #0
 800489c:	4906      	ldr	r1, [pc, #24]	; (80048b8 <HAL_I2C_Mem_Read+0x22c>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fbc6 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e10e      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
 80048ae:	bf00      	nop
 80048b0:	00100002 	.word	0x00100002
 80048b4:	ffff0000 	.word	0xffff0000
 80048b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004930:	e0b8      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2200      	movs	r2, #0
 800493a:	4966      	ldr	r1, [pc, #408]	; (8004ad4 <HAL_I2C_Mem_Read+0x448>)
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb77 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0bf      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2200      	movs	r2, #0
 8004996:	494f      	ldr	r1, [pc, #316]	; (8004ad4 <HAL_I2C_Mem_Read+0x448>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fb49 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e091      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a1c:	e042      	b.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fc5c 	bl	80052e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e04c      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d118      	bne.n	8004aa4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f47f aec2 	bne.w	8004832 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	00010004 	.word	0x00010004

08004ad8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	607a      	str	r2, [r7, #4]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff f808 	bl	8003afc <HAL_GetTick>
 8004aec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	f040 8111 	bne.w	8004d22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2319      	movs	r3, #25
 8004b06:	2201      	movs	r2, #1
 8004b08:	4988      	ldr	r1, [pc, #544]	; (8004d2c <HAL_I2C_IsDeviceReady+0x254>)
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fa90 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
 8004b18:	e104      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_I2C_IsDeviceReady+0x50>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e0fd      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d007      	beq.n	8004b4e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2224      	movs	r2, #36	; 0x24
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4a70      	ldr	r2, [pc, #448]	; (8004d30 <HAL_I2C_IsDeviceReady+0x258>)
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b80:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa4e 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d103      	bne.n	8004bb2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e0b6      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe ff99 	bl	8003afc <HAL_GetTick>
 8004bca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	bf0c      	ite	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	2300      	movne	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	bf0c      	ite	eq
 8004bf2:	2301      	moveq	r3, #1
 8004bf4:	2300      	movne	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bfa:	e025      	b.n	8004c48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7fe ff7e 	bl	8003afc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <HAL_I2C_IsDeviceReady+0x13a>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22a0      	movs	r2, #160	; 0xa0
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2ba0      	cmp	r3, #160	; 0xa0
 8004c52:	d005      	beq.n	8004c60 <HAL_I2C_IsDeviceReady+0x188>
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HAL_I2C_IsDeviceReady+0x188>
 8004c5a:	7dbb      	ldrb	r3, [r7, #22]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0cd      	beq.n	8004bfc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d129      	bne.n	8004cca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	2319      	movs	r3, #25
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4921      	ldr	r1, [pc, #132]	; (8004d2c <HAL_I2C_IsDeviceReady+0x254>)
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 f9c2 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e036      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e02c      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ce2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	2319      	movs	r3, #25
 8004cea:	2201      	movs	r2, #1
 8004cec:	490f      	ldr	r1, [pc, #60]	; (8004d2c <HAL_I2C_IsDeviceReady+0x254>)
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f99e 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e012      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	f4ff af32 	bcc.w	8004b72 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	00100002 	.word	0x00100002
 8004d30:	ffff0000 	.word	0xffff0000

08004d34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	817b      	strh	r3, [r7, #10]
 8004d46:	460b      	mov	r3, r1
 8004d48:	813b      	strh	r3, [r7, #8]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 f960 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d84:	d103      	bne.n	8004d8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e05f      	b.n	8004e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004da0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	492d      	ldr	r1, [pc, #180]	; (8004e5c <I2C_RequestMemoryWrite+0x128>)
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f998 	bl	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e04c      	b.n	8004e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fa02 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00d      	beq.n	8004dfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d107      	bne.n	8004df6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e02b      	b.n	8004e52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dfa:	88fb      	ldrh	r3, [r7, #6]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	611a      	str	r2, [r3, #16]
 8004e0a:	e021      	b.n	8004e50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e0c:	893b      	ldrh	r3, [r7, #8]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	6a39      	ldr	r1, [r7, #32]
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f9dc 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00d      	beq.n	8004e46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d107      	bne.n	8004e42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e005      	b.n	8004e52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e46:	893b      	ldrh	r3, [r7, #8]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	00010002 	.word	0x00010002

08004e60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f8c2 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00d      	beq.n	8004ece <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec0:	d103      	bne.n	8004eca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0aa      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004edc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	4952      	ldr	r1, [pc, #328]	; (800502c <I2C_RequestMemoryRead+0x1cc>)
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f8fa 	bl	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e097      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	6a39      	ldr	r1, [r7, #32]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f000 f964 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d107      	bne.n	8004f32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e076      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3c:	893b      	ldrh	r3, [r7, #8]
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	611a      	str	r2, [r3, #16]
 8004f46:	e021      	b.n	8004f8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f48:	893b      	ldrh	r3, [r7, #8]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f58:	6a39      	ldr	r1, [r7, #32]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f93e 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00d      	beq.n	8004f82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d107      	bne.n	8004f7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e050      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f82:	893b      	ldrh	r3, [r7, #8]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	6a39      	ldr	r1, [r7, #32]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 f923 	bl	80051dc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d107      	bne.n	8004fb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e035      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f82b 	bl	8005030 <I2C_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00d      	beq.n	8004ffc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fee:	d103      	bne.n	8004ff8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e013      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ffc:	897b      	ldrh	r3, [r7, #10]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	4906      	ldr	r1, [pc, #24]	; (800502c <I2C_RequestMemoryRead+0x1cc>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 f863 	bl	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	00010002 	.word	0x00010002

08005030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005040:	e025      	b.n	800508e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005048:	d021      	beq.n	800508e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504a:	f7fe fd57 	bl	8003afc <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d116      	bne.n	800508e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f043 0220 	orr.w	r2, r3, #32
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e023      	b.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10d      	bne.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	43da      	mvns	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4013      	ands	r3, r2
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	e00c      	b.n	80050ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	43da      	mvns	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4013      	ands	r3, r2
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d0b6      	beq.n	8005042 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050ec:	e051      	b.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fc:	d123      	bne.n	8005146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005116:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e046      	b.n	80051d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d021      	beq.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fe fcd5 	bl	8003afc <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d302      	bcc.n	8005164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d116      	bne.n	8005192 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e020      	b.n	80051d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d10c      	bne.n	80051b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	43da      	mvns	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4013      	ands	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	bf14      	ite	ne
 80051ae:	2301      	movne	r3, #1
 80051b0:	2300      	moveq	r3, #0
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	e00b      	b.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	43da      	mvns	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d18d      	bne.n	80050ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e8:	e02d      	b.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f8ce 	bl	800538c <I2C_IsAcknowledgeFailed>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e02d      	b.n	8005256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d021      	beq.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fe fc7b 	bl	8003afc <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d116      	bne.n	8005246 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e007      	b.n	8005256 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d1ca      	bne.n	80051ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800526a:	e02d      	b.n	80052c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f88d 	bl	800538c <I2C_IsAcknowledgeFailed>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e02d      	b.n	80052d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d021      	beq.n	80052c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7fe fc3a 	bl	8003afc <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d116      	bne.n	80052c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e007      	b.n	80052d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d1ca      	bne.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052ec:	e042      	b.n	8005374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d119      	bne.n	8005330 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e029      	b.n	8005384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005330:	f7fe fbe4 	bl	8003afc <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	d302      	bcc.n	8005346 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d116      	bne.n	8005374 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e007      	b.n	8005384 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d1b5      	bne.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d11b      	bne.n	80053dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e264      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d075      	beq.n	80054f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800540a:	4ba3      	ldr	r3, [pc, #652]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b04      	cmp	r3, #4
 8005414:	d00c      	beq.n	8005430 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005416:	4ba0      	ldr	r3, [pc, #640]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541e:	2b08      	cmp	r3, #8
 8005420:	d112      	bne.n	8005448 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005422:	4b9d      	ldr	r3, [pc, #628]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542e:	d10b      	bne.n	8005448 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005430:	4b99      	ldr	r3, [pc, #612]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d05b      	beq.n	80054f4 <HAL_RCC_OscConfig+0x108>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d157      	bne.n	80054f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e23f      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005450:	d106      	bne.n	8005460 <HAL_RCC_OscConfig+0x74>
 8005452:	4b91      	ldr	r3, [pc, #580]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a90      	ldr	r2, [pc, #576]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e01d      	b.n	800549c <HAL_RCC_OscConfig+0xb0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005468:	d10c      	bne.n	8005484 <HAL_RCC_OscConfig+0x98>
 800546a:	4b8b      	ldr	r3, [pc, #556]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a8a      	ldr	r2, [pc, #552]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a87      	ldr	r2, [pc, #540]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e00b      	b.n	800549c <HAL_RCC_OscConfig+0xb0>
 8005484:	4b84      	ldr	r3, [pc, #528]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a83      	ldr	r2, [pc, #524]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800548a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4b81      	ldr	r3, [pc, #516]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a80      	ldr	r2, [pc, #512]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fe fb2a 	bl	8003afc <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fe fb26 	bl	8003afc <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e204      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054be:	4b76      	ldr	r3, [pc, #472]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0xc0>
 80054ca:	e014      	b.n	80054f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fe fb16 	bl	8003afc <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d4:	f7fe fb12 	bl	8003afc <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	; 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1f0      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e6:	4b6c      	ldr	r3, [pc, #432]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0xe8>
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d063      	beq.n	80055ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005502:	4b65      	ldr	r3, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550e:	4b62      	ldr	r3, [pc, #392]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005516:	2b08      	cmp	r3, #8
 8005518:	d11c      	bne.n	8005554 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551a:	4b5f      	ldr	r3, [pc, #380]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d116      	bne.n	8005554 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005526:	4b5c      	ldr	r3, [pc, #368]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_RCC_OscConfig+0x152>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e1c4      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4952      	ldr	r1, [pc, #328]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005552:	e03a      	b.n	80055ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d020      	beq.n	800559e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <HAL_RCC_OscConfig+0x2b0>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fe facb 	bl	8003afc <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800556a:	f7fe fac7 	bl	8003afc <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e1a5      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557c:	4b46      	ldr	r3, [pc, #280]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b43      	ldr	r3, [pc, #268]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4940      	ldr	r1, [pc, #256]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	4313      	orrs	r3, r2
 800559a:	600b      	str	r3, [r1, #0]
 800559c:	e015      	b.n	80055ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800559e:	4b3f      	ldr	r3, [pc, #252]	; (800569c <HAL_RCC_OscConfig+0x2b0>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fe faaa 	bl	8003afc <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fe faa6 	bl	8003afc <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e184      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055be:	4b36      	ldr	r3, [pc, #216]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d030      	beq.n	8005638 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055de:	4b30      	ldr	r3, [pc, #192]	; (80056a0 <HAL_RCC_OscConfig+0x2b4>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e4:	f7fe fa8a 	bl	8003afc <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ec:	f7fe fa86 	bl	8003afc <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e164      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0f0      	beq.n	80055ec <HAL_RCC_OscConfig+0x200>
 800560a:	e015      	b.n	8005638 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800560c:	4b24      	ldr	r3, [pc, #144]	; (80056a0 <HAL_RCC_OscConfig+0x2b4>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005612:	f7fe fa73 	bl	8003afc <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561a:	f7fe fa6f 	bl	8003afc <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e14d      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800562e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80a0 	beq.w	8005786 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800564a:	4b13      	ldr	r3, [pc, #76]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6413      	str	r3, [r2, #64]	; 0x40
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566e:	60bb      	str	r3, [r7, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005672:	2301      	movs	r3, #1
 8005674:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_OscConfig+0x2b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d121      	bne.n	80056c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <HAL_RCC_OscConfig+0x2b8>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <HAL_RCC_OscConfig+0x2b8>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568e:	f7fe fa35 	bl	8003afc <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005694:	e011      	b.n	80056ba <HAL_RCC_OscConfig+0x2ce>
 8005696:	bf00      	nop
 8005698:	40023800 	.word	0x40023800
 800569c:	42470000 	.word	0x42470000
 80056a0:	42470e80 	.word	0x42470e80
 80056a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a8:	f7fe fa28 	bl	8003afc <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e106      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ba:	4b85      	ldr	r3, [pc, #532]	; (80058d0 <HAL_RCC_OscConfig+0x4e4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0f0      	beq.n	80056a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d106      	bne.n	80056dc <HAL_RCC_OscConfig+0x2f0>
 80056ce:	4b81      	ldr	r3, [pc, #516]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a80      	ldr	r2, [pc, #512]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056d4:	f043 0301 	orr.w	r3, r3, #1
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
 80056da:	e01c      	b.n	8005716 <HAL_RCC_OscConfig+0x32a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	2b05      	cmp	r3, #5
 80056e2:	d10c      	bne.n	80056fe <HAL_RCC_OscConfig+0x312>
 80056e4:	4b7b      	ldr	r3, [pc, #492]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a7a      	ldr	r2, [pc, #488]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056ea:	f043 0304 	orr.w	r3, r3, #4
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
 80056f0:	4b78      	ldr	r3, [pc, #480]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	4a77      	ldr	r2, [pc, #476]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	6713      	str	r3, [r2, #112]	; 0x70
 80056fc:	e00b      	b.n	8005716 <HAL_RCC_OscConfig+0x32a>
 80056fe:	4b75      	ldr	r3, [pc, #468]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a74      	ldr	r2, [pc, #464]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
 800570a:	4b72      	ldr	r3, [pc, #456]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	4a71      	ldr	r2, [pc, #452]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d015      	beq.n	800574a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fe f9ed 	bl	8003afc <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fe f9e9 	bl	8003afc <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0c5      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	4b65      	ldr	r3, [pc, #404]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ee      	beq.n	8005726 <HAL_RCC_OscConfig+0x33a>
 8005748:	e014      	b.n	8005774 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574a:	f7fe f9d7 	bl	8003afc <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fe f9d3 	bl	8003afc <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0af      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005768:	4b5a      	ldr	r3, [pc, #360]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1ee      	bne.n	8005752 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d105      	bne.n	8005786 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577a:	4b56      	ldr	r3, [pc, #344]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	4a55      	ldr	r2, [pc, #340]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 809b 	beq.w	80058c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005790:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b08      	cmp	r3, #8
 800579a:	d05c      	beq.n	8005856 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d141      	bne.n	8005828 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a4:	4b4c      	ldr	r3, [pc, #304]	; (80058d8 <HAL_RCC_OscConfig+0x4ec>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057aa:	f7fe f9a7 	bl	8003afc <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fe f9a3 	bl	8003afc <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e081      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	019b      	lsls	r3, r3, #6
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	3b01      	subs	r3, #1
 80057ea:	041b      	lsls	r3, r3, #16
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	061b      	lsls	r3, r3, #24
 80057f4:	4937      	ldr	r1, [pc, #220]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057fa:	4b37      	ldr	r3, [pc, #220]	; (80058d8 <HAL_RCC_OscConfig+0x4ec>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fe f97c 	bl	8003afc <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005808:	f7fe f978 	bl	8003afc <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e056      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581a:	4b2e      	ldr	r3, [pc, #184]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x41c>
 8005826:	e04e      	b.n	80058c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005828:	4b2b      	ldr	r3, [pc, #172]	; (80058d8 <HAL_RCC_OscConfig+0x4ec>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fe f965 	bl	8003afc <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005836:	f7fe f961 	bl	8003afc <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e03f      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005848:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f0      	bne.n	8005836 <HAL_RCC_OscConfig+0x44a>
 8005854:	e037      	b.n	80058c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e032      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005862:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <HAL_RCC_OscConfig+0x4e8>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d028      	beq.n	80058c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d121      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d11a      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005892:	4013      	ands	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005898:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800589a:	4293      	cmp	r3, r2
 800589c:	d111      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	085b      	lsrs	r3, r3, #1
 80058aa:	3b01      	subs	r3, #1
 80058ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d001      	beq.n	80058c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40007000 	.word	0x40007000
 80058d4:	40023800 	.word	0x40023800
 80058d8:	42470060 	.word	0x42470060

080058dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0cc      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058f0:	4b68      	ldr	r3, [pc, #416]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d90c      	bls.n	8005918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b65      	ldr	r3, [pc, #404]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0b8      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d020      	beq.n	8005966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005930:	4b59      	ldr	r3, [pc, #356]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	4a58      	ldr	r2, [pc, #352]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800593a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005948:	4b53      	ldr	r3, [pc, #332]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005954:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	494d      	ldr	r1, [pc, #308]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d044      	beq.n	80059fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597a:	4b47      	ldr	r3, [pc, #284]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d119      	bne.n	80059ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e07f      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d003      	beq.n	800599a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005996:	2b03      	cmp	r3, #3
 8005998:	d107      	bne.n	80059aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599a:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e06f      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059aa:	4b3b      	ldr	r3, [pc, #236]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e067      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ba:	4b37      	ldr	r3, [pc, #220]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f023 0203 	bic.w	r2, r3, #3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	4934      	ldr	r1, [pc, #208]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059cc:	f7fe f896 	bl	8003afc <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d2:	e00a      	b.n	80059ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d4:	f7fe f892 	bl	8003afc <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d901      	bls.n	80059ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e04f      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ea:	4b2b      	ldr	r3, [pc, #172]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 020c 	and.w	r2, r3, #12
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d1eb      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059fc:	4b25      	ldr	r3, [pc, #148]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d20c      	bcs.n	8005a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0a:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCC_ClockConfig+0x1b8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e032      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a30:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4916      	ldr	r1, [pc, #88]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	490e      	ldr	r1, [pc, #56]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a62:	f000 f821 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a66:	4602      	mov	r2, r0
 8005a68:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	490a      	ldr	r1, [pc, #40]	; (8005a9c <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	5ccb      	ldrb	r3, [r1, r3]
 8005a76:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fd fff6 	bl	8003a74 <HAL_InitTick>

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40023c00 	.word	0x40023c00
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	0800bb4c 	.word	0x0800bb4c
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	20000004 	.word	0x20000004

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac0:	4b67      	ldr	r3, [pc, #412]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 030c 	and.w	r3, r3, #12
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d00d      	beq.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	f200 80bd 	bhi.w	8005c4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x34>
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ada:	e0b7      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005adc:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ade:	60bb      	str	r3, [r7, #8]
       break;
 8005ae0:	e0b7      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ae2:	4b61      	ldr	r3, [pc, #388]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005ae4:	60bb      	str	r3, [r7, #8]
      break;
 8005ae6:	e0b4      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae8:	4b5d      	ldr	r3, [pc, #372]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af2:	4b5b      	ldr	r3, [pc, #364]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04d      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afe:	4b58      	ldr	r3, [pc, #352]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	461a      	mov	r2, r3
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b0e:	f04f 0100 	mov.w	r1, #0
 8005b12:	ea02 0800 	and.w	r8, r2, r0
 8005b16:	ea03 0901 	and.w	r9, r3, r1
 8005b1a:	4640      	mov	r0, r8
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	014b      	lsls	r3, r1, #5
 8005b28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b2c:	0142      	lsls	r2, r0, #5
 8005b2e:	4610      	mov	r0, r2
 8005b30:	4619      	mov	r1, r3
 8005b32:	ebb0 0008 	subs.w	r0, r0, r8
 8005b36:	eb61 0109 	sbc.w	r1, r1, r9
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	018b      	lsls	r3, r1, #6
 8005b44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b48:	0182      	lsls	r2, r0, #6
 8005b4a:	1a12      	subs	r2, r2, r0
 8005b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b50:	f04f 0000 	mov.w	r0, #0
 8005b54:	f04f 0100 	mov.w	r1, #0
 8005b58:	00d9      	lsls	r1, r3, #3
 8005b5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b5e:	00d0      	lsls	r0, r2, #3
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	eb12 0208 	adds.w	r2, r2, r8
 8005b68:	eb43 0309 	adc.w	r3, r3, r9
 8005b6c:	f04f 0000 	mov.w	r0, #0
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	0259      	lsls	r1, r3, #9
 8005b76:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b7a:	0250      	lsls	r0, r2, #9
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	461a      	mov	r2, r3
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	f7fa fb70 	bl	8000270 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4613      	mov	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e04a      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9a:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	099b      	lsrs	r3, r3, #6
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f04f 0300 	mov.w	r3, #0
 8005ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	ea02 0400 	and.w	r4, r2, r0
 8005bb2:	ea03 0501 	and.w	r5, r3, r1
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	014b      	lsls	r3, r1, #5
 8005bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bc8:	0142      	lsls	r2, r0, #5
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	1b00      	subs	r0, r0, r4
 8005bd0:	eb61 0105 	sbc.w	r1, r1, r5
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	018b      	lsls	r3, r1, #6
 8005bde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005be2:	0182      	lsls	r2, r0, #6
 8005be4:	1a12      	subs	r2, r2, r0
 8005be6:	eb63 0301 	sbc.w	r3, r3, r1
 8005bea:	f04f 0000 	mov.w	r0, #0
 8005bee:	f04f 0100 	mov.w	r1, #0
 8005bf2:	00d9      	lsls	r1, r3, #3
 8005bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bf8:	00d0      	lsls	r0, r2, #3
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	1912      	adds	r2, r2, r4
 8005c00:	eb45 0303 	adc.w	r3, r5, r3
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f04f 0100 	mov.w	r1, #0
 8005c0c:	0299      	lsls	r1, r3, #10
 8005c0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c12:	0290      	lsls	r0, r2, #10
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	f7fa fb24 	bl	8000270 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	60bb      	str	r3, [r7, #8]
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c4e:	60bb      	str	r3, [r7, #8]
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	68bb      	ldr	r3, [r7, #8]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000000 	.word	0x20000000

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a9b      	lsrs	r3, r3, #10
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	0800bb5c 	.word	0x0800bb5c

08005cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cb0:	f7ff ffdc 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0b5b      	lsrs	r3, r3, #13
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	; (8005cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800bb5c 	.word	0x0800bb5c

08005cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07b      	b.n	8005dde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d009      	beq.n	8005d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	e005      	b.n	8005d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fd f93c 	bl	8002fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0104 	and.w	r1, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f003 0210 	and.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b088      	sub	sp, #32
 8005dea:	af02      	add	r7, sp, #8
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e02:	d112      	bne.n	8005e2a <HAL_SPI_Receive+0x44>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10e      	bne.n	8005e2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f8f1 	bl	8006008 <HAL_SPI_TransmitReceive>
 8005e26:	4603      	mov	r3, r0
 8005e28:	e0ea      	b.n	8006000 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_SPI_Receive+0x52>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0e3      	b.n	8006000 <HAL_SPI_Receive+0x21a>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e40:	f7fd fe5c 	bl	8003afc <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e52:	2302      	movs	r3, #2
 8005e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e56:	e0ca      	b.n	8005fee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <HAL_SPI_Receive+0x7e>
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e68:	e0c1      	b.n	8005fee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	88fa      	ldrh	r2, [r7, #6]
 8005e88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	d10f      	bne.n	8005ed2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d007      	beq.n	8005ef0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d162      	bne.n	8005fbe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ef8:	e02e      	b.n	8005f58 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d115      	bne.n	8005f34 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f103 020c 	add.w	r2, r3, #12
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f32:	e011      	b.n	8005f58 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f34:	f7fd fde2 	bl	8003afc <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d803      	bhi.n	8005f4c <HAL_SPI_Receive+0x166>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4a:	d102      	bne.n	8005f52 <HAL_SPI_Receive+0x16c>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f56:	e04a      	b.n	8005fee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1cb      	bne.n	8005efa <HAL_SPI_Receive+0x114>
 8005f62:	e031      	b.n	8005fc8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d113      	bne.n	8005f9a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f98:	e011      	b.n	8005fbe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9a:	f7fd fdaf 	bl	8003afc <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d803      	bhi.n	8005fb2 <HAL_SPI_Receive+0x1cc>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Receive+0x1d2>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d102      	bne.n	8005fbe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fbc:	e017      	b.n	8005fee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1cd      	bne.n	8005f64 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fa45 	bl	800645c <SPI_EndRxTransaction>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
 8005fea:	e000      	b.n	8005fee <HAL_SPI_Receive+0x208>
  }

error :
 8005fec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08c      	sub	sp, #48	; 0x30
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006016:	2301      	movs	r3, #1
 8006018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_SPI_TransmitReceive+0x26>
 800602a:	2302      	movs	r3, #2
 800602c:	e18a      	b.n	8006344 <HAL_SPI_TransmitReceive+0x33c>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006036:	f7fd fd61 	bl	8003afc <HAL_GetTick>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006054:	2b01      	cmp	r3, #1
 8006056:	d00f      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x70>
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800605e:	d107      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d103      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x68>
 8006068:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800606c:	2b04      	cmp	r3, #4
 800606e:	d003      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006070:	2302      	movs	r3, #2
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006076:	e15b      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <HAL_SPI_TransmitReceive+0x82>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_SPI_TransmitReceive+0x82>
 8006084:	887b      	ldrh	r3, [r7, #2]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006090:	e14e      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b04      	cmp	r3, #4
 800609c:	d003      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2205      	movs	r2, #5
 80060a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	887a      	ldrh	r2, [r7, #2]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	887a      	ldrh	r2, [r7, #2]
 80060bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	887a      	ldrh	r2, [r7, #2]
 80060c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	887a      	ldrh	r2, [r7, #2]
 80060ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d007      	beq.n	80060fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006102:	d178      	bne.n	80061f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x10a>
 800610c:	8b7b      	ldrh	r3, [r7, #26]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d166      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	881a      	ldrh	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006136:	e053      	b.n	80061e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d11b      	bne.n	800617e <HAL_SPI_TransmitReceive+0x176>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d016      	beq.n	800617e <HAL_SPI_TransmitReceive+0x176>
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	2b01      	cmp	r3, #1
 8006154:	d113      	bne.n	800617e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	881a      	ldrh	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	1c9a      	adds	r2, r3, #2
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800617a:	2300      	movs	r3, #0
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b01      	cmp	r3, #1
 800618a:	d119      	bne.n	80061c0 <HAL_SPI_TransmitReceive+0x1b8>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d014      	beq.n	80061c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a0:	b292      	uxth	r2, r2
 80061a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	1c9a      	adds	r2, r3, #2
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061bc:	2301      	movs	r3, #1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061c0:	f7fd fc9c 	bl	8003afc <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d807      	bhi.n	80061e0 <HAL_SPI_TransmitReceive+0x1d8>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d003      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061de:	e0a7      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1a6      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x130>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1a1      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x130>
 80061f4:	e07c      	b.n	80062f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x1fc>
 80061fe:	8b7b      	ldrh	r3, [r7, #26]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d16b      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	7812      	ldrb	r2, [r2, #0]
 8006210:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800622a:	e057      	b.n	80062dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b02      	cmp	r3, #2
 8006238:	d11c      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x26c>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623e:	b29b      	uxth	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x26c>
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d114      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	330c      	adds	r3, #12
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b01      	cmp	r3, #1
 8006280:	d119      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x2ae>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d014      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062b2:	2301      	movs	r3, #1
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062b6:	f7fd fc21 	bl	8003afc <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d803      	bhi.n	80062ce <HAL_SPI_TransmitReceive+0x2c6>
 80062c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062cc:	d102      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x2cc>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062da:	e029      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1a2      	bne.n	800622c <HAL_SPI_TransmitReceive+0x224>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d19d      	bne.n	800622c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f917 	bl	8006528 <SPI_EndRxTxTransaction>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2220      	movs	r2, #32
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800630c:	e010      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	e000      	b.n	8006330 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800632e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006340:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800635c:	f7fd fbce 	bl	8003afc <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4413      	add	r3, r2
 800636a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800636c:	f7fd fbc6 	bl	8003afc <HAL_GetTick>
 8006370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006372:	4b39      	ldr	r3, [pc, #228]	; (8006458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	015b      	lsls	r3, r3, #5
 8006378:	0d1b      	lsrs	r3, r3, #20
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006382:	e054      	b.n	800642e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638a:	d050      	beq.n	800642e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800638c:	f7fd fbb6 	bl	8003afc <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	429a      	cmp	r2, r3
 800639a:	d902      	bls.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d13d      	bne.n	800641e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ba:	d111      	bne.n	80063e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	d004      	beq.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d107      	bne.n	80063e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e8:	d10f      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e017      	b.n	800644e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3b01      	subs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d19b      	bne.n	8006384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000000 	.word	0x20000000

0800645c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006470:	d111      	bne.n	8006496 <SPI_EndRxTransaction+0x3a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647a:	d004      	beq.n	8006486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d107      	bne.n	8006496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800649e:	d12a      	bne.n	80064f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a8:	d012      	beq.n	80064d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	2180      	movs	r1, #128	; 0x80
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7ff ff49 	bl	800634c <SPI_WaitFlagStateUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d02d      	beq.n	800651c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e026      	b.n	800651e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2101      	movs	r1, #1
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff ff36 	bl	800634c <SPI_WaitFlagStateUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d01a      	beq.n	800651c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e013      	b.n	800651e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2101      	movs	r1, #1
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f7ff ff23 	bl	800634c <SPI_WaitFlagStateUntilTimeout>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006510:	f043 0220 	orr.w	r2, r3, #32
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e000      	b.n	800651e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <SPI_EndRxTxTransaction+0x7c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <SPI_EndRxTxTransaction+0x80>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	0d5b      	lsrs	r3, r3, #21
 8006540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006544:	fb02 f303 	mul.w	r3, r2, r3
 8006548:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006552:	d112      	bne.n	800657a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2200      	movs	r2, #0
 800655c:	2180      	movs	r1, #128	; 0x80
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff fef4 	bl	800634c <SPI_WaitFlagStateUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d016      	beq.n	8006598 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800656e:	f043 0220 	orr.w	r2, r3, #32
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e00f      	b.n	800659a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3b01      	subs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d0f2      	beq.n	800657a <SPI_EndRxTxTransaction+0x52>
 8006594:	e000      	b.n	8006598 <SPI_EndRxTxTransaction+0x70>
        break;
 8006596:	bf00      	nop
  }

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000000 	.word	0x20000000
 80065a8:	165e9f81 	.word	0x165e9f81

080065ac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e034      	b.n	800662c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7fa f9ce 	bl	8000978 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3308      	adds	r3, #8
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f001 fc6e 	bl	8007ec8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	461a      	mov	r2, r3
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	f001 fcb8 	bl	8007f6c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6858      	ldr	r0, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	f001 fced 	bl	8007fe8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	6892      	ldr	r2, [r2, #8]
 8006616:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	6892      	ldr	r2, [r2, #8]
 8006622:	f041 0101 	orr.w	r1, r1, #1
 8006626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e041      	b.n	80066ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7fc fde4 	bl	8003228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	3304      	adds	r3, #4
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f000 fa96 	bl	8006ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d001      	beq.n	80066ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e04e      	b.n	800678a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a23      	ldr	r2, [pc, #140]	; (8006798 <HAL_TIM_Base_Start_IT+0xc4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d022      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006716:	d01d      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1f      	ldr	r2, [pc, #124]	; (800679c <HAL_TIM_Base_Start_IT+0xc8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d018      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00e      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d009      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <HAL_TIM_Base_Start_IT+0xd8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Base_Start_IT+0x80>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d111      	bne.n	8006778 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b06      	cmp	r3, #6
 8006764:	d010      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0201 	orr.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006776:	e007      	b.n	8006788 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40010000 	.word	0x40010000
 800679c:	40000400 	.word	0x40000400
 80067a0:	40000800 	.word	0x40000800
 80067a4:	40000c00 	.word	0x40000c00
 80067a8:	40010400 	.word	0x40010400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40001800 	.word	0x40001800

080067b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d122      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d11b      	bne.n	8006810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0202 	mvn.w	r2, #2
 80067e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f9b5 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 80067fc:	e005      	b.n	800680a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9a7 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f9b8 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d122      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b04      	cmp	r3, #4
 800682a:	d11b      	bne.n	8006864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0204 	mvn.w	r2, #4
 8006834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2202      	movs	r2, #2
 800683a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f98b 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 8006850:	e005      	b.n	800685e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f97d 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f98e 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b08      	cmp	r3, #8
 8006870:	d122      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d11b      	bne.n	80068b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f06f 0208 	mvn.w	r2, #8
 8006888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2204      	movs	r2, #4
 800688e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d003      	beq.n	80068a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f961 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 80068a4:	e005      	b.n	80068b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f953 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f964 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	f003 0310 	and.w	r3, r3, #16
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d122      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d11b      	bne.n	800690c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f06f 0210 	mvn.w	r2, #16
 80068dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2208      	movs	r2, #8
 80068e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f937 	bl	8006b66 <HAL_TIM_IC_CaptureCallback>
 80068f8:	e005      	b.n	8006906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 f929 	bl	8006b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f93a 	bl	8006b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	d10e      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d107      	bne.n	8006938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0201 	mvn.w	r2, #1
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fc fabe 	bl	8002eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d10e      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b80      	cmp	r3, #128	; 0x80
 8006952:	d107      	bne.n	8006964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800695c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fae0 	bl	8006f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d10e      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	d107      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f8ff 	bl	8006b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d10e      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0320 	and.w	r3, r3, #32
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d107      	bne.n	80069bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0220 	mvn.w	r2, #32
 80069b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 faaa 	bl	8006f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIM_ConfigClockSource+0x1c>
 80069dc:	2302      	movs	r3, #2
 80069de:	e0b4      	b.n	8006b4a <HAL_TIM_ConfigClockSource+0x186>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d03e      	beq.n	8006a98 <HAL_TIM_ConfigClockSource+0xd4>
 8006a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1e:	f200 8087 	bhi.w	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a26:	f000 8086 	beq.w	8006b36 <HAL_TIM_ConfigClockSource+0x172>
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2e:	d87f      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a30:	2b70      	cmp	r3, #112	; 0x70
 8006a32:	d01a      	beq.n	8006a6a <HAL_TIM_ConfigClockSource+0xa6>
 8006a34:	2b70      	cmp	r3, #112	; 0x70
 8006a36:	d87b      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a38:	2b60      	cmp	r3, #96	; 0x60
 8006a3a:	d050      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0x11a>
 8006a3c:	2b60      	cmp	r3, #96	; 0x60
 8006a3e:	d877      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a40:	2b50      	cmp	r3, #80	; 0x50
 8006a42:	d03c      	beq.n	8006abe <HAL_TIM_ConfigClockSource+0xfa>
 8006a44:	2b50      	cmp	r3, #80	; 0x50
 8006a46:	d873      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a48:	2b40      	cmp	r3, #64	; 0x40
 8006a4a:	d058      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x13a>
 8006a4c:	2b40      	cmp	r3, #64	; 0x40
 8006a4e:	d86f      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b30      	cmp	r3, #48	; 0x30
 8006a52:	d064      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x15a>
 8006a54:	2b30      	cmp	r3, #48	; 0x30
 8006a56:	d86b      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d060      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x15a>
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d867      	bhi.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d05c      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x15a>
 8006a64:	2b10      	cmp	r3, #16
 8006a66:	d05a      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x15a>
 8006a68:	e062      	b.n	8006b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6818      	ldr	r0, [r3, #0]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6899      	ldr	r1, [r3, #8]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f000 f9ad 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	609a      	str	r2, [r3, #8]
      break;
 8006a96:	e04f      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6899      	ldr	r1, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f000 f996 	bl	8006dd8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aba:	609a      	str	r2, [r3, #8]
      break;
 8006abc:	e03c      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6859      	ldr	r1, [r3, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f000 f90a 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2150      	movs	r1, #80	; 0x50
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f963 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006adc:	e02c      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6859      	ldr	r1, [r3, #4]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	461a      	mov	r2, r3
 8006aec:	f000 f929 	bl	8006d42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2160      	movs	r1, #96	; 0x60
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f953 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006afc:	e01c      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f000 f8ea 	bl	8006ce4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2140      	movs	r1, #64	; 0x40
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 f943 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b1c:	e00c      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f000 f93a 	bl	8006da2 <TIM_ITRx_SetConfig>
      break;
 8006b2e:	e003      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
      break;
 8006b34:	e000      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
	...

08006ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a40      	ldr	r2, [pc, #256]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc2:	d00f      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a3d      	ldr	r2, [pc, #244]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a3c      	ldr	r2, [pc, #240]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a3b      	ldr	r2, [pc, #236]	; (8006cc4 <TIM_Base_SetConfig+0x120>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_Base_SetConfig+0x40>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a3a      	ldr	r2, [pc, #232]	; (8006cc8 <TIM_Base_SetConfig+0x124>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d108      	bne.n	8006bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2f      	ldr	r2, [pc, #188]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d027      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a2c      	ldr	r2, [pc, #176]	; (8006cbc <TIM_Base_SetConfig+0x118>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d023      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a2b      	ldr	r2, [pc, #172]	; (8006cc0 <TIM_Base_SetConfig+0x11c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01f      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <TIM_Base_SetConfig+0x120>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a29      	ldr	r2, [pc, #164]	; (8006cc8 <TIM_Base_SetConfig+0x124>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d017      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a28      	ldr	r2, [pc, #160]	; (8006ccc <TIM_Base_SetConfig+0x128>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a27      	ldr	r2, [pc, #156]	; (8006cd0 <TIM_Base_SetConfig+0x12c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00f      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <TIM_Base_SetConfig+0x130>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00b      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a25      	ldr	r2, [pc, #148]	; (8006cd8 <TIM_Base_SetConfig+0x134>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a24      	ldr	r2, [pc, #144]	; (8006cdc <TIM_Base_SetConfig+0x138>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_Base_SetConfig+0xb2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a23      	ldr	r2, [pc, #140]	; (8006ce0 <TIM_Base_SetConfig+0x13c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a0a      	ldr	r2, [pc, #40]	; (8006cb8 <TIM_Base_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_Base_SetConfig+0xf8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a0c      	ldr	r2, [pc, #48]	; (8006cc8 <TIM_Base_SetConfig+0x124>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d103      	bne.n	8006ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	615a      	str	r2, [r3, #20]
}
 8006caa:	bf00      	nop
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000800 	.word	0x40000800
 8006cc4:	40000c00 	.word	0x40000c00
 8006cc8:	40010400 	.word	0x40010400
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800
 8006cd8:	40001800 	.word	0x40001800
 8006cdc:	40001c00 	.word	0x40001c00
 8006ce0:	40002000 	.word	0x40002000

08006ce4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	f023 0201 	bic.w	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 030a 	bic.w	r3, r3, #10
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f023 0210 	bic.w	r2, r3, #16
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	031b      	lsls	r3, r3, #12
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	621a      	str	r2, [r3, #32]
}
 8006d96:	bf00      	nop
 8006d98:	371c      	adds	r7, #28
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f043 0307 	orr.w	r3, r3, #7
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	609a      	str	r2, [r3, #8]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	021a      	lsls	r2, r3, #8
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	371c      	adds	r7, #28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e05a      	b.n	8006ee6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1a      	ldr	r2, [pc, #104]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a18      	ldr	r2, [pc, #96]	; (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40000c00 	.word	0x40000c00
 8006f04:	40010400 	.word	0x40010400
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40001800 	.word	0x40001800

08006f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e03f      	b.n	8006fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d106      	bne.n	8006f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fc fcae 	bl	80038c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2224      	movs	r2, #36	; 0x24
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fddb 	bl	8007b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695a      	ldr	r2, [r3, #20]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08a      	sub	sp, #40	; 0x28
 8006fd6:	af02      	add	r7, sp, #8
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d17c      	bne.n	80070ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_UART_Transmit+0x2c>
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e075      	b.n	80070ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_UART_Transmit+0x3e>
 800700c:	2302      	movs	r3, #2
 800700e:	e06e      	b.n	80070ee <HAL_UART_Transmit+0x11c>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2221      	movs	r2, #33	; 0x21
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007026:	f7fc fd69 	bl	8003afc <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	88fa      	ldrh	r2, [r7, #6]
 8007036:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007040:	d108      	bne.n	8007054 <HAL_UART_Transmit+0x82>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	e003      	b.n	800705c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007064:	e02a      	b.n	80070bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2200      	movs	r2, #0
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fb1f 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e036      	b.n	80070ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	3302      	adds	r3, #2
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e007      	b.n	80070ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	3301      	adds	r3, #1
 80070ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1cf      	bne.n	8007066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2140      	movs	r1, #64	; 0x40
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 faef 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e006      	b.n	80070ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070ec:	2302      	movs	r3, #2
  }
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b084      	sub	sp, #16
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	60f8      	str	r0, [r7, #12]
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b20      	cmp	r3, #32
 800710e:	d11d      	bne.n	800714c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Receive_IT+0x26>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e016      	b.n	800714e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_UART_Receive_IT+0x38>
 800712a:	2302      	movs	r3, #2
 800712c:	e00f      	b.n	800714e <HAL_UART_Receive_IT+0x58>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	461a      	mov	r2, r3
 8007140:	68b9      	ldr	r1, [r7, #8]
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fb24 	bl	8007790 <UART_Start_Receive_IT>
 8007148:	4603      	mov	r3, r0
 800714a:	e000      	b.n	800714e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b0ba      	sub	sp, #232	; 0xe8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800717e:	2300      	movs	r3, #0
 8007180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10f      	bne.n	80071be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fc03 	bl	80079c2 <UART_Receive_IT>
      return;
 80071bc:	e256      	b.n	800766c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80de 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
 80071c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80d1 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f043 0202 	orr.w	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
 8007236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f043 0208 	orr.w	r2, r3, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 81ed 	beq.w	8007662 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fb8e 	bl	80079c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b40      	cmp	r3, #64	; 0x40
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_UART_IRQHandler+0x17a>
 80072ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04f      	beq.n	8007372 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fa96 	bl	8007804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d141      	bne.n	800736a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3314      	adds	r3, #20
 80072ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007304:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007312:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800731e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	4a7d      	ldr	r2, [pc, #500]	; (8007534 <HAL_UART_IRQHandler+0x3dc>)
 8007340:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	4618      	mov	r0, r3
 8007348:	f7fc fd89 	bl	8003e5e <HAL_DMA_Abort_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00e      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f990 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00a      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f98c 	bl	8007688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e006      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f988 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800737e:	e170      	b.n	8007662 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	bf00      	nop
    return;
 8007382:	e16e      	b.n	8007662 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	f040 814a 	bne.w	8007622 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8143 	beq.w	8007622 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 813c 	beq.w	8007622 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	f040 80b4 	bne.w	8007538 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8140 	beq.w	8007666 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f080 8139 	bcs.w	8007666 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007406:	f000 8088 	beq.w	800751a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800744e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d9      	bne.n	800740a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800747a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800747e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007482:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800748c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e1      	bne.n	8007456 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80074a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80074b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80074b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80074bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80074c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e3      	bne.n	8007492 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800750a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e3      	bne.n	80074d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	4618      	mov	r0, r3
 8007516:	f7fc fc32 	bl	8003d7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007522:	b29b      	uxth	r3, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	b29b      	uxth	r3, r3
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f8b6 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007530:	e099      	b.n	8007666 <HAL_UART_IRQHandler+0x50e>
 8007532:	bf00      	nop
 8007534:	080078cb 	.word	0x080078cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007540:	b29b      	uxth	r3, r3
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 808b 	beq.w	800766a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8086 	beq.w	800766a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007582:	647a      	str	r2, [r7, #68]	; 0x44
 8007584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800758a:	e841 2300 	strex	r3, r2, [r1]
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1e3      	bne.n	800755e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3314      	adds	r3, #20
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	e853 3f00 	ldrex	r3, [r3]
 80075a4:	623b      	str	r3, [r7, #32]
   return(result);
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f023 0301 	bic.w	r3, r3, #1
 80075ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80075ba:	633a      	str	r2, [r7, #48]	; 0x30
 80075bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e3      	bne.n	8007596 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	330c      	adds	r3, #12
 80075e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007600:	61fa      	str	r2, [r7, #28]
 8007602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	617b      	str	r3, [r7, #20]
   return(result);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e3      	bne.n	80075dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f83e 	bl	800769c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007620:	e023      	b.n	800766a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d009      	beq.n	8007642 <HAL_UART_IRQHandler+0x4ea>
 800762e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f959 	bl	80078f2 <UART_Transmit_IT>
    return;
 8007640:	e014      	b.n	800766c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <HAL_UART_IRQHandler+0x514>
 800764e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	d008      	beq.n	800766c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f999 	bl	8007992 <UART_EndTransmit_IT>
    return;
 8007660:	e004      	b.n	800766c <HAL_UART_IRQHandler+0x514>
    return;
 8007662:	bf00      	nop
 8007664:	e002      	b.n	800766c <HAL_UART_IRQHandler+0x514>
      return;
 8007666:	bf00      	nop
 8007668:	e000      	b.n	800766c <HAL_UART_IRQHandler+0x514>
      return;
 800766a:	bf00      	nop
  }
}
 800766c:	37e8      	adds	r7, #232	; 0xe8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop

08007674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b090      	sub	sp, #64	; 0x40
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c4:	e050      	b.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d04c      	beq.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d007      	beq.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076d4:	f7fc fa12 	bl	8003afc <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d241      	bcs.n	8007768 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	e853 3f00 	ldrex	r3, [r3]
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007704:	637a      	str	r2, [r7, #52]	; 0x34
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800770a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e5      	bne.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	613b      	str	r3, [r7, #16]
   return(result);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3314      	adds	r3, #20
 8007736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007738:	623a      	str	r2, [r7, #32]
 800773a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	69f9      	ldr	r1, [r7, #28]
 800773e:	6a3a      	ldr	r2, [r7, #32]
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	61bb      	str	r3, [r7, #24]
   return(result);
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e00f      	b.n	8007788 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4013      	ands	r3, r2
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	429a      	cmp	r2, r3
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	461a      	mov	r2, r3
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	429a      	cmp	r2, r3
 8007784:	d09f      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3740      	adds	r7, #64	; 0x40
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2222      	movs	r2, #34	; 0x22
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0220 	orr.w	r2, r2, #32
 80077f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b095      	sub	sp, #84	; 0x54
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	330c      	adds	r3, #12
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	330c      	adds	r3, #12
 800782a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800782c:	643a      	str	r2, [r7, #64]	; 0x40
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007868:	e841 2300 	strex	r3, r2, [r1]
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1e5      	bne.n	8007840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	2b01      	cmp	r3, #1
 800787a:	d119      	bne.n	80078b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	60bb      	str	r3, [r7, #8]
   return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800789c:	61ba      	str	r2, [r7, #24]
 800789e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80078be:	bf00      	nop
 80078c0:	3754      	adds	r7, #84	; 0x54
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff fecf 	bl	8007688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ea:	bf00      	nop
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b21      	cmp	r3, #33	; 0x21
 8007904:	d13e      	bne.n	8007984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	d114      	bne.n	800793a <UART_Transmit_IT+0x48>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d110      	bne.n	800793a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	1c9a      	adds	r2, r3, #2
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	621a      	str	r2, [r3, #32]
 8007938:	e008      	b.n	800794c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	1c59      	adds	r1, r3, #1
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6211      	str	r1, [r2, #32]
 8007944:	781a      	ldrb	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	4619      	mov	r1, r3
 800795a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10f      	bne.n	8007980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800796e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff fe5e 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b08c      	sub	sp, #48	; 0x30
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b22      	cmp	r3, #34	; 0x22
 80079d4:	f040 80ab 	bne.w	8007b2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e0:	d117      	bne.n	8007a12 <UART_Receive_IT+0x50>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d113      	bne.n	8007a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ea:	2300      	movs	r3, #0
 80079ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	1c9a      	adds	r2, r3, #2
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a10:	e026      	b.n	8007a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a24:	d007      	beq.n	8007a36 <UART_Receive_IT+0x74>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <UART_Receive_IT+0x82>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e008      	b.n	8007a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d15a      	bne.n	8007b2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0220 	bic.w	r2, r2, #32
 8007a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695a      	ldr	r2, [r3, #20]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d135      	bne.n	8007b20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	330c      	adds	r3, #12
 8007ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f023 0310 	bic.w	r3, r3, #16
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ada:	623a      	str	r2, [r7, #32]
 8007adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	69f9      	ldr	r1, [r7, #28]
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e5      	bne.n	8007aba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0310 	and.w	r3, r3, #16
 8007af8:	2b10      	cmp	r3, #16
 8007afa:	d10a      	bne.n	8007b12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fdbf 	bl	800769c <HAL_UARTEx_RxEventCallback>
 8007b1e:	e002      	b.n	8007b26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f7fb fbcf 	bl	80032c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e002      	b.n	8007b30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e000      	b.n	8007b30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b2e:	2302      	movs	r3, #2
  }
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3730      	adds	r7, #48	; 0x30
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	b09f      	sub	sp, #124	; 0x7c
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	68d9      	ldr	r1, [r3, #12]
 8007b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	ea40 0301 	orr.w	r3, r0, r1
 8007b58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	431a      	orrs	r2, r3
 8007b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b7c:	f021 010c 	bic.w	r1, r1, #12
 8007b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b86:	430b      	orrs	r3, r1
 8007b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b96:	6999      	ldr	r1, [r3, #24]
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	ea40 0301 	orr.w	r3, r0, r1
 8007ba0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4bc5      	ldr	r3, [pc, #788]	; (8007ebc <UART_SetConfig+0x384>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d004      	beq.n	8007bb6 <UART_SetConfig+0x7e>
 8007bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	4bc3      	ldr	r3, [pc, #780]	; (8007ec0 <UART_SetConfig+0x388>)
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d103      	bne.n	8007bbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bb6:	f7fe f879 	bl	8005cac <HAL_RCC_GetPCLK2Freq>
 8007bba:	6778      	str	r0, [r7, #116]	; 0x74
 8007bbc:	e002      	b.n	8007bc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bbe:	f7fe f861 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8007bc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bcc:	f040 80b6 	bne.w	8007d3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	f04f 0500 	mov.w	r5, #0
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	1891      	adds	r1, r2, r2
 8007bde:	6439      	str	r1, [r7, #64]	; 0x40
 8007be0:	415b      	adcs	r3, r3
 8007be2:	647b      	str	r3, [r7, #68]	; 0x44
 8007be4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007be8:	1912      	adds	r2, r2, r4
 8007bea:	eb45 0303 	adc.w	r3, r5, r3
 8007bee:	f04f 0000 	mov.w	r0, #0
 8007bf2:	f04f 0100 	mov.w	r1, #0
 8007bf6:	00d9      	lsls	r1, r3, #3
 8007bf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bfc:	00d0      	lsls	r0, r2, #3
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	1911      	adds	r1, r2, r4
 8007c04:	6639      	str	r1, [r7, #96]	; 0x60
 8007c06:	416b      	adcs	r3, r5
 8007c08:	667b      	str	r3, [r7, #100]	; 0x64
 8007c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	1891      	adds	r1, r2, r2
 8007c16:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c18:	415b      	adcs	r3, r3
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c24:	f7f8 fb24 	bl	8000270 <__aeabi_uldivmod>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4ba5      	ldr	r3, [pc, #660]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c32:	095b      	lsrs	r3, r3, #5
 8007c34:	011e      	lsls	r6, r3, #4
 8007c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c38:	461c      	mov	r4, r3
 8007c3a:	f04f 0500 	mov.w	r5, #0
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	1891      	adds	r1, r2, r2
 8007c44:	6339      	str	r1, [r7, #48]	; 0x30
 8007c46:	415b      	adcs	r3, r3
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c4e:	1912      	adds	r2, r2, r4
 8007c50:	eb45 0303 	adc.w	r3, r5, r3
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f04f 0100 	mov.w	r1, #0
 8007c5c:	00d9      	lsls	r1, r3, #3
 8007c5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c62:	00d0      	lsls	r0, r2, #3
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	1911      	adds	r1, r2, r4
 8007c6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c6c:	416b      	adcs	r3, r5
 8007c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	461a      	mov	r2, r3
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	1891      	adds	r1, r2, r2
 8007c7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c7e:	415b      	adcs	r3, r3
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007c8a:	f7f8 faf1 	bl	8000270 <__aeabi_uldivmod>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	4b8c      	ldr	r3, [pc, #560]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007c94:	fba3 1302 	umull	r1, r3, r3, r2
 8007c98:	095b      	lsrs	r3, r3, #5
 8007c9a:	2164      	movs	r1, #100	; 0x64
 8007c9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	3332      	adds	r3, #50	; 0x32
 8007ca6:	4a87      	ldr	r2, [pc, #540]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cb4:	441e      	add	r6, r3
 8007cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f04f 0100 	mov.w	r1, #0
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	1894      	adds	r4, r2, r2
 8007cc4:	623c      	str	r4, [r7, #32]
 8007cc6:	415b      	adcs	r3, r3
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007cce:	1812      	adds	r2, r2, r0
 8007cd0:	eb41 0303 	adc.w	r3, r1, r3
 8007cd4:	f04f 0400 	mov.w	r4, #0
 8007cd8:	f04f 0500 	mov.w	r5, #0
 8007cdc:	00dd      	lsls	r5, r3, #3
 8007cde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ce2:	00d4      	lsls	r4, r2, #3
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	1814      	adds	r4, r2, r0
 8007cea:	653c      	str	r4, [r7, #80]	; 0x50
 8007cec:	414b      	adcs	r3, r1
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
 8007cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f04f 0300 	mov.w	r3, #0
 8007cfa:	1891      	adds	r1, r2, r2
 8007cfc:	61b9      	str	r1, [r7, #24]
 8007cfe:	415b      	adcs	r3, r3
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d0a:	f7f8 fab1 	bl	8000270 <__aeabi_uldivmod>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4b6c      	ldr	r3, [pc, #432]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	00db      	lsls	r3, r3, #3
 8007d24:	3332      	adds	r3, #50	; 0x32
 8007d26:	4a67      	ldr	r2, [pc, #412]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 0207 	and.w	r2, r3, #7
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4432      	add	r2, r6
 8007d38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d3a:	e0b9      	b.n	8007eb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d3e:	461c      	mov	r4, r3
 8007d40:	f04f 0500 	mov.w	r5, #0
 8007d44:	4622      	mov	r2, r4
 8007d46:	462b      	mov	r3, r5
 8007d48:	1891      	adds	r1, r2, r2
 8007d4a:	6139      	str	r1, [r7, #16]
 8007d4c:	415b      	adcs	r3, r3
 8007d4e:	617b      	str	r3, [r7, #20]
 8007d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d54:	1912      	adds	r2, r2, r4
 8007d56:	eb45 0303 	adc.w	r3, r5, r3
 8007d5a:	f04f 0000 	mov.w	r0, #0
 8007d5e:	f04f 0100 	mov.w	r1, #0
 8007d62:	00d9      	lsls	r1, r3, #3
 8007d64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d68:	00d0      	lsls	r0, r2, #3
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	eb12 0804 	adds.w	r8, r2, r4
 8007d72:	eb43 0905 	adc.w	r9, r3, r5
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	f04f 0300 	mov.w	r3, #0
 8007d88:	008b      	lsls	r3, r1, #2
 8007d8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d8e:	0082      	lsls	r2, r0, #2
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f7f8 fa6c 	bl	8000270 <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4b49      	ldr	r3, [pc, #292]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	011e      	lsls	r6, r3, #4
 8007da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da8:	4618      	mov	r0, r3
 8007daa:	f04f 0100 	mov.w	r1, #0
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	1894      	adds	r4, r2, r2
 8007db4:	60bc      	str	r4, [r7, #8]
 8007db6:	415b      	adcs	r3, r3
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dbe:	1812      	adds	r2, r2, r0
 8007dc0:	eb41 0303 	adc.w	r3, r1, r3
 8007dc4:	f04f 0400 	mov.w	r4, #0
 8007dc8:	f04f 0500 	mov.w	r5, #0
 8007dcc:	00dd      	lsls	r5, r3, #3
 8007dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007dd2:	00d4      	lsls	r4, r2, #3
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	462b      	mov	r3, r5
 8007dd8:	1814      	adds	r4, r2, r0
 8007dda:	64bc      	str	r4, [r7, #72]	; 0x48
 8007ddc:	414b      	adcs	r3, r1
 8007dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	008b      	lsls	r3, r1, #2
 8007df4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007df8:	0082      	lsls	r2, r0, #2
 8007dfa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007dfe:	f7f8 fa37 	bl	8000270 <__aeabi_uldivmod>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4b2f      	ldr	r3, [pc, #188]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e08:	fba3 1302 	umull	r1, r3, r3, r2
 8007e0c:	095b      	lsrs	r3, r3, #5
 8007e0e:	2164      	movs	r1, #100	; 0x64
 8007e10:	fb01 f303 	mul.w	r3, r1, r3
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	3332      	adds	r3, #50	; 0x32
 8007e1a:	4a2a      	ldr	r2, [pc, #168]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e26:	441e      	add	r6, r3
 8007e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	1894      	adds	r4, r2, r2
 8007e36:	603c      	str	r4, [r7, #0]
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	607b      	str	r3, [r7, #4]
 8007e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e40:	1812      	adds	r2, r2, r0
 8007e42:	eb41 0303 	adc.w	r3, r1, r3
 8007e46:	f04f 0400 	mov.w	r4, #0
 8007e4a:	f04f 0500 	mov.w	r5, #0
 8007e4e:	00dd      	lsls	r5, r3, #3
 8007e50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e54:	00d4      	lsls	r4, r2, #3
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	eb12 0a00 	adds.w	sl, r2, r0
 8007e5e:	eb43 0b01 	adc.w	fp, r3, r1
 8007e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	008b      	lsls	r3, r1, #2
 8007e76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e7a:	0082      	lsls	r2, r0, #2
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	4659      	mov	r1, fp
 8007e80:	f7f8 f9f6 	bl	8000270 <__aeabi_uldivmod>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e8a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	2164      	movs	r1, #100	; 0x64
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	011b      	lsls	r3, r3, #4
 8007e9a:	3332      	adds	r3, #50	; 0x32
 8007e9c:	4a09      	ldr	r2, [pc, #36]	; (8007ec4 <UART_SetConfig+0x38c>)
 8007e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4432      	add	r2, r6
 8007eae:	609a      	str	r2, [r3, #8]
}
 8007eb0:	bf00      	nop
 8007eb2:	377c      	adds	r7, #124	; 0x7c
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	bf00      	nop
 8007ebc:	40011000 	.word	0x40011000
 8007ec0:	40011400 	.word	0x40011400
 8007ec4:	51eb851f 	.word	0x51eb851f

08007ec8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <FSMC_NORSRAM_Init+0xa0>)
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007ef2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007ef8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8007efe:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007f04:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8007f0a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007f10:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007f16:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8007f1c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8007f22:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8007f28:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8007f2e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8007f34:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d103      	bne.n	8007f4c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f4a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	fff00080 	.word	0xfff00080

08007f6c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f86:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007f8e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007f9a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8007fa2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8007faa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007fb4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	3b02      	subs	r3, #2
 8007fbc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8007fbe:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1c5a      	adds	r2, r3, #1
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6979      	ldr	r1, [r7, #20]
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008000:	d122      	bne.n	8008048 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4b15      	ldr	r3, [pc, #84]	; (8008064 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008010:	4013      	ands	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800801e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008026:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800802e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008034:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	4313      	orrs	r3, r2
 800803a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6979      	ldr	r1, [r7, #20]
 8008042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008046:	e005      	b.n	8008054 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	cff00000 	.word	0xcff00000

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000000c 	.word	0x2000000c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 fc4e 	bl	8008928 <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800bba0 	.word	0x0800bba0
 80080b0:	0800bba0 	.word	0x0800bba0
 80080b4:	0800bba0 	.word	0x0800bba0
 80080b8:	0800bba4 	.word	0x0800bba4

080080bc <memset>:
 80080bc:	4402      	add	r2, r0
 80080be:	4603      	mov	r3, r0
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d100      	bne.n	80080c6 <memset+0xa>
 80080c4:	4770      	bx	lr
 80080c6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ca:	e7f9      	b.n	80080c0 <memset+0x4>

080080cc <siprintf>:
 80080cc:	b40e      	push	{r1, r2, r3}
 80080ce:	b500      	push	{lr}
 80080d0:	b09c      	sub	sp, #112	; 0x70
 80080d2:	ab1d      	add	r3, sp, #116	; 0x74
 80080d4:	9002      	str	r0, [sp, #8]
 80080d6:	9006      	str	r0, [sp, #24]
 80080d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080dc:	4809      	ldr	r0, [pc, #36]	; (8008104 <siprintf+0x38>)
 80080de:	9107      	str	r1, [sp, #28]
 80080e0:	9104      	str	r1, [sp, #16]
 80080e2:	4909      	ldr	r1, [pc, #36]	; (8008108 <siprintf+0x3c>)
 80080e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	a902      	add	r1, sp, #8
 80080f0:	f000 f868 	bl	80081c4 <_svfiprintf_r>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	b01c      	add	sp, #112	; 0x70
 80080fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008100:	b003      	add	sp, #12
 8008102:	4770      	bx	lr
 8008104:	2000000c 	.word	0x2000000c
 8008108:	ffff0208 	.word	0xffff0208

0800810c <__ssputs_r>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	688e      	ldr	r6, [r1, #8]
 8008112:	429e      	cmp	r6, r3
 8008114:	4682      	mov	sl, r0
 8008116:	460c      	mov	r4, r1
 8008118:	4690      	mov	r8, r2
 800811a:	461f      	mov	r7, r3
 800811c:	d838      	bhi.n	8008190 <__ssputs_r+0x84>
 800811e:	898a      	ldrh	r2, [r1, #12]
 8008120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008124:	d032      	beq.n	800818c <__ssputs_r+0x80>
 8008126:	6825      	ldr	r5, [r4, #0]
 8008128:	6909      	ldr	r1, [r1, #16]
 800812a:	eba5 0901 	sub.w	r9, r5, r1
 800812e:	6965      	ldr	r5, [r4, #20]
 8008130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008138:	3301      	adds	r3, #1
 800813a:	444b      	add	r3, r9
 800813c:	106d      	asrs	r5, r5, #1
 800813e:	429d      	cmp	r5, r3
 8008140:	bf38      	it	cc
 8008142:	461d      	movcc	r5, r3
 8008144:	0553      	lsls	r3, r2, #21
 8008146:	d531      	bpl.n	80081ac <__ssputs_r+0xa0>
 8008148:	4629      	mov	r1, r5
 800814a:	f000 fb47 	bl	80087dc <_malloc_r>
 800814e:	4606      	mov	r6, r0
 8008150:	b950      	cbnz	r0, 8008168 <__ssputs_r+0x5c>
 8008152:	230c      	movs	r3, #12
 8008154:	f8ca 3000 	str.w	r3, [sl]
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008168:	6921      	ldr	r1, [r4, #16]
 800816a:	464a      	mov	r2, r9
 800816c:	f000 fabe 	bl	80086ec <memcpy>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	6126      	str	r6, [r4, #16]
 800817e:	6165      	str	r5, [r4, #20]
 8008180:	444e      	add	r6, r9
 8008182:	eba5 0509 	sub.w	r5, r5, r9
 8008186:	6026      	str	r6, [r4, #0]
 8008188:	60a5      	str	r5, [r4, #8]
 800818a:	463e      	mov	r6, r7
 800818c:	42be      	cmp	r6, r7
 800818e:	d900      	bls.n	8008192 <__ssputs_r+0x86>
 8008190:	463e      	mov	r6, r7
 8008192:	4632      	mov	r2, r6
 8008194:	6820      	ldr	r0, [r4, #0]
 8008196:	4641      	mov	r1, r8
 8008198:	f000 fab6 	bl	8008708 <memmove>
 800819c:	68a3      	ldr	r3, [r4, #8]
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	1b9b      	subs	r3, r3, r6
 80081a2:	4432      	add	r2, r6
 80081a4:	60a3      	str	r3, [r4, #8]
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7db      	b.n	8008164 <__ssputs_r+0x58>
 80081ac:	462a      	mov	r2, r5
 80081ae:	f000 fb6f 	bl	8008890 <_realloc_r>
 80081b2:	4606      	mov	r6, r0
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d1e1      	bne.n	800817c <__ssputs_r+0x70>
 80081b8:	6921      	ldr	r1, [r4, #16]
 80081ba:	4650      	mov	r0, sl
 80081bc:	f000 fabe 	bl	800873c <_free_r>
 80081c0:	e7c7      	b.n	8008152 <__ssputs_r+0x46>
	...

080081c4 <_svfiprintf_r>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4698      	mov	r8, r3
 80081ca:	898b      	ldrh	r3, [r1, #12]
 80081cc:	061b      	lsls	r3, r3, #24
 80081ce:	b09d      	sub	sp, #116	; 0x74
 80081d0:	4607      	mov	r7, r0
 80081d2:	460d      	mov	r5, r1
 80081d4:	4614      	mov	r4, r2
 80081d6:	d50e      	bpl.n	80081f6 <_svfiprintf_r+0x32>
 80081d8:	690b      	ldr	r3, [r1, #16]
 80081da:	b963      	cbnz	r3, 80081f6 <_svfiprintf_r+0x32>
 80081dc:	2140      	movs	r1, #64	; 0x40
 80081de:	f000 fafd 	bl	80087dc <_malloc_r>
 80081e2:	6028      	str	r0, [r5, #0]
 80081e4:	6128      	str	r0, [r5, #16]
 80081e6:	b920      	cbnz	r0, 80081f2 <_svfiprintf_r+0x2e>
 80081e8:	230c      	movs	r3, #12
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	e0d1      	b.n	8008396 <_svfiprintf_r+0x1d2>
 80081f2:	2340      	movs	r3, #64	; 0x40
 80081f4:	616b      	str	r3, [r5, #20]
 80081f6:	2300      	movs	r3, #0
 80081f8:	9309      	str	r3, [sp, #36]	; 0x24
 80081fa:	2320      	movs	r3, #32
 80081fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008200:	f8cd 800c 	str.w	r8, [sp, #12]
 8008204:	2330      	movs	r3, #48	; 0x30
 8008206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083b0 <_svfiprintf_r+0x1ec>
 800820a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820e:	f04f 0901 	mov.w	r9, #1
 8008212:	4623      	mov	r3, r4
 8008214:	469a      	mov	sl, r3
 8008216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821a:	b10a      	cbz	r2, 8008220 <_svfiprintf_r+0x5c>
 800821c:	2a25      	cmp	r2, #37	; 0x25
 800821e:	d1f9      	bne.n	8008214 <_svfiprintf_r+0x50>
 8008220:	ebba 0b04 	subs.w	fp, sl, r4
 8008224:	d00b      	beq.n	800823e <_svfiprintf_r+0x7a>
 8008226:	465b      	mov	r3, fp
 8008228:	4622      	mov	r2, r4
 800822a:	4629      	mov	r1, r5
 800822c:	4638      	mov	r0, r7
 800822e:	f7ff ff6d 	bl	800810c <__ssputs_r>
 8008232:	3001      	adds	r0, #1
 8008234:	f000 80aa 	beq.w	800838c <_svfiprintf_r+0x1c8>
 8008238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823a:	445a      	add	r2, fp
 800823c:	9209      	str	r2, [sp, #36]	; 0x24
 800823e:	f89a 3000 	ldrb.w	r3, [sl]
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80a2 	beq.w	800838c <_svfiprintf_r+0x1c8>
 8008248:	2300      	movs	r3, #0
 800824a:	f04f 32ff 	mov.w	r2, #4294967295
 800824e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008252:	f10a 0a01 	add.w	sl, sl, #1
 8008256:	9304      	str	r3, [sp, #16]
 8008258:	9307      	str	r3, [sp, #28]
 800825a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800825e:	931a      	str	r3, [sp, #104]	; 0x68
 8008260:	4654      	mov	r4, sl
 8008262:	2205      	movs	r2, #5
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	4851      	ldr	r0, [pc, #324]	; (80083b0 <_svfiprintf_r+0x1ec>)
 800826a:	f7f7 ffb1 	bl	80001d0 <memchr>
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	b9d8      	cbnz	r0, 80082aa <_svfiprintf_r+0xe6>
 8008272:	06d0      	lsls	r0, r2, #27
 8008274:	bf44      	itt	mi
 8008276:	2320      	movmi	r3, #32
 8008278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827c:	0711      	lsls	r1, r2, #28
 800827e:	bf44      	itt	mi
 8008280:	232b      	movmi	r3, #43	; 0x2b
 8008282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008286:	f89a 3000 	ldrb.w	r3, [sl]
 800828a:	2b2a      	cmp	r3, #42	; 0x2a
 800828c:	d015      	beq.n	80082ba <_svfiprintf_r+0xf6>
 800828e:	9a07      	ldr	r2, [sp, #28]
 8008290:	4654      	mov	r4, sl
 8008292:	2000      	movs	r0, #0
 8008294:	f04f 0c0a 	mov.w	ip, #10
 8008298:	4621      	mov	r1, r4
 800829a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800829e:	3b30      	subs	r3, #48	; 0x30
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d94e      	bls.n	8008342 <_svfiprintf_r+0x17e>
 80082a4:	b1b0      	cbz	r0, 80082d4 <_svfiprintf_r+0x110>
 80082a6:	9207      	str	r2, [sp, #28]
 80082a8:	e014      	b.n	80082d4 <_svfiprintf_r+0x110>
 80082aa:	eba0 0308 	sub.w	r3, r0, r8
 80082ae:	fa09 f303 	lsl.w	r3, r9, r3
 80082b2:	4313      	orrs	r3, r2
 80082b4:	9304      	str	r3, [sp, #16]
 80082b6:	46a2      	mov	sl, r4
 80082b8:	e7d2      	b.n	8008260 <_svfiprintf_r+0x9c>
 80082ba:	9b03      	ldr	r3, [sp, #12]
 80082bc:	1d19      	adds	r1, r3, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	9103      	str	r1, [sp, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	bfbb      	ittet	lt
 80082c6:	425b      	neglt	r3, r3
 80082c8:	f042 0202 	orrlt.w	r2, r2, #2
 80082cc:	9307      	strge	r3, [sp, #28]
 80082ce:	9307      	strlt	r3, [sp, #28]
 80082d0:	bfb8      	it	lt
 80082d2:	9204      	strlt	r2, [sp, #16]
 80082d4:	7823      	ldrb	r3, [r4, #0]
 80082d6:	2b2e      	cmp	r3, #46	; 0x2e
 80082d8:	d10c      	bne.n	80082f4 <_svfiprintf_r+0x130>
 80082da:	7863      	ldrb	r3, [r4, #1]
 80082dc:	2b2a      	cmp	r3, #42	; 0x2a
 80082de:	d135      	bne.n	800834c <_svfiprintf_r+0x188>
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	9203      	str	r2, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	bfb8      	it	lt
 80082ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80082f0:	3402      	adds	r4, #2
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083c0 <_svfiprintf_r+0x1fc>
 80082f8:	7821      	ldrb	r1, [r4, #0]
 80082fa:	2203      	movs	r2, #3
 80082fc:	4650      	mov	r0, sl
 80082fe:	f7f7 ff67 	bl	80001d0 <memchr>
 8008302:	b140      	cbz	r0, 8008316 <_svfiprintf_r+0x152>
 8008304:	2340      	movs	r3, #64	; 0x40
 8008306:	eba0 000a 	sub.w	r0, r0, sl
 800830a:	fa03 f000 	lsl.w	r0, r3, r0
 800830e:	9b04      	ldr	r3, [sp, #16]
 8008310:	4303      	orrs	r3, r0
 8008312:	3401      	adds	r4, #1
 8008314:	9304      	str	r3, [sp, #16]
 8008316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831a:	4826      	ldr	r0, [pc, #152]	; (80083b4 <_svfiprintf_r+0x1f0>)
 800831c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008320:	2206      	movs	r2, #6
 8008322:	f7f7 ff55 	bl	80001d0 <memchr>
 8008326:	2800      	cmp	r0, #0
 8008328:	d038      	beq.n	800839c <_svfiprintf_r+0x1d8>
 800832a:	4b23      	ldr	r3, [pc, #140]	; (80083b8 <_svfiprintf_r+0x1f4>)
 800832c:	bb1b      	cbnz	r3, 8008376 <_svfiprintf_r+0x1b2>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	3307      	adds	r3, #7
 8008332:	f023 0307 	bic.w	r3, r3, #7
 8008336:	3308      	adds	r3, #8
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833c:	4433      	add	r3, r6
 800833e:	9309      	str	r3, [sp, #36]	; 0x24
 8008340:	e767      	b.n	8008212 <_svfiprintf_r+0x4e>
 8008342:	fb0c 3202 	mla	r2, ip, r2, r3
 8008346:	460c      	mov	r4, r1
 8008348:	2001      	movs	r0, #1
 800834a:	e7a5      	b.n	8008298 <_svfiprintf_r+0xd4>
 800834c:	2300      	movs	r3, #0
 800834e:	3401      	adds	r4, #1
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	4619      	mov	r1, r3
 8008354:	f04f 0c0a 	mov.w	ip, #10
 8008358:	4620      	mov	r0, r4
 800835a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800835e:	3a30      	subs	r2, #48	; 0x30
 8008360:	2a09      	cmp	r2, #9
 8008362:	d903      	bls.n	800836c <_svfiprintf_r+0x1a8>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d0c5      	beq.n	80082f4 <_svfiprintf_r+0x130>
 8008368:	9105      	str	r1, [sp, #20]
 800836a:	e7c3      	b.n	80082f4 <_svfiprintf_r+0x130>
 800836c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008370:	4604      	mov	r4, r0
 8008372:	2301      	movs	r3, #1
 8008374:	e7f0      	b.n	8008358 <_svfiprintf_r+0x194>
 8008376:	ab03      	add	r3, sp, #12
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	462a      	mov	r2, r5
 800837c:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <_svfiprintf_r+0x1f8>)
 800837e:	a904      	add	r1, sp, #16
 8008380:	4638      	mov	r0, r7
 8008382:	f3af 8000 	nop.w
 8008386:	1c42      	adds	r2, r0, #1
 8008388:	4606      	mov	r6, r0
 800838a:	d1d6      	bne.n	800833a <_svfiprintf_r+0x176>
 800838c:	89ab      	ldrh	r3, [r5, #12]
 800838e:	065b      	lsls	r3, r3, #25
 8008390:	f53f af2c 	bmi.w	80081ec <_svfiprintf_r+0x28>
 8008394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008396:	b01d      	add	sp, #116	; 0x74
 8008398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839c:	ab03      	add	r3, sp, #12
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <_svfiprintf_r+0x1f8>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	4638      	mov	r0, r7
 80083a8:	f000 f87a 	bl	80084a0 <_printf_i>
 80083ac:	e7eb      	b.n	8008386 <_svfiprintf_r+0x1c2>
 80083ae:	bf00      	nop
 80083b0:	0800bb64 	.word	0x0800bb64
 80083b4:	0800bb6e 	.word	0x0800bb6e
 80083b8:	00000000 	.word	0x00000000
 80083bc:	0800810d 	.word	0x0800810d
 80083c0:	0800bb6a 	.word	0x0800bb6a

080083c4 <_printf_common>:
 80083c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c8:	4616      	mov	r6, r2
 80083ca:	4699      	mov	r9, r3
 80083cc:	688a      	ldr	r2, [r1, #8]
 80083ce:	690b      	ldr	r3, [r1, #16]
 80083d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	bfb8      	it	lt
 80083d8:	4613      	movlt	r3, r2
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083e0:	4607      	mov	r7, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	b10a      	cbz	r2, 80083ea <_printf_common+0x26>
 80083e6:	3301      	adds	r3, #1
 80083e8:	6033      	str	r3, [r6, #0]
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	0699      	lsls	r1, r3, #26
 80083ee:	bf42      	ittt	mi
 80083f0:	6833      	ldrmi	r3, [r6, #0]
 80083f2:	3302      	addmi	r3, #2
 80083f4:	6033      	strmi	r3, [r6, #0]
 80083f6:	6825      	ldr	r5, [r4, #0]
 80083f8:	f015 0506 	ands.w	r5, r5, #6
 80083fc:	d106      	bne.n	800840c <_printf_common+0x48>
 80083fe:	f104 0a19 	add.w	sl, r4, #25
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	6832      	ldr	r2, [r6, #0]
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	42ab      	cmp	r3, r5
 800840a:	dc26      	bgt.n	800845a <_printf_common+0x96>
 800840c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008410:	1e13      	subs	r3, r2, #0
 8008412:	6822      	ldr	r2, [r4, #0]
 8008414:	bf18      	it	ne
 8008416:	2301      	movne	r3, #1
 8008418:	0692      	lsls	r2, r2, #26
 800841a:	d42b      	bmi.n	8008474 <_printf_common+0xb0>
 800841c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008420:	4649      	mov	r1, r9
 8008422:	4638      	mov	r0, r7
 8008424:	47c0      	blx	r8
 8008426:	3001      	adds	r0, #1
 8008428:	d01e      	beq.n	8008468 <_printf_common+0xa4>
 800842a:	6823      	ldr	r3, [r4, #0]
 800842c:	68e5      	ldr	r5, [r4, #12]
 800842e:	6832      	ldr	r2, [r6, #0]
 8008430:	f003 0306 	and.w	r3, r3, #6
 8008434:	2b04      	cmp	r3, #4
 8008436:	bf08      	it	eq
 8008438:	1aad      	subeq	r5, r5, r2
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	6922      	ldr	r2, [r4, #16]
 800843e:	bf0c      	ite	eq
 8008440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008444:	2500      	movne	r5, #0
 8008446:	4293      	cmp	r3, r2
 8008448:	bfc4      	itt	gt
 800844a:	1a9b      	subgt	r3, r3, r2
 800844c:	18ed      	addgt	r5, r5, r3
 800844e:	2600      	movs	r6, #0
 8008450:	341a      	adds	r4, #26
 8008452:	42b5      	cmp	r5, r6
 8008454:	d11a      	bne.n	800848c <_printf_common+0xc8>
 8008456:	2000      	movs	r0, #0
 8008458:	e008      	b.n	800846c <_printf_common+0xa8>
 800845a:	2301      	movs	r3, #1
 800845c:	4652      	mov	r2, sl
 800845e:	4649      	mov	r1, r9
 8008460:	4638      	mov	r0, r7
 8008462:	47c0      	blx	r8
 8008464:	3001      	adds	r0, #1
 8008466:	d103      	bne.n	8008470 <_printf_common+0xac>
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008470:	3501      	adds	r5, #1
 8008472:	e7c6      	b.n	8008402 <_printf_common+0x3e>
 8008474:	18e1      	adds	r1, r4, r3
 8008476:	1c5a      	adds	r2, r3, #1
 8008478:	2030      	movs	r0, #48	; 0x30
 800847a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800847e:	4422      	add	r2, r4
 8008480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008488:	3302      	adds	r3, #2
 800848a:	e7c7      	b.n	800841c <_printf_common+0x58>
 800848c:	2301      	movs	r3, #1
 800848e:	4622      	mov	r2, r4
 8008490:	4649      	mov	r1, r9
 8008492:	4638      	mov	r0, r7
 8008494:	47c0      	blx	r8
 8008496:	3001      	adds	r0, #1
 8008498:	d0e6      	beq.n	8008468 <_printf_common+0xa4>
 800849a:	3601      	adds	r6, #1
 800849c:	e7d9      	b.n	8008452 <_printf_common+0x8e>
	...

080084a0 <_printf_i>:
 80084a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084a4:	460c      	mov	r4, r1
 80084a6:	4691      	mov	r9, r2
 80084a8:	7e27      	ldrb	r7, [r4, #24]
 80084aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084ac:	2f78      	cmp	r7, #120	; 0x78
 80084ae:	4680      	mov	r8, r0
 80084b0:	469a      	mov	sl, r3
 80084b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084b6:	d807      	bhi.n	80084c8 <_printf_i+0x28>
 80084b8:	2f62      	cmp	r7, #98	; 0x62
 80084ba:	d80a      	bhi.n	80084d2 <_printf_i+0x32>
 80084bc:	2f00      	cmp	r7, #0
 80084be:	f000 80d8 	beq.w	8008672 <_printf_i+0x1d2>
 80084c2:	2f58      	cmp	r7, #88	; 0x58
 80084c4:	f000 80a3 	beq.w	800860e <_printf_i+0x16e>
 80084c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084d0:	e03a      	b.n	8008548 <_printf_i+0xa8>
 80084d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084d6:	2b15      	cmp	r3, #21
 80084d8:	d8f6      	bhi.n	80084c8 <_printf_i+0x28>
 80084da:	a001      	add	r0, pc, #4	; (adr r0, 80084e0 <_printf_i+0x40>)
 80084dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084e0:	08008539 	.word	0x08008539
 80084e4:	0800854d 	.word	0x0800854d
 80084e8:	080084c9 	.word	0x080084c9
 80084ec:	080084c9 	.word	0x080084c9
 80084f0:	080084c9 	.word	0x080084c9
 80084f4:	080084c9 	.word	0x080084c9
 80084f8:	0800854d 	.word	0x0800854d
 80084fc:	080084c9 	.word	0x080084c9
 8008500:	080084c9 	.word	0x080084c9
 8008504:	080084c9 	.word	0x080084c9
 8008508:	080084c9 	.word	0x080084c9
 800850c:	08008659 	.word	0x08008659
 8008510:	0800857d 	.word	0x0800857d
 8008514:	0800863b 	.word	0x0800863b
 8008518:	080084c9 	.word	0x080084c9
 800851c:	080084c9 	.word	0x080084c9
 8008520:	0800867b 	.word	0x0800867b
 8008524:	080084c9 	.word	0x080084c9
 8008528:	0800857d 	.word	0x0800857d
 800852c:	080084c9 	.word	0x080084c9
 8008530:	080084c9 	.word	0x080084c9
 8008534:	08008643 	.word	0x08008643
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	1d1a      	adds	r2, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	600a      	str	r2, [r1, #0]
 8008540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008548:	2301      	movs	r3, #1
 800854a:	e0a3      	b.n	8008694 <_printf_i+0x1f4>
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	6808      	ldr	r0, [r1, #0]
 8008550:	062e      	lsls	r6, r5, #24
 8008552:	f100 0304 	add.w	r3, r0, #4
 8008556:	d50a      	bpl.n	800856e <_printf_i+0xce>
 8008558:	6805      	ldr	r5, [r0, #0]
 800855a:	600b      	str	r3, [r1, #0]
 800855c:	2d00      	cmp	r5, #0
 800855e:	da03      	bge.n	8008568 <_printf_i+0xc8>
 8008560:	232d      	movs	r3, #45	; 0x2d
 8008562:	426d      	negs	r5, r5
 8008564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008568:	485e      	ldr	r0, [pc, #376]	; (80086e4 <_printf_i+0x244>)
 800856a:	230a      	movs	r3, #10
 800856c:	e019      	b.n	80085a2 <_printf_i+0x102>
 800856e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008572:	6805      	ldr	r5, [r0, #0]
 8008574:	600b      	str	r3, [r1, #0]
 8008576:	bf18      	it	ne
 8008578:	b22d      	sxthne	r5, r5
 800857a:	e7ef      	b.n	800855c <_printf_i+0xbc>
 800857c:	680b      	ldr	r3, [r1, #0]
 800857e:	6825      	ldr	r5, [r4, #0]
 8008580:	1d18      	adds	r0, r3, #4
 8008582:	6008      	str	r0, [r1, #0]
 8008584:	0628      	lsls	r0, r5, #24
 8008586:	d501      	bpl.n	800858c <_printf_i+0xec>
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	e002      	b.n	8008592 <_printf_i+0xf2>
 800858c:	0669      	lsls	r1, r5, #25
 800858e:	d5fb      	bpl.n	8008588 <_printf_i+0xe8>
 8008590:	881d      	ldrh	r5, [r3, #0]
 8008592:	4854      	ldr	r0, [pc, #336]	; (80086e4 <_printf_i+0x244>)
 8008594:	2f6f      	cmp	r7, #111	; 0x6f
 8008596:	bf0c      	ite	eq
 8008598:	2308      	moveq	r3, #8
 800859a:	230a      	movne	r3, #10
 800859c:	2100      	movs	r1, #0
 800859e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085a2:	6866      	ldr	r6, [r4, #4]
 80085a4:	60a6      	str	r6, [r4, #8]
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	bfa2      	ittt	ge
 80085aa:	6821      	ldrge	r1, [r4, #0]
 80085ac:	f021 0104 	bicge.w	r1, r1, #4
 80085b0:	6021      	strge	r1, [r4, #0]
 80085b2:	b90d      	cbnz	r5, 80085b8 <_printf_i+0x118>
 80085b4:	2e00      	cmp	r6, #0
 80085b6:	d04d      	beq.n	8008654 <_printf_i+0x1b4>
 80085b8:	4616      	mov	r6, r2
 80085ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80085be:	fb03 5711 	mls	r7, r3, r1, r5
 80085c2:	5dc7      	ldrb	r7, [r0, r7]
 80085c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085c8:	462f      	mov	r7, r5
 80085ca:	42bb      	cmp	r3, r7
 80085cc:	460d      	mov	r5, r1
 80085ce:	d9f4      	bls.n	80085ba <_printf_i+0x11a>
 80085d0:	2b08      	cmp	r3, #8
 80085d2:	d10b      	bne.n	80085ec <_printf_i+0x14c>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07df      	lsls	r7, r3, #31
 80085d8:	d508      	bpl.n	80085ec <_printf_i+0x14c>
 80085da:	6923      	ldr	r3, [r4, #16]
 80085dc:	6861      	ldr	r1, [r4, #4]
 80085de:	4299      	cmp	r1, r3
 80085e0:	bfde      	ittt	le
 80085e2:	2330      	movle	r3, #48	; 0x30
 80085e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085ec:	1b92      	subs	r2, r2, r6
 80085ee:	6122      	str	r2, [r4, #16]
 80085f0:	f8cd a000 	str.w	sl, [sp]
 80085f4:	464b      	mov	r3, r9
 80085f6:	aa03      	add	r2, sp, #12
 80085f8:	4621      	mov	r1, r4
 80085fa:	4640      	mov	r0, r8
 80085fc:	f7ff fee2 	bl	80083c4 <_printf_common>
 8008600:	3001      	adds	r0, #1
 8008602:	d14c      	bne.n	800869e <_printf_i+0x1fe>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	b004      	add	sp, #16
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	4835      	ldr	r0, [pc, #212]	; (80086e4 <_printf_i+0x244>)
 8008610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008614:	6823      	ldr	r3, [r4, #0]
 8008616:	680e      	ldr	r6, [r1, #0]
 8008618:	061f      	lsls	r7, r3, #24
 800861a:	f856 5b04 	ldr.w	r5, [r6], #4
 800861e:	600e      	str	r6, [r1, #0]
 8008620:	d514      	bpl.n	800864c <_printf_i+0x1ac>
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	bf44      	itt	mi
 8008626:	f043 0320 	orrmi.w	r3, r3, #32
 800862a:	6023      	strmi	r3, [r4, #0]
 800862c:	b91d      	cbnz	r5, 8008636 <_printf_i+0x196>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f023 0320 	bic.w	r3, r3, #32
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	2310      	movs	r3, #16
 8008638:	e7b0      	b.n	800859c <_printf_i+0xfc>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	f043 0320 	orr.w	r3, r3, #32
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	2378      	movs	r3, #120	; 0x78
 8008644:	4828      	ldr	r0, [pc, #160]	; (80086e8 <_printf_i+0x248>)
 8008646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800864a:	e7e3      	b.n	8008614 <_printf_i+0x174>
 800864c:	065e      	lsls	r6, r3, #25
 800864e:	bf48      	it	mi
 8008650:	b2ad      	uxthmi	r5, r5
 8008652:	e7e6      	b.n	8008622 <_printf_i+0x182>
 8008654:	4616      	mov	r6, r2
 8008656:	e7bb      	b.n	80085d0 <_printf_i+0x130>
 8008658:	680b      	ldr	r3, [r1, #0]
 800865a:	6826      	ldr	r6, [r4, #0]
 800865c:	6960      	ldr	r0, [r4, #20]
 800865e:	1d1d      	adds	r5, r3, #4
 8008660:	600d      	str	r5, [r1, #0]
 8008662:	0635      	lsls	r5, r6, #24
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	d501      	bpl.n	800866c <_printf_i+0x1cc>
 8008668:	6018      	str	r0, [r3, #0]
 800866a:	e002      	b.n	8008672 <_printf_i+0x1d2>
 800866c:	0671      	lsls	r1, r6, #25
 800866e:	d5fb      	bpl.n	8008668 <_printf_i+0x1c8>
 8008670:	8018      	strh	r0, [r3, #0]
 8008672:	2300      	movs	r3, #0
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	4616      	mov	r6, r2
 8008678:	e7ba      	b.n	80085f0 <_printf_i+0x150>
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	1d1a      	adds	r2, r3, #4
 800867e:	600a      	str	r2, [r1, #0]
 8008680:	681e      	ldr	r6, [r3, #0]
 8008682:	6862      	ldr	r2, [r4, #4]
 8008684:	2100      	movs	r1, #0
 8008686:	4630      	mov	r0, r6
 8008688:	f7f7 fda2 	bl	80001d0 <memchr>
 800868c:	b108      	cbz	r0, 8008692 <_printf_i+0x1f2>
 800868e:	1b80      	subs	r0, r0, r6
 8008690:	6060      	str	r0, [r4, #4]
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	2300      	movs	r3, #0
 8008698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800869c:	e7a8      	b.n	80085f0 <_printf_i+0x150>
 800869e:	6923      	ldr	r3, [r4, #16]
 80086a0:	4632      	mov	r2, r6
 80086a2:	4649      	mov	r1, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	47d0      	blx	sl
 80086a8:	3001      	adds	r0, #1
 80086aa:	d0ab      	beq.n	8008604 <_printf_i+0x164>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	079b      	lsls	r3, r3, #30
 80086b0:	d413      	bmi.n	80086da <_printf_i+0x23a>
 80086b2:	68e0      	ldr	r0, [r4, #12]
 80086b4:	9b03      	ldr	r3, [sp, #12]
 80086b6:	4298      	cmp	r0, r3
 80086b8:	bfb8      	it	lt
 80086ba:	4618      	movlt	r0, r3
 80086bc:	e7a4      	b.n	8008608 <_printf_i+0x168>
 80086be:	2301      	movs	r3, #1
 80086c0:	4632      	mov	r2, r6
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	47d0      	blx	sl
 80086c8:	3001      	adds	r0, #1
 80086ca:	d09b      	beq.n	8008604 <_printf_i+0x164>
 80086cc:	3501      	adds	r5, #1
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	9903      	ldr	r1, [sp, #12]
 80086d2:	1a5b      	subs	r3, r3, r1
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	dcf2      	bgt.n	80086be <_printf_i+0x21e>
 80086d8:	e7eb      	b.n	80086b2 <_printf_i+0x212>
 80086da:	2500      	movs	r5, #0
 80086dc:	f104 0619 	add.w	r6, r4, #25
 80086e0:	e7f5      	b.n	80086ce <_printf_i+0x22e>
 80086e2:	bf00      	nop
 80086e4:	0800bb75 	.word	0x0800bb75
 80086e8:	0800bb86 	.word	0x0800bb86

080086ec <memcpy>:
 80086ec:	440a      	add	r2, r1
 80086ee:	4291      	cmp	r1, r2
 80086f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086f4:	d100      	bne.n	80086f8 <memcpy+0xc>
 80086f6:	4770      	bx	lr
 80086f8:	b510      	push	{r4, lr}
 80086fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008702:	4291      	cmp	r1, r2
 8008704:	d1f9      	bne.n	80086fa <memcpy+0xe>
 8008706:	bd10      	pop	{r4, pc}

08008708 <memmove>:
 8008708:	4288      	cmp	r0, r1
 800870a:	b510      	push	{r4, lr}
 800870c:	eb01 0402 	add.w	r4, r1, r2
 8008710:	d902      	bls.n	8008718 <memmove+0x10>
 8008712:	4284      	cmp	r4, r0
 8008714:	4623      	mov	r3, r4
 8008716:	d807      	bhi.n	8008728 <memmove+0x20>
 8008718:	1e43      	subs	r3, r0, #1
 800871a:	42a1      	cmp	r1, r4
 800871c:	d008      	beq.n	8008730 <memmove+0x28>
 800871e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008726:	e7f8      	b.n	800871a <memmove+0x12>
 8008728:	4402      	add	r2, r0
 800872a:	4601      	mov	r1, r0
 800872c:	428a      	cmp	r2, r1
 800872e:	d100      	bne.n	8008732 <memmove+0x2a>
 8008730:	bd10      	pop	{r4, pc}
 8008732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800873a:	e7f7      	b.n	800872c <memmove+0x24>

0800873c <_free_r>:
 800873c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873e:	2900      	cmp	r1, #0
 8008740:	d048      	beq.n	80087d4 <_free_r+0x98>
 8008742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008746:	9001      	str	r0, [sp, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f1a1 0404 	sub.w	r4, r1, #4
 800874e:	bfb8      	it	lt
 8008750:	18e4      	addlt	r4, r4, r3
 8008752:	f000 f8d3 	bl	80088fc <__malloc_lock>
 8008756:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <_free_r+0x9c>)
 8008758:	9801      	ldr	r0, [sp, #4]
 800875a:	6813      	ldr	r3, [r2, #0]
 800875c:	4615      	mov	r5, r2
 800875e:	b933      	cbnz	r3, 800876e <_free_r+0x32>
 8008760:	6063      	str	r3, [r4, #4]
 8008762:	6014      	str	r4, [r2, #0]
 8008764:	b003      	add	sp, #12
 8008766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800876a:	f000 b8cd 	b.w	8008908 <__malloc_unlock>
 800876e:	42a3      	cmp	r3, r4
 8008770:	d90b      	bls.n	800878a <_free_r+0x4e>
 8008772:	6821      	ldr	r1, [r4, #0]
 8008774:	1862      	adds	r2, r4, r1
 8008776:	4293      	cmp	r3, r2
 8008778:	bf04      	itt	eq
 800877a:	681a      	ldreq	r2, [r3, #0]
 800877c:	685b      	ldreq	r3, [r3, #4]
 800877e:	6063      	str	r3, [r4, #4]
 8008780:	bf04      	itt	eq
 8008782:	1852      	addeq	r2, r2, r1
 8008784:	6022      	streq	r2, [r4, #0]
 8008786:	602c      	str	r4, [r5, #0]
 8008788:	e7ec      	b.n	8008764 <_free_r+0x28>
 800878a:	461a      	mov	r2, r3
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	b10b      	cbz	r3, 8008794 <_free_r+0x58>
 8008790:	42a3      	cmp	r3, r4
 8008792:	d9fa      	bls.n	800878a <_free_r+0x4e>
 8008794:	6811      	ldr	r1, [r2, #0]
 8008796:	1855      	adds	r5, r2, r1
 8008798:	42a5      	cmp	r5, r4
 800879a:	d10b      	bne.n	80087b4 <_free_r+0x78>
 800879c:	6824      	ldr	r4, [r4, #0]
 800879e:	4421      	add	r1, r4
 80087a0:	1854      	adds	r4, r2, r1
 80087a2:	42a3      	cmp	r3, r4
 80087a4:	6011      	str	r1, [r2, #0]
 80087a6:	d1dd      	bne.n	8008764 <_free_r+0x28>
 80087a8:	681c      	ldr	r4, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	6053      	str	r3, [r2, #4]
 80087ae:	4421      	add	r1, r4
 80087b0:	6011      	str	r1, [r2, #0]
 80087b2:	e7d7      	b.n	8008764 <_free_r+0x28>
 80087b4:	d902      	bls.n	80087bc <_free_r+0x80>
 80087b6:	230c      	movs	r3, #12
 80087b8:	6003      	str	r3, [r0, #0]
 80087ba:	e7d3      	b.n	8008764 <_free_r+0x28>
 80087bc:	6825      	ldr	r5, [r4, #0]
 80087be:	1961      	adds	r1, r4, r5
 80087c0:	428b      	cmp	r3, r1
 80087c2:	bf04      	itt	eq
 80087c4:	6819      	ldreq	r1, [r3, #0]
 80087c6:	685b      	ldreq	r3, [r3, #4]
 80087c8:	6063      	str	r3, [r4, #4]
 80087ca:	bf04      	itt	eq
 80087cc:	1949      	addeq	r1, r1, r5
 80087ce:	6021      	streq	r1, [r4, #0]
 80087d0:	6054      	str	r4, [r2, #4]
 80087d2:	e7c7      	b.n	8008764 <_free_r+0x28>
 80087d4:	b003      	add	sp, #12
 80087d6:	bd30      	pop	{r4, r5, pc}
 80087d8:	200000d0 	.word	0x200000d0

080087dc <_malloc_r>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	1ccd      	adds	r5, r1, #3
 80087e0:	f025 0503 	bic.w	r5, r5, #3
 80087e4:	3508      	adds	r5, #8
 80087e6:	2d0c      	cmp	r5, #12
 80087e8:	bf38      	it	cc
 80087ea:	250c      	movcc	r5, #12
 80087ec:	2d00      	cmp	r5, #0
 80087ee:	4606      	mov	r6, r0
 80087f0:	db01      	blt.n	80087f6 <_malloc_r+0x1a>
 80087f2:	42a9      	cmp	r1, r5
 80087f4:	d903      	bls.n	80087fe <_malloc_r+0x22>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6033      	str	r3, [r6, #0]
 80087fa:	2000      	movs	r0, #0
 80087fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fe:	f000 f87d 	bl	80088fc <__malloc_lock>
 8008802:	4921      	ldr	r1, [pc, #132]	; (8008888 <_malloc_r+0xac>)
 8008804:	680a      	ldr	r2, [r1, #0]
 8008806:	4614      	mov	r4, r2
 8008808:	b99c      	cbnz	r4, 8008832 <_malloc_r+0x56>
 800880a:	4f20      	ldr	r7, [pc, #128]	; (800888c <_malloc_r+0xb0>)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	b923      	cbnz	r3, 800881a <_malloc_r+0x3e>
 8008810:	4621      	mov	r1, r4
 8008812:	4630      	mov	r0, r6
 8008814:	f000 f862 	bl	80088dc <_sbrk_r>
 8008818:	6038      	str	r0, [r7, #0]
 800881a:	4629      	mov	r1, r5
 800881c:	4630      	mov	r0, r6
 800881e:	f000 f85d 	bl	80088dc <_sbrk_r>
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d123      	bne.n	800886e <_malloc_r+0x92>
 8008826:	230c      	movs	r3, #12
 8008828:	6033      	str	r3, [r6, #0]
 800882a:	4630      	mov	r0, r6
 800882c:	f000 f86c 	bl	8008908 <__malloc_unlock>
 8008830:	e7e3      	b.n	80087fa <_malloc_r+0x1e>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	1b5b      	subs	r3, r3, r5
 8008836:	d417      	bmi.n	8008868 <_malloc_r+0x8c>
 8008838:	2b0b      	cmp	r3, #11
 800883a:	d903      	bls.n	8008844 <_malloc_r+0x68>
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	441c      	add	r4, r3
 8008840:	6025      	str	r5, [r4, #0]
 8008842:	e004      	b.n	800884e <_malloc_r+0x72>
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	42a2      	cmp	r2, r4
 8008848:	bf0c      	ite	eq
 800884a:	600b      	streq	r3, [r1, #0]
 800884c:	6053      	strne	r3, [r2, #4]
 800884e:	4630      	mov	r0, r6
 8008850:	f000 f85a 	bl	8008908 <__malloc_unlock>
 8008854:	f104 000b 	add.w	r0, r4, #11
 8008858:	1d23      	adds	r3, r4, #4
 800885a:	f020 0007 	bic.w	r0, r0, #7
 800885e:	1ac2      	subs	r2, r0, r3
 8008860:	d0cc      	beq.n	80087fc <_malloc_r+0x20>
 8008862:	1a1b      	subs	r3, r3, r0
 8008864:	50a3      	str	r3, [r4, r2]
 8008866:	e7c9      	b.n	80087fc <_malloc_r+0x20>
 8008868:	4622      	mov	r2, r4
 800886a:	6864      	ldr	r4, [r4, #4]
 800886c:	e7cc      	b.n	8008808 <_malloc_r+0x2c>
 800886e:	1cc4      	adds	r4, r0, #3
 8008870:	f024 0403 	bic.w	r4, r4, #3
 8008874:	42a0      	cmp	r0, r4
 8008876:	d0e3      	beq.n	8008840 <_malloc_r+0x64>
 8008878:	1a21      	subs	r1, r4, r0
 800887a:	4630      	mov	r0, r6
 800887c:	f000 f82e 	bl	80088dc <_sbrk_r>
 8008880:	3001      	adds	r0, #1
 8008882:	d1dd      	bne.n	8008840 <_malloc_r+0x64>
 8008884:	e7cf      	b.n	8008826 <_malloc_r+0x4a>
 8008886:	bf00      	nop
 8008888:	200000d0 	.word	0x200000d0
 800888c:	200000d4 	.word	0x200000d4

08008890 <_realloc_r>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	4607      	mov	r7, r0
 8008894:	4614      	mov	r4, r2
 8008896:	460e      	mov	r6, r1
 8008898:	b921      	cbnz	r1, 80088a4 <_realloc_r+0x14>
 800889a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800889e:	4611      	mov	r1, r2
 80088a0:	f7ff bf9c 	b.w	80087dc <_malloc_r>
 80088a4:	b922      	cbnz	r2, 80088b0 <_realloc_r+0x20>
 80088a6:	f7ff ff49 	bl	800873c <_free_r>
 80088aa:	4625      	mov	r5, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088b0:	f000 f830 	bl	8008914 <_malloc_usable_size_r>
 80088b4:	42a0      	cmp	r0, r4
 80088b6:	d20f      	bcs.n	80088d8 <_realloc_r+0x48>
 80088b8:	4621      	mov	r1, r4
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7ff ff8e 	bl	80087dc <_malloc_r>
 80088c0:	4605      	mov	r5, r0
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0f2      	beq.n	80088ac <_realloc_r+0x1c>
 80088c6:	4631      	mov	r1, r6
 80088c8:	4622      	mov	r2, r4
 80088ca:	f7ff ff0f 	bl	80086ec <memcpy>
 80088ce:	4631      	mov	r1, r6
 80088d0:	4638      	mov	r0, r7
 80088d2:	f7ff ff33 	bl	800873c <_free_r>
 80088d6:	e7e9      	b.n	80088ac <_realloc_r+0x1c>
 80088d8:	4635      	mov	r5, r6
 80088da:	e7e7      	b.n	80088ac <_realloc_r+0x1c>

080088dc <_sbrk_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d06      	ldr	r5, [pc, #24]	; (80088f8 <_sbrk_r+0x1c>)
 80088e0:	2300      	movs	r3, #0
 80088e2:	4604      	mov	r4, r0
 80088e4:	4608      	mov	r0, r1
 80088e6:	602b      	str	r3, [r5, #0]
 80088e8:	f7fa fc0a 	bl	8003100 <_sbrk>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	d102      	bne.n	80088f6 <_sbrk_r+0x1a>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b103      	cbz	r3, 80088f6 <_sbrk_r+0x1a>
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	bd38      	pop	{r3, r4, r5, pc}
 80088f8:	200004ac 	.word	0x200004ac

080088fc <__malloc_lock>:
 80088fc:	4801      	ldr	r0, [pc, #4]	; (8008904 <__malloc_lock+0x8>)
 80088fe:	f000 b811 	b.w	8008924 <__retarget_lock_acquire_recursive>
 8008902:	bf00      	nop
 8008904:	200004b4 	.word	0x200004b4

08008908 <__malloc_unlock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_unlock+0x8>)
 800890a:	f000 b80c 	b.w	8008926 <__retarget_lock_release_recursive>
 800890e:	bf00      	nop
 8008910:	200004b4 	.word	0x200004b4

08008914 <_malloc_usable_size_r>:
 8008914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008918:	1f18      	subs	r0, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	bfbc      	itt	lt
 800891e:	580b      	ldrlt	r3, [r1, r0]
 8008920:	18c0      	addlt	r0, r0, r3
 8008922:	4770      	bx	lr

08008924 <__retarget_lock_acquire_recursive>:
 8008924:	4770      	bx	lr

08008926 <__retarget_lock_release_recursive>:
 8008926:	4770      	bx	lr

08008928 <_init>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr

08008934 <_fini>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr
